
IDPv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000715c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f20  08007268  08007268  00008268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a188  0800a188  0000c010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a188  0800a188  0000c010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a188  0800a188  0000c010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a188  0800a188  0000b188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a18c  0800a18c  0000b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800a190  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000010  0800a1a0  0000c010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  0800a1a0  0000c6a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004fe16  00000000  00000000  0000c039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e8  00000000  00000000  0005be4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003c78  00000000  00000000  0005f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002dc2  00000000  00000000  000633b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019133  00000000  00000000  00066172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021edf  00000000  00000000  0007f2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4d41  00000000  00000000  000a1184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145ec5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010b24  00000000  00000000  00145f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00156a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08007250 	.word	0x08007250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08007250 	.word	0x08007250

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <DWT_Delay_Init+0x58>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <DWT_Delay_Init+0x58>)
 8000652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000656:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <DWT_Delay_Init+0x58>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	4a10      	ldr	r2, [pc, #64]	@ (80006a0 <DWT_Delay_Init+0x58>)
 800065e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000662:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <DWT_Delay_Init+0x5c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <DWT_Delay_Init+0x5c>)
 800066a:	f023 0301 	bic.w	r3, r3, #1
 800066e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <DWT_Delay_Init+0x5c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0b      	ldr	r2, [pc, #44]	@ (80006a4 <DWT_Delay_Init+0x5c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <DWT_Delay_Init+0x5c>)
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000682:	bf00      	nop
    __ASM volatile ("NOP");
 8000684:	bf00      	nop
    __ASM volatile ("NOP");
 8000686:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <DWT_Delay_Init+0x5c>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000690:	2300      	movs	r3, #0
 8000692:	e000      	b.n	8000696 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000694:	2301      	movs	r3, #1
    }
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000edf0 	.word	0xe000edf0
 80006a4:	e0001000 	.word	0xe0001000

080006a8 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <DWT_Delay_us+0x48>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80006b6:	f006 fb43 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <DWT_Delay_us+0x4c>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9b      	lsrs	r3, r3, #18
 80006c4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80006d0:	bf00      	nop
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <DWT_Delay_us+0x48>)
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	1ad2      	subs	r2, r2, r3
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1acb      	subs	r3, r1, r3
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3f6      	bcc.n	80006d2 <DWT_Delay_us+0x2a>
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	e0001000 	.word	0xe0001000
 80006f4:	431bde83 	.word	0x431bde83

080006f8 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <DWT_Delay_ms+0x44>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000706:	f006 fb1b 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 800070a:	4603      	mov	r3, r0
 800070c:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <DWT_Delay_ms+0x48>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	099b      	lsrs	r3, r3, #6
 8000714:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000720:	bf00      	nop
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <DWT_Delay_ms+0x44>)
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	1ad2      	subs	r2, r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3f8      	bcc.n	8000722 <DWT_Delay_ms+0x2a>
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	e0001000 	.word	0xe0001000
 8000740:	10624dd3 	.word	0x10624dd3

08000744 <u8x8_gpio_and_delay_stm32>:
/* USER CODE BEGIN 0 */

uint8_t u8x8_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8,
                                  U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
                                  U8X8_UNUSED void *arg_ptr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	72fb      	strb	r3, [r7, #11]
 8000752:	4613      	mov	r3, r2
 8000754:	72bb      	strb	r3, [r7, #10]
  switch (msg)
 8000756:	7afb      	ldrb	r3, [r7, #11]
 8000758:	2b29      	cmp	r3, #41	@ 0x29
 800075a:	d104      	bne.n	8000766 <u8x8_gpio_and_delay_stm32+0x22>
  {
  case U8X8_MSG_DELAY_MILLI:
    HAL_Delay(arg_int);
 800075c:	7abb      	ldrb	r3, [r7, #10]
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fa48 	bl	8004bf4 <HAL_Delay>
    break;
 8000764:	e000      	b.n	8000768 <u8x8_gpio_and_delay_stm32+0x24>
  default:
    break;
 8000766:	bf00      	nop
  }
  return 1;
 8000768:	2301      	movs	r3, #1
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <u8x8_byte_hw_i2c_stm32>:
uint8_t u8x8_byte_hw_i2c_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af02      	add	r7, sp, #8
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	72fb      	strb	r3, [r7, #11]
 8000782:	4613      	mov	r3, r2
 8000784:	72bb      	strb	r3, [r7, #10]
  static uint8_t buffer[32];
  static uint8_t buf_idx;
  uint8_t *data;

  switch (msg)
 8000786:	7afb      	ldrb	r3, [r7, #11]
 8000788:	3b14      	subs	r3, #20
 800078a:	2b0c      	cmp	r3, #12
 800078c:	d845      	bhi.n	800081a <u8x8_byte_hw_i2c_stm32+0xa6>
 800078e:	a201      	add	r2, pc, #4	@ (adr r2, 8000794 <u8x8_byte_hw_i2c_stm32+0x20>)
 8000790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000794:	0800081f 	.word	0x0800081f
 8000798:	0800081b 	.word	0x0800081b
 800079c:	0800081b 	.word	0x0800081b
 80007a0:	080007c9 	.word	0x080007c9
 80007a4:	080007f9 	.word	0x080007f9
 80007a8:	08000801 	.word	0x08000801
 80007ac:	0800081b 	.word	0x0800081b
 80007b0:	0800081b 	.word	0x0800081b
 80007b4:	0800081b 	.word	0x0800081b
 80007b8:	0800081b 	.word	0x0800081b
 80007bc:	0800081b 	.word	0x0800081b
 80007c0:	0800081b 	.word	0x0800081b
 80007c4:	0800081f 	.word	0x0800081f
  {
  case U8X8_MSG_BYTE_SEND:
    data = (uint8_t *)arg_ptr;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	617b      	str	r3, [r7, #20]
    while (arg_int > 0)
 80007cc:	e010      	b.n	80007f0 <u8x8_byte_hw_i2c_stm32+0x7c>
    {
      buffer[buf_idx++] = *data;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <u8x8_byte_hw_i2c_stm32+0xb8>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	b2d1      	uxtb	r1, r2
 80007d6:	4a15      	ldr	r2, [pc, #84]	@ (800082c <u8x8_byte_hw_i2c_stm32+0xb8>)
 80007d8:	7011      	strb	r1, [r2, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	7819      	ldrb	r1, [r3, #0]
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <u8x8_byte_hw_i2c_stm32+0xbc>)
 80007e2:	5499      	strb	r1, [r3, r2]
      data++;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
      arg_int--;
 80007ea:	7abb      	ldrb	r3, [r7, #10]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	72bb      	strb	r3, [r7, #10]
    while (arg_int > 0)
 80007f0:	7abb      	ldrb	r3, [r7, #10]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1eb      	bne.n	80007ce <u8x8_byte_hw_i2c_stm32+0x5a>
    }
    break;
 80007f6:	e013      	b.n	8000820 <u8x8_byte_hw_i2c_stm32+0xac>
  case U8X8_MSG_BYTE_INIT:
    break;
  case U8X8_MSG_BYTE_SET_DC:
    break;
  case U8X8_MSG_BYTE_START_TRANSFER:
    buf_idx = 0;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <u8x8_byte_hw_i2c_stm32+0xb8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
    break;
 80007fe:	e00f      	b.n	8000820 <u8x8_byte_hw_i2c_stm32+0xac>
  case U8X8_MSG_BYTE_END_TRANSFER:
    HAL_I2C_Master_Transmit(&hi2c1, (0x3C << 1), buffer, buf_idx, HAL_MAX_DELAY);
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <u8x8_byte_hw_i2c_stm32+0xb8>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <u8x8_byte_hw_i2c_stm32+0xbc>)
 8000810:	2178      	movs	r1, #120	@ 0x78
 8000812:	4808      	ldr	r0, [pc, #32]	@ (8000834 <u8x8_byte_hw_i2c_stm32+0xc0>)
 8000814:	f004 fe30 	bl	8005478 <HAL_I2C_Master_Transmit>
    break;
 8000818:	e002      	b.n	8000820 <u8x8_byte_hw_i2c_stm32+0xac>
  default:
    return 0;
 800081a:	2300      	movs	r3, #0
 800081c:	e001      	b.n	8000822 <u8x8_byte_hw_i2c_stm32+0xae>
    break;
 800081e:	bf00      	nop
  }
  return 1;
 8000820:	2301      	movs	r3, #1
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000027a 	.word	0x2000027a
 8000830:	2000027c 	.word	0x2000027c
 8000834:	2000002c 	.word	0x2000002c

08000838 <UpdateState>:
void UpdateState(SystemState *state, int16_t encoder_position1, int16_t encoder_position2, int16_t encoder_position3)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	4608      	mov	r0, r1
 8000842:	4611      	mov	r1, r2
 8000844:	461a      	mov	r2, r3
 8000846:	4603      	mov	r3, r0
 8000848:	817b      	strh	r3, [r7, #10]
 800084a:	460b      	mov	r3, r1
 800084c:	813b      	strh	r3, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	80fb      	strh	r3, [r7, #6]
  uint32_t current_time = HAL_GetTick();
 8000852:	f004 f9c5 	bl	8004be0 <HAL_GetTick>
 8000856:	6178      	str	r0, [r7, #20]

  // Only update state based on encoder positions if not in prstinit1 state
  if (*state != prstinit1 || *state != prstinit2 || *state != prstinit3 || RD_PRST_state == false)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10e      	bne.n	800087e <UpdateState+0x46>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b05      	cmp	r3, #5
 8000866:	d10a      	bne.n	800087e <UpdateState+0x46>
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b06      	cmp	r3, #6
 800086e:	d106      	bne.n	800087e <UpdateState+0x46>
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <UpdateState+0xb4>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f083 0301 	eor.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d028      	beq.n	80008d0 <UpdateState+0x98>
  {
    if (encoder_position1 != last_encoder_position1)
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <UpdateState+0xb8>)
 8000880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000884:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000888:	429a      	cmp	r2, r3
 800088a:	d006      	beq.n	800089a <UpdateState+0x62>
    {
      *state = STATE1;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
      lastActivityTime = current_time;
 8000892:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <UpdateState+0xbc>)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	e01a      	b.n	80008d0 <UpdateState+0x98>
    }
    else if (encoder_position2 != last_encoder_position2)
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <UpdateState+0xc0>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d006      	beq.n	80008b6 <UpdateState+0x7e>
    {
      *state = STATE2;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]
      lastActivityTime = current_time;
 80008ae:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <UpdateState+0xbc>)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e00c      	b.n	80008d0 <UpdateState+0x98>
    }
    else if (encoder_position3 != last_encoder_position3)
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <UpdateState+0xc4>)
 80008b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d005      	beq.n	80008d0 <UpdateState+0x98>
    {
      *state = STATE3;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2203      	movs	r2, #3
 80008c8:	701a      	strb	r2, [r3, #0]
      lastActivityTime = current_time;
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <UpdateState+0xbc>)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	6013      	str	r3, [r2, #0]
    }
  }

  last_encoder_position1 = encoder_position1;
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <UpdateState+0xb8>)
 80008d2:	897b      	ldrh	r3, [r7, #10]
 80008d4:	8013      	strh	r3, [r2, #0]
  last_encoder_position2 = encoder_position2;
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <UpdateState+0xc0>)
 80008d8:	893b      	ldrh	r3, [r7, #8]
 80008da:	8013      	strh	r3, [r2, #0]
  last_encoder_position3 = encoder_position3;
 80008dc:	4a07      	ldr	r2, [pc, #28]	@ (80008fc <UpdateState+0xc4>)
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	8013      	strh	r3, [r2, #0]
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000016a 	.word	0x2000016a
 80008f0:	20000250 	.word	0x20000250
 80008f4:	20000270 	.word	0x20000270
 80008f8:	20000252 	.word	0x20000252
 80008fc:	20000254 	.word	0x20000254

08000900 <ClampValue>:
u8g2_uint_t ClampValue(int16_t value, u8g2_uint_t min, u8g2_uint_t max)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	460b      	mov	r3, r1
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	4613      	mov	r3, r2
 8000910:	807b      	strh	r3, [r7, #2]
  if (value < min)
 8000912:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	da01      	bge.n	8000920 <ClampValue+0x20>
    return min;
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	e007      	b.n	8000930 <ClampValue+0x30>
  if (value > max)
 8000920:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	429a      	cmp	r2, r3
 8000928:	dd01      	ble.n	800092e <ClampValue+0x2e>
    return max;
 800092a:	887b      	ldrh	r3, [r7, #2]
 800092c:	e000      	b.n	8000930 <ClampValue+0x30>
  return (u8g2_uint_t)value;
 800092e:	88fb      	ldrh	r3, [r7, #6]
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <MapValue>:
uint8_t MapValue(int16_t value, int16_t in_min, int16_t in_max, uint8_t out_min, uint8_t out_max)
{
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	461a      	mov	r2, r3
 8000948:	4623      	mov	r3, r4
 800094a:	80fb      	strh	r3, [r7, #6]
 800094c:	4603      	mov	r3, r0
 800094e:	80bb      	strh	r3, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
 8000954:	4613      	mov	r3, r2
 8000956:	707b      	strb	r3, [r7, #1]
  return out_min + (uint8_t)((float)(value - in_min) * (float)(out_max - out_min) / (float)(in_max - in_min));
 8000958:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800095c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fcac 	bl	80002c0 <__aeabi_i2f>
 8000968:	4604      	mov	r4, r0
 800096a:	7e3a      	ldrb	r2, [r7, #24]
 800096c:	787b      	ldrb	r3, [r7, #1]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fca5 	bl	80002c0 <__aeabi_i2f>
 8000976:	4603      	mov	r3, r0
 8000978:	4619      	mov	r1, r3
 800097a:	4620      	mov	r0, r4
 800097c:	f7ff fcf4 	bl	8000368 <__aeabi_fmul>
 8000980:	4603      	mov	r3, r0
 8000982:	461c      	mov	r4, r3
 8000984:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000988:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc96 	bl	80002c0 <__aeabi_i2f>
 8000994:	4603      	mov	r3, r0
 8000996:	4619      	mov	r1, r3
 8000998:	4620      	mov	r0, r4
 800099a:	f7ff fd99 	bl	80004d0 <__aeabi_fdiv>
 800099e:	4603      	mov	r3, r0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe31 	bl	8000608 <__aeabi_f2uiz>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	787b      	ldrb	r3, [r7, #1]
 80009ac:	4413      	add	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}

080009b8 <handleprstinit1>:
void handleprstinit1()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af02      	add	r7, sp, #8
  currentTimepreset1 = HAL_GetTick();
 80009be:	f004 f90f 	bl	8004be0 <HAL_GetTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a58      	ldr	r2, [pc, #352]	@ (8000b28 <handleprstinit1+0x170>)
 80009c6:	6013      	str	r3, [r2, #0]
  if (currentTimepreset1 - lastBlinkTime >= 600) // 250 ms delay
 80009c8:	4b57      	ldr	r3, [pc, #348]	@ (8000b28 <handleprstinit1+0x170>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b57      	ldr	r3, [pc, #348]	@ (8000b2c <handleprstinit1+0x174>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80009d6:	f0c0 80a4 	bcc.w	8000b22 <handleprstinit1+0x16a>
  {
    lastBlinkTime = currentTimepreset1;
 80009da:	4b53      	ldr	r3, [pc, #332]	@ (8000b28 <handleprstinit1+0x170>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a53      	ldr	r2, [pc, #332]	@ (8000b2c <handleprstinit1+0x174>)
 80009e0:	6013      	str	r3, [r2, #0]
    displayOn = !displayOn; // Toggle display state
 80009e2:	4b53      	ldr	r3, [pc, #332]	@ (8000b30 <handleprstinit1+0x178>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf14      	ite	ne
 80009ea:	2301      	movne	r3, #1
 80009ec:	2300      	moveq	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f083 0301 	eor.w	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b4c      	ldr	r3, [pc, #304]	@ (8000b30 <handleprstinit1+0x178>)
 80009fe:	701a      	strb	r2, [r3, #0]

    if (displayOn)
 8000a00:	4b4b      	ldr	r3, [pc, #300]	@ (8000b30 <handleprstinit1+0x178>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d03e      	beq.n	8000a86 <handleprstinit1+0xce>
    {
      u8g2_ClearBuffer(&u8g2);
 8000a08:	484a      	ldr	r0, [pc, #296]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a0a:	f002 fa1f 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4848      	ldr	r0, [pc, #288]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a12:	f002 f903 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8000a16:	2101      	movs	r1, #1
 8000a18:	4846      	ldr	r0, [pc, #280]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a1a:	f002 ff06 	bl	800382a <u8g2_SetFontMode>
      u8g2_DrawBox(&u8g2, 0, 0, 64, 64);
 8000a1e:	2340      	movs	r3, #64	@ 0x40
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	4842      	ldr	r0, [pc, #264]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a2a:	f002 f9d9 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4840      	ldr	r0, [pc, #256]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a32:	f003 f99b 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000a36:	4940      	ldr	r1, [pc, #256]	@ (8000b38 <handleprstinit1+0x180>)
 8000a38:	483e      	ldr	r0, [pc, #248]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a3a:	f003 f851 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 10, 55, "SET");
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b3c <handleprstinit1+0x184>)
 8000a40:	2237      	movs	r2, #55	@ 0x37
 8000a42:	210a      	movs	r1, #10
 8000a44:	483b      	ldr	r0, [pc, #236]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a46:	f002 ffad 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 10, 28, "PRE");
 8000a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b40 <handleprstinit1+0x188>)
 8000a4c:	221c      	movs	r2, #28
 8000a4e:	210a      	movs	r1, #10
 8000a50:	4838      	ldr	r0, [pc, #224]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a52:	f002 ffa7 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 90, 43, "1");
 8000a56:	4b3b      	ldr	r3, [pc, #236]	@ (8000b44 <handleprstinit1+0x18c>)
 8000a58:	222b      	movs	r2, #43	@ 0x2b
 8000a5a:	215a      	movs	r1, #90	@ 0x5a
 8000a5c:	4835      	ldr	r0, [pc, #212]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a5e:	f002 ffa1 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000a62:	2101      	movs	r1, #1
 8000a64:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a66:	f003 f981 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
 8000a6a:	4937      	ldr	r1, [pc, #220]	@ (8000b48 <handleprstinit1+0x190>)
 8000a6c:	4831      	ldr	r0, [pc, #196]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a6e:	f003 f837 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
 8000a72:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <handleprstinit1+0x194>)
 8000a74:	220b      	movs	r2, #11
 8000a76:	214e      	movs	r1, #78	@ 0x4e
 8000a78:	482e      	ldr	r0, [pc, #184]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a7a:	f002 ff93 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 8000a7e:	482d      	ldr	r0, [pc, #180]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a80:	f002 fa57 	bl	8002f32 <u8g2_SendBuffer>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
      u8g2_SendBuffer(&u8g2);
    }
  }
}
 8000a84:	e04d      	b.n	8000b22 <handleprstinit1+0x16a>
      u8g2_ClearBuffer(&u8g2);
 8000a86:	482b      	ldr	r0, [pc, #172]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a88:	f002 f9e0 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4829      	ldr	r0, [pc, #164]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a90:	f002 f8c4 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8000a94:	2101      	movs	r1, #1
 8000a96:	4827      	ldr	r0, [pc, #156]	@ (8000b34 <handleprstinit1+0x17c>)
 8000a98:	f002 fec7 	bl	800382a <u8g2_SetFontMode>
      u8g2_DrawBox(&u8g2, 0, 0, 64, 64);
 8000a9c:	2340      	movs	r3, #64	@ 0x40
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2340      	movs	r3, #64	@ 0x40
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4823      	ldr	r0, [pc, #140]	@ (8000b34 <handleprstinit1+0x17c>)
 8000aa8:	f002 f99a 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000aac:	2102      	movs	r1, #2
 8000aae:	4821      	ldr	r0, [pc, #132]	@ (8000b34 <handleprstinit1+0x17c>)
 8000ab0:	f003 f95c 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000ab4:	4920      	ldr	r1, [pc, #128]	@ (8000b38 <handleprstinit1+0x180>)
 8000ab6:	481f      	ldr	r0, [pc, #124]	@ (8000b34 <handleprstinit1+0x17c>)
 8000ab8:	f003 f812 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 10, 55, "SET");
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <handleprstinit1+0x184>)
 8000abe:	2237      	movs	r2, #55	@ 0x37
 8000ac0:	210a      	movs	r1, #10
 8000ac2:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <handleprstinit1+0x17c>)
 8000ac4:	f002 ff6e 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 10, 28, "PRE");
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <handleprstinit1+0x188>)
 8000aca:	221c      	movs	r2, #28
 8000acc:	210a      	movs	r1, #10
 8000ace:	4819      	ldr	r0, [pc, #100]	@ (8000b34 <handleprstinit1+0x17c>)
 8000ad0:	f002 ff68 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4817      	ldr	r0, [pc, #92]	@ (8000b34 <handleprstinit1+0x17c>)
 8000ad8:	f003 f948 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawBox(&u8g2, 80, 19, 32, 29);
 8000adc:	231d      	movs	r3, #29
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2320      	movs	r3, #32
 8000ae2:	2213      	movs	r2, #19
 8000ae4:	2150      	movs	r1, #80	@ 0x50
 8000ae6:	4813      	ldr	r0, [pc, #76]	@ (8000b34 <handleprstinit1+0x17c>)
 8000ae8:	f002 f97a 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000aec:	2102      	movs	r1, #2
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <handleprstinit1+0x17c>)
 8000af0:	f003 f93c 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawStr(&u8g2, 90, 43, "1");
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <handleprstinit1+0x18c>)
 8000af6:	222b      	movs	r2, #43	@ 0x2b
 8000af8:	215a      	movs	r1, #90	@ 0x5a
 8000afa:	480e      	ldr	r0, [pc, #56]	@ (8000b34 <handleprstinit1+0x17c>)
 8000afc:	f002 ff52 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000b00:	2101      	movs	r1, #1
 8000b02:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <handleprstinit1+0x17c>)
 8000b04:	f003 f932 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
 8000b08:	490f      	ldr	r1, [pc, #60]	@ (8000b48 <handleprstinit1+0x190>)
 8000b0a:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <handleprstinit1+0x17c>)
 8000b0c:	f002 ffe8 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <handleprstinit1+0x194>)
 8000b12:	220b      	movs	r2, #11
 8000b14:	214e      	movs	r1, #78	@ 0x4e
 8000b16:	4807      	ldr	r0, [pc, #28]	@ (8000b34 <handleprstinit1+0x17c>)
 8000b18:	f002 ff44 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <handleprstinit1+0x17c>)
 8000b1e:	f002 fa08 	bl	8002f32 <u8g2_SendBuffer>
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000164 	.word	0x20000164
 8000b2c:	20000160 	.word	0x20000160
 8000b30:	20000169 	.word	0x20000169
 8000b34:	20000188 	.word	0x20000188
 8000b38:	080098bc 	.word	0x080098bc
 8000b3c:	08007268 	.word	0x08007268
 8000b40:	0800726c 	.word	0x0800726c
 8000b44:	08007270 	.word	0x08007270
 8000b48:	080091a0 	.word	0x080091a0
 8000b4c:	08007274 	.word	0x08007274

08000b50 <handleprstinit2>:
void handleprstinit2()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af02      	add	r7, sp, #8
  currentTimepreset1 = HAL_GetTick();
 8000b56:	f004 f843 	bl	8004be0 <HAL_GetTick>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a58      	ldr	r2, [pc, #352]	@ (8000cc0 <handleprstinit2+0x170>)
 8000b5e:	6013      	str	r3, [r2, #0]
  if (currentTimepreset1 - lastBlinkTime >= 600) // 250 ms delay
 8000b60:	4b57      	ldr	r3, [pc, #348]	@ (8000cc0 <handleprstinit2+0x170>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b57      	ldr	r3, [pc, #348]	@ (8000cc4 <handleprstinit2+0x174>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000b6e:	f0c0 80a4 	bcc.w	8000cba <handleprstinit2+0x16a>
  {
    lastBlinkTime = currentTimepreset1;
 8000b72:	4b53      	ldr	r3, [pc, #332]	@ (8000cc0 <handleprstinit2+0x170>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a53      	ldr	r2, [pc, #332]	@ (8000cc4 <handleprstinit2+0x174>)
 8000b78:	6013      	str	r3, [r2, #0]
    displayOn = !displayOn; // Toggle display state
 8000b7a:	4b53      	ldr	r3, [pc, #332]	@ (8000cc8 <handleprstinit2+0x178>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf14      	ite	ne
 8000b82:	2301      	movne	r3, #1
 8000b84:	2300      	moveq	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f083 0301 	eor.w	r3, r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc8 <handleprstinit2+0x178>)
 8000b96:	701a      	strb	r2, [r3, #0]

    if (displayOn)
 8000b98:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc8 <handleprstinit2+0x178>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d03e      	beq.n	8000c1e <handleprstinit2+0xce>
    {
      u8g2_ClearBuffer(&u8g2);
 8000ba0:	484a      	ldr	r0, [pc, #296]	@ (8000ccc <handleprstinit2+0x17c>)
 8000ba2:	f002 f953 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4848      	ldr	r0, [pc, #288]	@ (8000ccc <handleprstinit2+0x17c>)
 8000baa:	f002 f837 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4846      	ldr	r0, [pc, #280]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bb2:	f002 fe3a 	bl	800382a <u8g2_SetFontMode>
      u8g2_DrawBox(&u8g2, 0, 0, 64, 64);
 8000bb6:	2340      	movs	r3, #64	@ 0x40
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2340      	movs	r3, #64	@ 0x40
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4842      	ldr	r0, [pc, #264]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bc2:	f002 f90d 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4840      	ldr	r0, [pc, #256]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bca:	f003 f8cf 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000bce:	4940      	ldr	r1, [pc, #256]	@ (8000cd0 <handleprstinit2+0x180>)
 8000bd0:	483e      	ldr	r0, [pc, #248]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bd2:	f002 ff85 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 10, 55, "SET");
 8000bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd4 <handleprstinit2+0x184>)
 8000bd8:	2237      	movs	r2, #55	@ 0x37
 8000bda:	210a      	movs	r1, #10
 8000bdc:	483b      	ldr	r0, [pc, #236]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bde:	f002 fee1 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 10, 28, "PRE");
 8000be2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd8 <handleprstinit2+0x188>)
 8000be4:	221c      	movs	r2, #28
 8000be6:	210a      	movs	r1, #10
 8000be8:	4838      	ldr	r0, [pc, #224]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bea:	f002 fedb 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 90, 43, "2");
 8000bee:	4b3b      	ldr	r3, [pc, #236]	@ (8000cdc <handleprstinit2+0x18c>)
 8000bf0:	222b      	movs	r2, #43	@ 0x2b
 8000bf2:	215a      	movs	r1, #90	@ 0x5a
 8000bf4:	4835      	ldr	r0, [pc, #212]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bf6:	f002 fed5 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4833      	ldr	r0, [pc, #204]	@ (8000ccc <handleprstinit2+0x17c>)
 8000bfe:	f003 f8b5 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
 8000c02:	4937      	ldr	r1, [pc, #220]	@ (8000ce0 <handleprstinit2+0x190>)
 8000c04:	4831      	ldr	r0, [pc, #196]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c06:	f002 ff6b 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
 8000c0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <handleprstinit2+0x194>)
 8000c0c:	220b      	movs	r2, #11
 8000c0e:	214e      	movs	r1, #78	@ 0x4e
 8000c10:	482e      	ldr	r0, [pc, #184]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c12:	f002 fec7 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 8000c16:	482d      	ldr	r0, [pc, #180]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c18:	f002 f98b 	bl	8002f32 <u8g2_SendBuffer>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
      u8g2_SendBuffer(&u8g2);
    }
  }
}
 8000c1c:	e04d      	b.n	8000cba <handleprstinit2+0x16a>
      u8g2_ClearBuffer(&u8g2);
 8000c1e:	482b      	ldr	r0, [pc, #172]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c20:	f002 f914 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8000c24:	2101      	movs	r1, #1
 8000c26:	4829      	ldr	r0, [pc, #164]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c28:	f001 fff8 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4827      	ldr	r0, [pc, #156]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c30:	f002 fdfb 	bl	800382a <u8g2_SetFontMode>
      u8g2_DrawBox(&u8g2, 0, 0, 64, 64);
 8000c34:	2340      	movs	r3, #64	@ 0x40
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2340      	movs	r3, #64	@ 0x40
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4823      	ldr	r0, [pc, #140]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c40:	f002 f8ce 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000c44:	2102      	movs	r1, #2
 8000c46:	4821      	ldr	r0, [pc, #132]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c48:	f003 f890 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000c4c:	4920      	ldr	r1, [pc, #128]	@ (8000cd0 <handleprstinit2+0x180>)
 8000c4e:	481f      	ldr	r0, [pc, #124]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c50:	f002 ff46 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 10, 55, "SET");
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <handleprstinit2+0x184>)
 8000c56:	2237      	movs	r2, #55	@ 0x37
 8000c58:	210a      	movs	r1, #10
 8000c5a:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c5c:	f002 fea2 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 10, 28, "PRE");
 8000c60:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <handleprstinit2+0x188>)
 8000c62:	221c      	movs	r2, #28
 8000c64:	210a      	movs	r1, #10
 8000c66:	4819      	ldr	r0, [pc, #100]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c68:	f002 fe9c 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4817      	ldr	r0, [pc, #92]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c70:	f003 f87c 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawBox(&u8g2, 80, 19, 32, 29);
 8000c74:	231d      	movs	r3, #29
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2320      	movs	r3, #32
 8000c7a:	2213      	movs	r2, #19
 8000c7c:	2150      	movs	r1, #80	@ 0x50
 8000c7e:	4813      	ldr	r0, [pc, #76]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c80:	f002 f8ae 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000c84:	2102      	movs	r1, #2
 8000c86:	4811      	ldr	r0, [pc, #68]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c88:	f003 f870 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawStr(&u8g2, 90, 43, "2");
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <handleprstinit2+0x18c>)
 8000c8e:	222b      	movs	r2, #43	@ 0x2b
 8000c90:	215a      	movs	r1, #90	@ 0x5a
 8000c92:	480e      	ldr	r0, [pc, #56]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c94:	f002 fe86 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <handleprstinit2+0x17c>)
 8000c9c:	f003 f866 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
 8000ca0:	490f      	ldr	r1, [pc, #60]	@ (8000ce0 <handleprstinit2+0x190>)
 8000ca2:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <handleprstinit2+0x17c>)
 8000ca4:	f002 ff1c 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <handleprstinit2+0x194>)
 8000caa:	220b      	movs	r2, #11
 8000cac:	214e      	movs	r1, #78	@ 0x4e
 8000cae:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <handleprstinit2+0x17c>)
 8000cb0:	f002 fe78 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <handleprstinit2+0x17c>)
 8000cb6:	f002 f93c 	bl	8002f32 <u8g2_SendBuffer>
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000164 	.word	0x20000164
 8000cc4:	20000160 	.word	0x20000160
 8000cc8:	20000169 	.word	0x20000169
 8000ccc:	20000188 	.word	0x20000188
 8000cd0:	080098bc 	.word	0x080098bc
 8000cd4:	08007268 	.word	0x08007268
 8000cd8:	0800726c 	.word	0x0800726c
 8000cdc:	0800727c 	.word	0x0800727c
 8000ce0:	080091a0 	.word	0x080091a0
 8000ce4:	08007274 	.word	0x08007274

08000ce8 <handleprstinit3>:
void handleprstinit3()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af02      	add	r7, sp, #8
  currentTimepreset1 = HAL_GetTick();
 8000cee:	f003 ff77 	bl	8004be0 <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a58      	ldr	r2, [pc, #352]	@ (8000e58 <handleprstinit3+0x170>)
 8000cf6:	6013      	str	r3, [r2, #0]
  if (currentTimepreset1 - lastBlinkTime >= 600) // 250 ms delay
 8000cf8:	4b57      	ldr	r3, [pc, #348]	@ (8000e58 <handleprstinit3+0x170>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b57      	ldr	r3, [pc, #348]	@ (8000e5c <handleprstinit3+0x174>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000d06:	f0c0 80a4 	bcc.w	8000e52 <handleprstinit3+0x16a>
  {
    lastBlinkTime = currentTimepreset1;
 8000d0a:	4b53      	ldr	r3, [pc, #332]	@ (8000e58 <handleprstinit3+0x170>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a53      	ldr	r2, [pc, #332]	@ (8000e5c <handleprstinit3+0x174>)
 8000d10:	6013      	str	r3, [r2, #0]
    displayOn = !displayOn; // Toggle display state
 8000d12:	4b53      	ldr	r3, [pc, #332]	@ (8000e60 <handleprstinit3+0x178>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf14      	ite	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	2300      	moveq	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f083 0301 	eor.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e60 <handleprstinit3+0x178>)
 8000d2e:	701a      	strb	r2, [r3, #0]

    if (displayOn)
 8000d30:	4b4b      	ldr	r3, [pc, #300]	@ (8000e60 <handleprstinit3+0x178>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d03e      	beq.n	8000db6 <handleprstinit3+0xce>
    {
      u8g2_ClearBuffer(&u8g2);
 8000d38:	484a      	ldr	r0, [pc, #296]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d3a:	f002 f887 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4848      	ldr	r0, [pc, #288]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d42:	f001 ff6b 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8000d46:	2101      	movs	r1, #1
 8000d48:	4846      	ldr	r0, [pc, #280]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d4a:	f002 fd6e 	bl	800382a <u8g2_SetFontMode>
      u8g2_DrawBox(&u8g2, 0, 0, 64, 64);
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2340      	movs	r3, #64	@ 0x40
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	4842      	ldr	r0, [pc, #264]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d5a:	f002 f841 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4840      	ldr	r0, [pc, #256]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d62:	f003 f803 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000d66:	4940      	ldr	r1, [pc, #256]	@ (8000e68 <handleprstinit3+0x180>)
 8000d68:	483e      	ldr	r0, [pc, #248]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d6a:	f002 feb9 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 10, 55, "SET");
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e6c <handleprstinit3+0x184>)
 8000d70:	2237      	movs	r2, #55	@ 0x37
 8000d72:	210a      	movs	r1, #10
 8000d74:	483b      	ldr	r0, [pc, #236]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d76:	f002 fe15 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 10, 28, "PRE");
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <handleprstinit3+0x188>)
 8000d7c:	221c      	movs	r2, #28
 8000d7e:	210a      	movs	r1, #10
 8000d80:	4838      	ldr	r0, [pc, #224]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d82:	f002 fe0f 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 90, 43, "3");
 8000d86:	4b3b      	ldr	r3, [pc, #236]	@ (8000e74 <handleprstinit3+0x18c>)
 8000d88:	222b      	movs	r2, #43	@ 0x2b
 8000d8a:	215a      	movs	r1, #90	@ 0x5a
 8000d8c:	4835      	ldr	r0, [pc, #212]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d8e:	f002 fe09 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000d92:	2101      	movs	r1, #1
 8000d94:	4833      	ldr	r0, [pc, #204]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d96:	f002 ffe9 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
 8000d9a:	4937      	ldr	r1, [pc, #220]	@ (8000e78 <handleprstinit3+0x190>)
 8000d9c:	4831      	ldr	r0, [pc, #196]	@ (8000e64 <handleprstinit3+0x17c>)
 8000d9e:	f002 fe9f 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
 8000da2:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <handleprstinit3+0x194>)
 8000da4:	220b      	movs	r2, #11
 8000da6:	214e      	movs	r1, #78	@ 0x4e
 8000da8:	482e      	ldr	r0, [pc, #184]	@ (8000e64 <handleprstinit3+0x17c>)
 8000daa:	f002 fdfb 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 8000dae:	482d      	ldr	r0, [pc, #180]	@ (8000e64 <handleprstinit3+0x17c>)
 8000db0:	f002 f8bf 	bl	8002f32 <u8g2_SendBuffer>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
      u8g2_SendBuffer(&u8g2);
    }
  }
}
 8000db4:	e04d      	b.n	8000e52 <handleprstinit3+0x16a>
      u8g2_ClearBuffer(&u8g2);
 8000db6:	482b      	ldr	r0, [pc, #172]	@ (8000e64 <handleprstinit3+0x17c>)
 8000db8:	f002 f848 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4829      	ldr	r0, [pc, #164]	@ (8000e64 <handleprstinit3+0x17c>)
 8000dc0:	f001 ff2c 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4827      	ldr	r0, [pc, #156]	@ (8000e64 <handleprstinit3+0x17c>)
 8000dc8:	f002 fd2f 	bl	800382a <u8g2_SetFontMode>
      u8g2_DrawBox(&u8g2, 0, 0, 64, 64);
 8000dcc:	2340      	movs	r3, #64	@ 0x40
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2340      	movs	r3, #64	@ 0x40
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4823      	ldr	r0, [pc, #140]	@ (8000e64 <handleprstinit3+0x17c>)
 8000dd8:	f002 f802 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4821      	ldr	r0, [pc, #132]	@ (8000e64 <handleprstinit3+0x17c>)
 8000de0:	f002 ffc4 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000de4:	4920      	ldr	r1, [pc, #128]	@ (8000e68 <handleprstinit3+0x180>)
 8000de6:	481f      	ldr	r0, [pc, #124]	@ (8000e64 <handleprstinit3+0x17c>)
 8000de8:	f002 fe7a 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 10, 55, "SET");
 8000dec:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <handleprstinit3+0x184>)
 8000dee:	2237      	movs	r2, #55	@ 0x37
 8000df0:	210a      	movs	r1, #10
 8000df2:	481c      	ldr	r0, [pc, #112]	@ (8000e64 <handleprstinit3+0x17c>)
 8000df4:	f002 fdd6 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 10, 28, "PRE");
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <handleprstinit3+0x188>)
 8000dfa:	221c      	movs	r2, #28
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	4819      	ldr	r0, [pc, #100]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e00:	f002 fdd0 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000e04:	2101      	movs	r1, #1
 8000e06:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e08:	f002 ffb0 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawBox(&u8g2, 80, 19, 32, 29);
 8000e0c:	231d      	movs	r3, #29
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2320      	movs	r3, #32
 8000e12:	2213      	movs	r2, #19
 8000e14:	2150      	movs	r1, #80	@ 0x50
 8000e16:	4813      	ldr	r0, [pc, #76]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e18:	f001 ffe2 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 2);
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4811      	ldr	r0, [pc, #68]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e20:	f002 ffa4 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawStr(&u8g2, 90, 43, "3");
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <handleprstinit3+0x18c>)
 8000e26:	222b      	movs	r2, #43	@ 0x2b
 8000e28:	215a      	movs	r1, #90	@ 0x5a
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e2c:	f002 fdba 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 1);
 8000e30:	2101      	movs	r1, #1
 8000e32:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e34:	f002 ff9a 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
 8000e38:	490f      	ldr	r1, [pc, #60]	@ (8000e78 <handleprstinit3+0x190>)
 8000e3a:	480a      	ldr	r0, [pc, #40]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e3c:	f002 fe50 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 78, 11, "SAVE TO");
 8000e40:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <handleprstinit3+0x194>)
 8000e42:	220b      	movs	r2, #11
 8000e44:	214e      	movs	r1, #78	@ 0x4e
 8000e46:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e48:	f002 fdac 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 8000e4c:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <handleprstinit3+0x17c>)
 8000e4e:	f002 f870 	bl	8002f32 <u8g2_SendBuffer>
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000164 	.word	0x20000164
 8000e5c:	20000160 	.word	0x20000160
 8000e60:	20000169 	.word	0x20000169
 8000e64:	20000188 	.word	0x20000188
 8000e68:	080098bc 	.word	0x080098bc
 8000e6c:	08007268 	.word	0x08007268
 8000e70:	0800726c 	.word	0x0800726c
 8000e74:	08007280 	.word	0x08007280
 8000e78:	080091a0 	.word	0x080091a0
 8000e7c:	08007274 	.word	0x08007274

08000e80 <Ex_prst_s1>:
void Ex_prst_s1()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af04      	add	r7, sp, #16
  // Logic for prst_s3
  u8g2_ClearBuffer(&u8g2);
 8000e86:	4832      	ldr	r0, [pc, #200]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000e88:	f001 ffe0 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4830      	ldr	r0, [pc, #192]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000e90:	f001 fec4 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 8000e94:	2101      	movs	r1, #1
 8000e96:	482e      	ldr	r0, [pc, #184]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000e98:	f002 fcc7 	bl	800382a <u8g2_SetFontMode>
  u8g2_SetDrawColor(&u8g2, 2);
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	482c      	ldr	r0, [pc, #176]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000ea0:	f002 ff64 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000ea4:	492b      	ldr	r1, [pc, #172]	@ (8000f54 <Ex_prst_s1+0xd4>)
 8000ea6:	482a      	ldr	r0, [pc, #168]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000ea8:	f002 fe1a 	bl	8003ae0 <u8g2_SetFont>
  u8g2_DrawStr(&u8g2, 24, 42, "SAVED");
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <Ex_prst_s1+0xd8>)
 8000eae:	222a      	movs	r2, #42	@ 0x2a
 8000eb0:	2118      	movs	r1, #24
 8000eb2:	4827      	ldr	r0, [pc, #156]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000eb4:	f002 fd76 	bl	80039a4 <u8g2_DrawStr>
  u8g2_DrawBox(&u8g2, 17, 16, 94, 32);
 8000eb8:	2320      	movs	r3, #32
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	235e      	movs	r3, #94	@ 0x5e
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	2111      	movs	r1, #17
 8000ec2:	4823      	ldr	r0, [pc, #140]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000ec4:	f001 ff8c 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SendBuffer(&u8g2);
 8000ec8:	4821      	ldr	r0, [pc, #132]	@ (8000f50 <Ex_prst_s1+0xd0>)
 8000eca:	f002 f832 	bl	8002f32 <u8g2_SendBuffer>

  toWrite1[0] = (uint8_t)(encoder_position1 >> 8);
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <Ex_prst_s1+0xdc>)
 8000ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed4:	121b      	asrs	r3, r3, #8
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <Ex_prst_s1+0xe0>)
 8000edc:	701a      	strb	r2, [r3, #0]
  toWrite1[1] = (uint8_t)(encoder_position1 & 0xFF);
 8000ede:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <Ex_prst_s1+0xdc>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <Ex_prst_s1+0xe0>)
 8000ee8:	705a      	strb	r2, [r3, #1]
  toWrite1[2] = (uint8_t)(encoder_position2 >> 8);
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <Ex_prst_s1+0xe4>)
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	121b      	asrs	r3, r3, #8
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <Ex_prst_s1+0xe0>)
 8000ef8:	709a      	strb	r2, [r3, #2]
  toWrite1[3] = (uint8_t)(encoder_position2 & 0xFF);
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <Ex_prst_s1+0xe4>)
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <Ex_prst_s1+0xe0>)
 8000f04:	70da      	strb	r2, [r3, #3]
  toWrite1[4] = (uint8_t)(encoder_position3 >> 8);
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <Ex_prst_s1+0xe8>)
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	121b      	asrs	r3, r3, #8
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <Ex_prst_s1+0xe0>)
 8000f14:	711a      	strb	r2, [r3, #4]
  toWrite1[5] = (uint8_t)(encoder_position3 & 0xFF);
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <Ex_prst_s1+0xe8>)
 8000f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <Ex_prst_s1+0xe0>)
 8000f20:	715a      	strb	r2, [r3, #5]

  HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0, 2, toWrite1, sizeof(toWrite1), 1000);
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2306      	movs	r3, #6
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <Ex_prst_s1+0xe0>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2302      	movs	r3, #2
 8000f32:	2200      	movs	r2, #0
 8000f34:	21a0      	movs	r1, #160	@ 0xa0
 8000f36:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <Ex_prst_s1+0xec>)
 8000f38:	f004 fb9c 	bl	8005674 <HAL_I2C_Mem_Write>
  DWT_Delay_ms(1500);
 8000f3c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f40:	f7ff fbda 	bl	80006f8 <DWT_Delay_ms>
  currentState = MAIN;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <Ex_prst_s1+0xf0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000188 	.word	0x20000188
 8000f54:	080098bc 	.word	0x080098bc
 8000f58:	08007284 	.word	0x08007284
 8000f5c:	20000256 	.word	0x20000256
 8000f60:	20000220 	.word	0x20000220
 8000f64:	20000258 	.word	0x20000258
 8000f68:	2000025a 	.word	0x2000025a
 8000f6c:	2000002c 	.word	0x2000002c
 8000f70:	2000024e 	.word	0x2000024e

08000f74 <Ex_prst_s2>:
void Ex_prst_s2()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af04      	add	r7, sp, #16
  // Logic for prst_s3
  u8g2_ClearBuffer(&u8g2);
 8000f7a:	4832      	ldr	r0, [pc, #200]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000f7c:	f001 ff66 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8000f80:	2101      	movs	r1, #1
 8000f82:	4830      	ldr	r0, [pc, #192]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000f84:	f001 fe4a 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	482e      	ldr	r0, [pc, #184]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000f8c:	f002 fc4d 	bl	800382a <u8g2_SetFontMode>
  u8g2_SetDrawColor(&u8g2, 2);
 8000f90:	2102      	movs	r1, #2
 8000f92:	482c      	ldr	r0, [pc, #176]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000f94:	f002 feea 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8000f98:	492b      	ldr	r1, [pc, #172]	@ (8001048 <Ex_prst_s2+0xd4>)
 8000f9a:	482a      	ldr	r0, [pc, #168]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000f9c:	f002 fda0 	bl	8003ae0 <u8g2_SetFont>
  u8g2_DrawStr(&u8g2, 24, 42, "SAVED");
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <Ex_prst_s2+0xd8>)
 8000fa2:	222a      	movs	r2, #42	@ 0x2a
 8000fa4:	2118      	movs	r1, #24
 8000fa6:	4827      	ldr	r0, [pc, #156]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000fa8:	f002 fcfc 	bl	80039a4 <u8g2_DrawStr>
  u8g2_DrawBox(&u8g2, 17, 16, 94, 32);
 8000fac:	2320      	movs	r3, #32
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	235e      	movs	r3, #94	@ 0x5e
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	2111      	movs	r1, #17
 8000fb6:	4823      	ldr	r0, [pc, #140]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000fb8:	f001 ff12 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SendBuffer(&u8g2);
 8000fbc:	4821      	ldr	r0, [pc, #132]	@ (8001044 <Ex_prst_s2+0xd0>)
 8000fbe:	f001 ffb8 	bl	8002f32 <u8g2_SendBuffer>

  toWrite2[0] = (uint8_t)(encoder_position1 >> 8);
 8000fc2:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <Ex_prst_s2+0xdc>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	121b      	asrs	r3, r3, #8
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <Ex_prst_s2+0xe0>)
 8000fd0:	701a      	strb	r2, [r3, #0]
  toWrite2[1] = (uint8_t)(encoder_position1 & 0xFF);
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <Ex_prst_s2+0xdc>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <Ex_prst_s2+0xe0>)
 8000fdc:	705a      	strb	r2, [r3, #1]
  toWrite2[2] = (uint8_t)(encoder_position2 >> 8);
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <Ex_prst_s2+0xe4>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	121b      	asrs	r3, r3, #8
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <Ex_prst_s2+0xe0>)
 8000fec:	709a      	strb	r2, [r3, #2]
  toWrite2[3] = (uint8_t)(encoder_position2 & 0xFF);
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <Ex_prst_s2+0xe4>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <Ex_prst_s2+0xe0>)
 8000ff8:	70da      	strb	r2, [r3, #3]
  toWrite2[4] = (uint8_t)(encoder_position3 >> 8);
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <Ex_prst_s2+0xe8>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	121b      	asrs	r3, r3, #8
 8001002:	b21b      	sxth	r3, r3
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <Ex_prst_s2+0xe0>)
 8001008:	711a      	strb	r2, [r3, #4]
  toWrite2[5] = (uint8_t)(encoder_position3 & 0xFF);
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <Ex_prst_s2+0xe8>)
 800100c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <Ex_prst_s2+0xe0>)
 8001014:	715a      	strb	r2, [r3, #5]

  HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 64, 2, toWrite2, sizeof(toWrite2), 1000);
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2306      	movs	r3, #6
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <Ex_prst_s2+0xe0>)
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2302      	movs	r3, #2
 8001026:	2240      	movs	r2, #64	@ 0x40
 8001028:	21a0      	movs	r1, #160	@ 0xa0
 800102a:	480d      	ldr	r0, [pc, #52]	@ (8001060 <Ex_prst_s2+0xec>)
 800102c:	f004 fb22 	bl	8005674 <HAL_I2C_Mem_Write>
  DWT_Delay_ms(1500);
 8001030:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001034:	f7ff fb60 	bl	80006f8 <DWT_Delay_ms>
  currentState = MAIN;
 8001038:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <Ex_prst_s2+0xf0>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000188 	.word	0x20000188
 8001048:	080098bc 	.word	0x080098bc
 800104c:	08007284 	.word	0x08007284
 8001050:	20000256 	.word	0x20000256
 8001054:	20000228 	.word	0x20000228
 8001058:	20000258 	.word	0x20000258
 800105c:	2000025a 	.word	0x2000025a
 8001060:	2000002c 	.word	0x2000002c
 8001064:	2000024e 	.word	0x2000024e

08001068 <Ex_prst_s3>:
void Ex_prst_s3()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af04      	add	r7, sp, #16
  // Logic for prst_s3
  u8g2_ClearBuffer(&u8g2);
 800106e:	4832      	ldr	r0, [pc, #200]	@ (8001138 <Ex_prst_s3+0xd0>)
 8001070:	f001 feec 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8001074:	2101      	movs	r1, #1
 8001076:	4830      	ldr	r0, [pc, #192]	@ (8001138 <Ex_prst_s3+0xd0>)
 8001078:	f001 fdd0 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 800107c:	2101      	movs	r1, #1
 800107e:	482e      	ldr	r0, [pc, #184]	@ (8001138 <Ex_prst_s3+0xd0>)
 8001080:	f002 fbd3 	bl	800382a <u8g2_SetFontMode>
  u8g2_SetDrawColor(&u8g2, 2);
 8001084:	2102      	movs	r1, #2
 8001086:	482c      	ldr	r0, [pc, #176]	@ (8001138 <Ex_prst_s3+0xd0>)
 8001088:	f002 fe70 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 800108c:	492b      	ldr	r1, [pc, #172]	@ (800113c <Ex_prst_s3+0xd4>)
 800108e:	482a      	ldr	r0, [pc, #168]	@ (8001138 <Ex_prst_s3+0xd0>)
 8001090:	f002 fd26 	bl	8003ae0 <u8g2_SetFont>
  u8g2_DrawStr(&u8g2, 24, 42, "SAVED");
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <Ex_prst_s3+0xd8>)
 8001096:	222a      	movs	r2, #42	@ 0x2a
 8001098:	2118      	movs	r1, #24
 800109a:	4827      	ldr	r0, [pc, #156]	@ (8001138 <Ex_prst_s3+0xd0>)
 800109c:	f002 fc82 	bl	80039a4 <u8g2_DrawStr>
  u8g2_DrawBox(&u8g2, 17, 16, 94, 32);
 80010a0:	2320      	movs	r3, #32
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	235e      	movs	r3, #94	@ 0x5e
 80010a6:	2210      	movs	r2, #16
 80010a8:	2111      	movs	r1, #17
 80010aa:	4823      	ldr	r0, [pc, #140]	@ (8001138 <Ex_prst_s3+0xd0>)
 80010ac:	f001 fe98 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SendBuffer(&u8g2);
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <Ex_prst_s3+0xd0>)
 80010b2:	f001 ff3e 	bl	8002f32 <u8g2_SendBuffer>

  toWrite3[0] = (uint8_t)(encoder_position1 >> 8);
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <Ex_prst_s3+0xdc>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	121b      	asrs	r3, r3, #8
 80010be:	b21b      	sxth	r3, r3
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <Ex_prst_s3+0xe0>)
 80010c4:	701a      	strb	r2, [r3, #0]
  toWrite3[1] = (uint8_t)(encoder_position1 & 0xFF);
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <Ex_prst_s3+0xdc>)
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <Ex_prst_s3+0xe0>)
 80010d0:	705a      	strb	r2, [r3, #1]
  toWrite3[2] = (uint8_t)(encoder_position2 >> 8);
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <Ex_prst_s3+0xe4>)
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	121b      	asrs	r3, r3, #8
 80010da:	b21b      	sxth	r3, r3
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <Ex_prst_s3+0xe0>)
 80010e0:	709a      	strb	r2, [r3, #2]
  toWrite3[3] = (uint8_t)(encoder_position2 & 0xFF);
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <Ex_prst_s3+0xe4>)
 80010e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <Ex_prst_s3+0xe0>)
 80010ec:	70da      	strb	r2, [r3, #3]
  toWrite3[4] = (uint8_t)(encoder_position3 >> 8);
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <Ex_prst_s3+0xe8>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	121b      	asrs	r3, r3, #8
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <Ex_prst_s3+0xe0>)
 80010fc:	711a      	strb	r2, [r3, #4]
  toWrite3[5] = (uint8_t)(encoder_position3 & 0xFF);
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <Ex_prst_s3+0xe8>)
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <Ex_prst_s3+0xe0>)
 8001108:	715a      	strb	r2, [r3, #5]

  HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 128, 2, toWrite3, sizeof(toWrite3), 1000);
 800110a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2306      	movs	r3, #6
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <Ex_prst_s3+0xe0>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2302      	movs	r3, #2
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	21a0      	movs	r1, #160	@ 0xa0
 800111e:	480d      	ldr	r0, [pc, #52]	@ (8001154 <Ex_prst_s3+0xec>)
 8001120:	f004 faa8 	bl	8005674 <HAL_I2C_Mem_Write>
  DWT_Delay_ms(1500);
 8001124:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001128:	f7ff fae6 	bl	80006f8 <DWT_Delay_ms>
  currentState = MAIN;
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <Ex_prst_s3+0xf0>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000188 	.word	0x20000188
 800113c:	080098bc 	.word	0x080098bc
 8001140:	08007284 	.word	0x08007284
 8001144:	20000256 	.word	0x20000256
 8001148:	20000230 	.word	0x20000230
 800114c:	20000258 	.word	0x20000258
 8001150:	2000025a 	.word	0x2000025a
 8001154:	2000002c 	.word	0x2000002c
 8001158:	2000024e 	.word	0x2000024e

0800115c <GP_X9C104_UP>:
  u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
  u8g2_DrawStr(&u8g2, 27, 25, "LEVEL");
  u8g2_SendBuffer(&u8g2);
}
void GP_X9C104_UP()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, CS_ALL_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <GP_X9C104_UP+0x20>)
 8001168:	f004 f811 	bl	800518e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GP_UD_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2102      	movs	r1, #2
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <GP_X9C104_UP+0x20>)
 8001172:	f004 f80c 	bl	800518e <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40010c00 	.word	0x40010c00

08001180 <GP_X9C104_DOWN>:
void GP_X9C104_DOWN()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, CS_ALL_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118a:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <GP_X9C104_DOWN+0x20>)
 800118c:	f003 ffff 	bl	800518e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GP_UD_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2102      	movs	r1, #2
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <GP_X9C104_DOWN+0x20>)
 8001196:	f003 fffa 	bl	800518e <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <TP_X9C104_UP>:
void TP_X9C104_UP()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, CS_ALL_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <TP_X9C104_UP+0x20>)
 80011b0:	f003 ffed 	bl	800518e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TP_UD_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ba:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <TP_X9C104_UP+0x20>)
 80011bc:	f003 ffe7 	bl	800518e <HAL_GPIO_WritePin>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <TP_X9C104_DOWN>:
void TP_X9C104_DOWN()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, CS_ALL_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <TP_X9C104_DOWN+0x20>)
 80011d4:	f003 ffdb 	bl	800518e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TP_UD_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011de:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <TP_X9C104_DOWN+0x20>)
 80011e0:	f003 ffd5 	bl	800518e <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010c00 	.word	0x40010c00

080011ec <LP_X9C104_UP>:
void LP_X9C104_UP()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, CS_ALL_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <LP_X9C104_UP+0x20>)
 80011f8:	f003 ffc9 	bl	800518e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LP_UD_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001202:	4802      	ldr	r0, [pc, #8]	@ (800120c <LP_X9C104_UP+0x20>)
 8001204:	f003 ffc3 	bl	800518e <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010c00 	.word	0x40010c00

08001210 <LP_X9C104_DOWN>:
void LP_X9C104_DOWN()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, CS_ALL_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <LP_X9C104_DOWN+0x20>)
 800121c:	f003 ffb7 	bl	800518e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LP_UD_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001226:	4802      	ldr	r0, [pc, #8]	@ (8001230 <LP_X9C104_DOWN+0x20>)
 8001228:	f003 ffb1 	bl	800518e <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010c00 	.word	0x40010c00

08001234 <GP_step>:
void GP_step(int16_t GP_steps)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  // Move the wiper by toggling INC
  for (uint8_t i = 0; i < GP_steps; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
 8001242:	e014      	b.n	800126e <GP_step+0x3a>
  {
    HAL_GPIO_WritePin(GPIOB, GP_INC_Pin, GPIO_PIN_RESET); // INC LOW
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <GP_step+0x50>)
 800124c:	f003 ff9f 	bl	800518e <HAL_GPIO_WritePin>
    DWT_Delay_us(4);                                      // Small delay
 8001250:	2004      	movs	r0, #4
 8001252:	f7ff fa29 	bl	80006a8 <DWT_Delay_us>
    HAL_GPIO_WritePin(GPIOB, GP_INC_Pin, GPIO_PIN_SET);   // INC HIGH
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <GP_step+0x50>)
 800125e:	f003 ff96 	bl	800518e <HAL_GPIO_WritePin>
    DWT_Delay_us(10);                                     // Small delay
 8001262:	200a      	movs	r0, #10
 8001264:	f7ff fa20 	bl	80006a8 <DWT_Delay_us>
  for (uint8_t i = 0; i < GP_steps; i++)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	3301      	adds	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbe5      	blt.n	8001244 <GP_step+0x10>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40010c00 	.word	0x40010c00

08001288 <TP_step>:
void TP_step(int16_t TP_steps)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	80fb      	strh	r3, [r7, #6]
  // Move the wiper by toggling INC
  for (uint8_t i = 0; i < TP_steps; i++)
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e014      	b.n	80012c2 <TP_step+0x3a>
  {
    HAL_GPIO_WritePin(GPIOB, TP_INC_Pin, GPIO_PIN_RESET); // INC LOW
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129e:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <TP_step+0x50>)
 80012a0:	f003 ff75 	bl	800518e <HAL_GPIO_WritePin>
    DWT_Delay_us(4);                                      // Small delay
 80012a4:	2004      	movs	r0, #4
 80012a6:	f7ff f9ff 	bl	80006a8 <DWT_Delay_us>
    HAL_GPIO_WritePin(GPIOB, TP_INC_Pin, GPIO_PIN_SET);   // INC HIGH
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012b0:	4809      	ldr	r0, [pc, #36]	@ (80012d8 <TP_step+0x50>)
 80012b2:	f003 ff6c 	bl	800518e <HAL_GPIO_WritePin>
    DWT_Delay_us(10);                                     // Small delay
 80012b6:	200a      	movs	r0, #10
 80012b8:	f7ff f9f6 	bl	80006a8 <DWT_Delay_us>
  for (uint8_t i = 0; i < TP_steps; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbe5      	blt.n	8001298 <TP_step+0x10>
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40010c00 	.word	0x40010c00

080012dc <LP_step>:
void LP_step(int16_t LP_steps)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  // Move the wiper by toggling INC
  for (uint8_t i = 0; i < LP_steps; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	e014      	b.n	8001316 <LP_step+0x3a>
  {
    HAL_GPIO_WritePin(GPIOB, LP_INC_Pin, GPIO_PIN_RESET); // INC LOW
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012f2:	480e      	ldr	r0, [pc, #56]	@ (800132c <LP_step+0x50>)
 80012f4:	f003 ff4b 	bl	800518e <HAL_GPIO_WritePin>
    DWT_Delay_us(4);                                      // Small delay
 80012f8:	2004      	movs	r0, #4
 80012fa:	f7ff f9d5 	bl	80006a8 <DWT_Delay_us>
    HAL_GPIO_WritePin(GPIOB, LP_INC_Pin, GPIO_PIN_SET);   // INC HIGH
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <LP_step+0x50>)
 8001306:	f003 ff42 	bl	800518e <HAL_GPIO_WritePin>
    DWT_Delay_us(10);                                     // Small delay
 800130a:	200a      	movs	r0, #10
 800130c:	f7ff f9cc 	bl	80006a8 <DWT_Delay_us>
  for (uint8_t i = 0; i < LP_steps; i++)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	3301      	adds	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbe5      	blt.n	80012ec <LP_step+0x10>
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40010c00 	.word	0x40010c00

08001330 <updateWiperPosition>:
void updateWiperPosition(int16_t GP_map_v, int16_t TP_map_v, int16_t LP_map_v)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
 800133a:	460b      	mov	r3, r1
 800133c:	80bb      	strh	r3, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	807b      	strh	r3, [r7, #2]
  GP_steps = GP_map_v - prev_enc_pos1;
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <updateWiperPosition+0x124>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	b29b      	uxth	r3, r3
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b41      	ldr	r3, [pc, #260]	@ (8001458 <updateWiperPosition+0x128>)
 8001354:	801a      	strh	r2, [r3, #0]
  TP_steps = TP_map_v - prev_enc_pos2;
 8001356:	88ba      	ldrh	r2, [r7, #4]
 8001358:	4b40      	ldr	r3, [pc, #256]	@ (800145c <updateWiperPosition+0x12c>)
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	b29b      	uxth	r3, r3
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b3e      	ldr	r3, [pc, #248]	@ (8001460 <updateWiperPosition+0x130>)
 8001368:	801a      	strh	r2, [r3, #0]
  LP_steps = LP_map_v - prev_enc_pos3;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	4b3d      	ldr	r3, [pc, #244]	@ (8001464 <updateWiperPosition+0x134>)
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	b29b      	uxth	r3, r3
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	b21a      	sxth	r2, r3
 800137a:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <updateWiperPosition+0x138>)
 800137c:	801a      	strh	r2, [r3, #0]

  if (GP_steps > 0)
 800137e:	4b36      	ldr	r3, [pc, #216]	@ (8001458 <updateWiperPosition+0x128>)
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd08      	ble.n	800139a <updateWiperPosition+0x6a>
  {
    GP_X9C104_UP();
 8001388:	f7ff fee8 	bl	800115c <GP_X9C104_UP>
    GP_step(GP_steps); // Increment wiper position
 800138c:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <updateWiperPosition+0x128>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff4e 	bl	8001234 <GP_step>
 8001398:	e010      	b.n	80013bc <updateWiperPosition+0x8c>
  }
  else if (GP_steps < 0)
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <updateWiperPosition+0x128>)
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da0b      	bge.n	80013bc <updateWiperPosition+0x8c>
  {
    GP_X9C104_DOWN();
 80013a4:	f7ff feec 	bl	8001180 <GP_X9C104_DOWN>
    GP_step(-GP_steps); // Decrement wiper position
 80013a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001458 <updateWiperPosition+0x128>)
 80013aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	425b      	negs	r3, r3
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff3c 	bl	8001234 <GP_step>
  }

  if (TP_steps > 0)
 80013bc:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <updateWiperPosition+0x130>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	dd08      	ble.n	80013d8 <updateWiperPosition+0xa8>
  {
    TP_X9C104_UP();
 80013c6:	f7ff feed 	bl	80011a4 <TP_X9C104_UP>
    TP_step(TP_steps); // Increment wiper position
 80013ca:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <updateWiperPosition+0x130>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff59 	bl	8001288 <TP_step>
 80013d6:	e010      	b.n	80013fa <updateWiperPosition+0xca>
  }
  else if (TP_steps < 0)
 80013d8:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <updateWiperPosition+0x130>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da0b      	bge.n	80013fa <updateWiperPosition+0xca>
  {
    TP_X9C104_DOWN();
 80013e2:	f7ff fef1 	bl	80011c8 <TP_X9C104_DOWN>
    TP_step(-TP_steps); // Decrement wiper position
 80013e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <updateWiperPosition+0x130>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	425b      	negs	r3, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff47 	bl	8001288 <TP_step>
  }

  if (LP_steps > 0)
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <updateWiperPosition+0x138>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd08      	ble.n	8001416 <updateWiperPosition+0xe6>
  {
    LP_X9C104_UP();
 8001404:	f7ff fef2 	bl	80011ec <LP_X9C104_UP>
    LP_step(LP_steps); // Increment wiper position
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <updateWiperPosition+0x138>)
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff64 	bl	80012dc <LP_step>
 8001414:	e010      	b.n	8001438 <updateWiperPosition+0x108>
  }
  else if (LP_steps < 0)
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <updateWiperPosition+0x138>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	da0b      	bge.n	8001438 <updateWiperPosition+0x108>
  {
    LP_X9C104_DOWN();
 8001420:	f7ff fef6 	bl	8001210 <LP_X9C104_DOWN>
    LP_step(-LP_steps); // Decrement wiper position
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <updateWiperPosition+0x138>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	b29b      	uxth	r3, r3
 800142c:	425b      	negs	r3, r3
 800142e:	b29b      	uxth	r3, r3
 8001430:	b21b      	sxth	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff52 	bl	80012dc <LP_step>
  }

  prev_enc_pos1 = GP_map_v; // Update the previous encoder position
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <updateWiperPosition+0x124>)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	8013      	strh	r3, [r2, #0]
  prev_enc_pos2 = TP_map_v; // Update the previous encoder position
 800143e:	4a07      	ldr	r2, [pc, #28]	@ (800145c <updateWiperPosition+0x12c>)
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	8013      	strh	r3, [r2, #0]
  prev_enc_pos3 = LP_map_v;
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <updateWiperPosition+0x134>)
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	8013      	strh	r3, [r2, #0]
  // Update the previous encoder position
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000025c 	.word	0x2000025c
 8001458:	20000262 	.word	0x20000262
 800145c:	2000025e 	.word	0x2000025e
 8001460:	20000264 	.word	0x20000264
 8001464:	20000260 	.word	0x20000260
 8001468:	20000266 	.word	0x20000266

0800146c <X9C104_ZERO>:
void X9C104_ZERO()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  GP_X9C104_DOWN();
 8001470:	f7ff fe86 	bl	8001180 <GP_X9C104_DOWN>
  GP_step(100);
 8001474:	2064      	movs	r0, #100	@ 0x64
 8001476:	f7ff fedd 	bl	8001234 <GP_step>
  TP_X9C104_DOWN();
 800147a:	f7ff fea5 	bl	80011c8 <TP_X9C104_DOWN>
  TP_step(100);
 800147e:	2064      	movs	r0, #100	@ 0x64
 8001480:	f7ff ff02 	bl	8001288 <TP_step>
  LP_X9C104_DOWN();
 8001484:	f7ff fec4 	bl	8001210 <LP_X9C104_DOWN>
  LP_step(100);
 8001488:	2064      	movs	r0, #100	@ 0x64
 800148a:	f7ff ff27 	bl	80012dc <LP_step>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <handle_RD_PRST_1>:
void handle_RD_PRST_1()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af04      	add	r7, sp, #16
  // HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
  //   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
  HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, 2, toRead1, sizeof(toRead1), 1000);
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2306      	movs	r3, #6
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <handle_RD_PRST_1+0x8c>)
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2302      	movs	r3, #2
 80014aa:	2200      	movs	r2, #0
 80014ac:	21a0      	movs	r1, #160	@ 0xa0
 80014ae:	481d      	ldr	r0, [pc, #116]	@ (8001524 <handle_RD_PRST_1+0x90>)
 80014b0:	f004 f9da 	bl	8005868 <HAL_I2C_Mem_Read>

  encoder1_binary = (uint16_t)(toRead1[0] << 8) | toRead1[1];
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <handle_RD_PRST_1+0x8c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <handle_RD_PRST_1+0x8c>)
 80014be:	7852      	ldrb	r2, [r2, #1]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <handle_RD_PRST_1+0x94>)
 80014c6:	801a      	strh	r2, [r3, #0]
  encoder2_binary = (uint16_t)(toRead1[2] << 8) | toRead1[3];
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <handle_RD_PRST_1+0x8c>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <handle_RD_PRST_1+0x8c>)
 80014d2:	78d2      	ldrb	r2, [r2, #3]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <handle_RD_PRST_1+0x98>)
 80014da:	801a      	strh	r2, [r3, #0]
  encoder3_binary = (uint16_t)(toRead1[4] << 8) | toRead1[5];
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <handle_RD_PRST_1+0x8c>)
 80014de:	791b      	ldrb	r3, [r3, #4]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001520 <handle_RD_PRST_1+0x8c>)
 80014e6:	7952      	ldrb	r2, [r2, #5]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <handle_RD_PRST_1+0x9c>)
 80014ee:	801a      	strh	r2, [r3, #0]

  __HAL_TIM_SET_COUNTER(&htim1, encoder1_binary);
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <handle_RD_PRST_1+0x94>)
 80014f2:	881a      	ldrh	r2, [r3, #0]
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <handle_RD_PRST_1+0xa0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim2, encoder2_binary);
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <handle_RD_PRST_1+0x98>)
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <handle_RD_PRST_1+0xa4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim3, encoder3_binary);
 8001504:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <handle_RD_PRST_1+0x9c>)
 8001506:	881a      	ldrh	r2, [r3, #0]
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <handle_RD_PRST_1+0xa8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24

  RD_PRST_state = true;
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <handle_RD_PRST_1+0xac>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
  currentState = MAIN;
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <handle_RD_PRST_1+0xb0>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000238 	.word	0x20000238
 8001524:	2000002c 	.word	0x2000002c
 8001528:	20000268 	.word	0x20000268
 800152c:	2000026a 	.word	0x2000026a
 8001530:	2000026c 	.word	0x2000026c
 8001534:	20000080 	.word	0x20000080
 8001538:	200000c8 	.word	0x200000c8
 800153c:	20000110 	.word	0x20000110
 8001540:	2000016a 	.word	0x2000016a
 8001544:	2000024e 	.word	0x2000024e

08001548 <handle_RD_PRST_2>:
void handle_RD_PRST_2()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af04      	add	r7, sp, #16
  HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 64, 2, toRead2, sizeof(toRead2), 1000);
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2306      	movs	r3, #6
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <handle_RD_PRST_2+0x8c>)
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2302      	movs	r3, #2
 800155e:	2240      	movs	r2, #64	@ 0x40
 8001560:	21a0      	movs	r1, #160	@ 0xa0
 8001562:	481d      	ldr	r0, [pc, #116]	@ (80015d8 <handle_RD_PRST_2+0x90>)
 8001564:	f004 f980 	bl	8005868 <HAL_I2C_Mem_Read>

  encoder1_binary = (uint16_t)(toRead2[0] << 8) | toRead2[1];
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <handle_RD_PRST_2+0x8c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b29b      	uxth	r3, r3
 8001570:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <handle_RD_PRST_2+0x8c>)
 8001572:	7852      	ldrb	r2, [r2, #1]
 8001574:	4313      	orrs	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <handle_RD_PRST_2+0x94>)
 800157a:	801a      	strh	r2, [r3, #0]
  encoder2_binary = (uint16_t)(toRead2[2] << 8) | toRead2[3];
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <handle_RD_PRST_2+0x8c>)
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <handle_RD_PRST_2+0x8c>)
 8001586:	78d2      	ldrb	r2, [r2, #3]
 8001588:	4313      	orrs	r3, r2
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <handle_RD_PRST_2+0x98>)
 800158e:	801a      	strh	r2, [r3, #0]
  encoder3_binary = (uint16_t)(toRead2[4] << 8) | toRead2[5];
 8001590:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <handle_RD_PRST_2+0x8c>)
 8001592:	791b      	ldrb	r3, [r3, #4]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <handle_RD_PRST_2+0x8c>)
 800159a:	7952      	ldrb	r2, [r2, #5]
 800159c:	4313      	orrs	r3, r2
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <handle_RD_PRST_2+0x9c>)
 80015a2:	801a      	strh	r2, [r3, #0]

  __HAL_TIM_SET_COUNTER(&htim1, encoder1_binary);
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <handle_RD_PRST_2+0x94>)
 80015a6:	881a      	ldrh	r2, [r3, #0]
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <handle_RD_PRST_2+0xa0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim2, encoder2_binary);
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <handle_RD_PRST_2+0x98>)
 80015b0:	881a      	ldrh	r2, [r3, #0]
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <handle_RD_PRST_2+0xa4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim3, encoder3_binary);
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <handle_RD_PRST_2+0x9c>)
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <handle_RD_PRST_2+0xa8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  RD_PRST_state = true;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <handle_RD_PRST_2+0xac>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
  currentState = MAIN;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <handle_RD_PRST_2+0xb0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000240 	.word	0x20000240
 80015d8:	2000002c 	.word	0x2000002c
 80015dc:	20000268 	.word	0x20000268
 80015e0:	2000026a 	.word	0x2000026a
 80015e4:	2000026c 	.word	0x2000026c
 80015e8:	20000080 	.word	0x20000080
 80015ec:	200000c8 	.word	0x200000c8
 80015f0:	20000110 	.word	0x20000110
 80015f4:	2000016a 	.word	0x2000016a
 80015f8:	2000024e 	.word	0x2000024e

080015fc <handle_RD_PRST_3>:
void handle_RD_PRST_3()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af04      	add	r7, sp, #16
  HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 128, 2, toRead3, sizeof(toRead3), 1000);
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2306      	movs	r3, #6
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <handle_RD_PRST_3+0x8c>)
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2302      	movs	r3, #2
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	21a0      	movs	r1, #160	@ 0xa0
 8001616:	481d      	ldr	r0, [pc, #116]	@ (800168c <handle_RD_PRST_3+0x90>)
 8001618:	f004 f926 	bl	8005868 <HAL_I2C_Mem_Read>

  encoder1_binary = (uint16_t)(toRead3[0] << 8) | toRead3[1];
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <handle_RD_PRST_3+0x8c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b29b      	uxth	r3, r3
 8001624:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <handle_RD_PRST_3+0x8c>)
 8001626:	7852      	ldrb	r2, [r2, #1]
 8001628:	4313      	orrs	r3, r2
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <handle_RD_PRST_3+0x94>)
 800162e:	801a      	strh	r2, [r3, #0]
  encoder2_binary = (uint16_t)(toRead3[2] << 8) | toRead3[3];
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <handle_RD_PRST_3+0x8c>)
 8001632:	789b      	ldrb	r3, [r3, #2]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b29b      	uxth	r3, r3
 8001638:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <handle_RD_PRST_3+0x8c>)
 800163a:	78d2      	ldrb	r2, [r2, #3]
 800163c:	4313      	orrs	r3, r2
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <handle_RD_PRST_3+0x98>)
 8001642:	801a      	strh	r2, [r3, #0]
  encoder3_binary = (uint16_t)(toRead3[4] << 8) | toRead3[5];
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <handle_RD_PRST_3+0x8c>)
 8001646:	791b      	ldrb	r3, [r3, #4]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b29b      	uxth	r3, r3
 800164c:	4a0e      	ldr	r2, [pc, #56]	@ (8001688 <handle_RD_PRST_3+0x8c>)
 800164e:	7952      	ldrb	r2, [r2, #5]
 8001650:	4313      	orrs	r3, r2
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <handle_RD_PRST_3+0x9c>)
 8001656:	801a      	strh	r2, [r3, #0]

  __HAL_TIM_SET_COUNTER(&htim1, encoder1_binary);
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <handle_RD_PRST_3+0x94>)
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <handle_RD_PRST_3+0xa0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim2, encoder2_binary);
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <handle_RD_PRST_3+0x98>)
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <handle_RD_PRST_3+0xa4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim3, encoder3_binary);
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <handle_RD_PRST_3+0x9c>)
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <handle_RD_PRST_3+0xa8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
  RD_PRST_state = true;
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <handle_RD_PRST_3+0xac>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
  currentState = MAIN;
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <handle_RD_PRST_3+0xb0>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000248 	.word	0x20000248
 800168c:	2000002c 	.word	0x2000002c
 8001690:	20000268 	.word	0x20000268
 8001694:	2000026a 	.word	0x2000026a
 8001698:	2000026c 	.word	0x2000026c
 800169c:	20000080 	.word	0x20000080
 80016a0:	200000c8 	.word	0x200000c8
 80016a4:	20000110 	.word	0x20000110
 80016a8:	2000016a 	.word	0x2000016a
 80016ac:	2000024e 	.word	0x2000024e

080016b0 <Preset_Bank_select>:
void Preset_Bank_select()
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  if (preset_bank == 1)
 80016b4:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <Preset_Bank_select+0x94>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <Preset_Bank_select+0x1c>
  {
    previesly_pressed = 2222;
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <Preset_Bank_select+0x98>)
 80016be:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 80016c2:	601a      	str	r2, [r3, #0]
    currentState = BANK_1;
 80016c4:	4b21      	ldr	r3, [pc, #132]	@ (800174c <Preset_Bank_select+0x9c>)
 80016c6:	220d      	movs	r2, #13
 80016c8:	701a      	strb	r2, [r3, #0]
  }
  else if (preset_bank == 8)
  {
    currentState = BANK_8;
  }
}
 80016ca:	e036      	b.n	800173a <Preset_Bank_select+0x8a>
  else if (preset_bank == 2)
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <Preset_Bank_select+0x94>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d103      	bne.n	80016dc <Preset_Bank_select+0x2c>
    currentState = BANK_2;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <Preset_Bank_select+0x9c>)
 80016d6:	220e      	movs	r2, #14
 80016d8:	701a      	strb	r2, [r3, #0]
}
 80016da:	e02e      	b.n	800173a <Preset_Bank_select+0x8a>
  else if (preset_bank == 3)
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <Preset_Bank_select+0x94>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d103      	bne.n	80016ec <Preset_Bank_select+0x3c>
    currentState = BANK_3;
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <Preset_Bank_select+0x9c>)
 80016e6:	220f      	movs	r2, #15
 80016e8:	701a      	strb	r2, [r3, #0]
}
 80016ea:	e026      	b.n	800173a <Preset_Bank_select+0x8a>
  else if (preset_bank == 4)
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <Preset_Bank_select+0x94>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d103      	bne.n	80016fc <Preset_Bank_select+0x4c>
    currentState = BANK_4;
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <Preset_Bank_select+0x9c>)
 80016f6:	2210      	movs	r2, #16
 80016f8:	701a      	strb	r2, [r3, #0]
}
 80016fa:	e01e      	b.n	800173a <Preset_Bank_select+0x8a>
  else if (preset_bank == 5)
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <Preset_Bank_select+0x94>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d103      	bne.n	800170c <Preset_Bank_select+0x5c>
    currentState = BANK_5;
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <Preset_Bank_select+0x9c>)
 8001706:	2211      	movs	r2, #17
 8001708:	701a      	strb	r2, [r3, #0]
}
 800170a:	e016      	b.n	800173a <Preset_Bank_select+0x8a>
  else if (preset_bank == 6)
 800170c:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <Preset_Bank_select+0x94>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b06      	cmp	r3, #6
 8001712:	d103      	bne.n	800171c <Preset_Bank_select+0x6c>
    currentState = BANK_6;
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <Preset_Bank_select+0x9c>)
 8001716:	2212      	movs	r2, #18
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	e00e      	b.n	800173a <Preset_Bank_select+0x8a>
  else if (preset_bank == 7)
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <Preset_Bank_select+0x94>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b07      	cmp	r3, #7
 8001722:	d103      	bne.n	800172c <Preset_Bank_select+0x7c>
    currentState = BANK_7;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <Preset_Bank_select+0x9c>)
 8001726:	2213      	movs	r2, #19
 8001728:	701a      	strb	r2, [r3, #0]
}
 800172a:	e006      	b.n	800173a <Preset_Bank_select+0x8a>
  else if (preset_bank == 8)
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <Preset_Bank_select+0x94>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d102      	bne.n	800173a <Preset_Bank_select+0x8a>
    currentState = BANK_8;
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <Preset_Bank_select+0x9c>)
 8001736:	2214      	movs	r2, #20
 8001738:	701a      	strb	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000170 	.word	0x20000170
 8001748:	2000016c 	.word	0x2000016c
 800174c:	2000024e 	.word	0x2000024e

08001750 <handle_BANK_1>:

void handle_BANK_1()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 8001756:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <handle_BANK_1+0x54>)
 8001758:	f001 fb78 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 800175c:	2101      	movs	r1, #1
 800175e:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <handle_BANK_1+0x54>)
 8001760:	f001 fa5c 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 8001764:	2101      	movs	r1, #1
 8001766:	480f      	ldr	r0, [pc, #60]	@ (80017a4 <handle_BANK_1+0x54>)
 8001768:	f002 f85f 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 0, 0, 32, 32);
 800176c:	2320      	movs	r3, #32
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2320      	movs	r3, #32
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	480b      	ldr	r0, [pc, #44]	@ (80017a4 <handle_BANK_1+0x54>)
 8001778:	f001 fb32 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 800177c:	2102      	movs	r1, #2
 800177e:	4809      	ldr	r0, [pc, #36]	@ (80017a4 <handle_BANK_1+0x54>)
 8001780:	f002 faf4 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <handle_BANK_1+0x58>)
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2332      	movs	r3, #50	@ 0x32
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	236e      	movs	r3, #110	@ 0x6e
 800178e:	2207      	movs	r2, #7
 8001790:	2109      	movs	r1, #9
 8001792:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <handle_BANK_1+0x54>)
 8001794:	f001 fae1 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <handle_BANK_1+0x54>)
 800179a:	f001 fbca 	bl	8002f32 <u8g2_SendBuffer>
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000188 	.word	0x20000188
 80017a8:	080072b8 	.word	0x080072b8

080017ac <handle_BANK_2>:
void handle_BANK_2()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 80017b2:	4813      	ldr	r0, [pc, #76]	@ (8001800 <handle_BANK_2+0x54>)
 80017b4:	f001 fb4a 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 80017b8:	2101      	movs	r1, #1
 80017ba:	4811      	ldr	r0, [pc, #68]	@ (8001800 <handle_BANK_2+0x54>)
 80017bc:	f001 fa2e 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 80017c0:	2101      	movs	r1, #1
 80017c2:	480f      	ldr	r0, [pc, #60]	@ (8001800 <handle_BANK_2+0x54>)
 80017c4:	f002 f831 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 32, 0, 32, 32);
 80017c8:	2320      	movs	r3, #32
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2320      	movs	r3, #32
 80017ce:	2200      	movs	r2, #0
 80017d0:	2120      	movs	r1, #32
 80017d2:	480b      	ldr	r0, [pc, #44]	@ (8001800 <handle_BANK_2+0x54>)
 80017d4:	f001 fb04 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 80017d8:	2102      	movs	r1, #2
 80017da:	4809      	ldr	r0, [pc, #36]	@ (8001800 <handle_BANK_2+0x54>)
 80017dc:	f002 fac6 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <handle_BANK_2+0x58>)
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2332      	movs	r3, #50	@ 0x32
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	236e      	movs	r3, #110	@ 0x6e
 80017ea:	2207      	movs	r2, #7
 80017ec:	2109      	movs	r1, #9
 80017ee:	4804      	ldr	r0, [pc, #16]	@ (8001800 <handle_BANK_2+0x54>)
 80017f0:	f001 fab3 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <handle_BANK_2+0x54>)
 80017f6:	f001 fb9c 	bl	8002f32 <u8g2_SendBuffer>
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000188 	.word	0x20000188
 8001804:	08007574 	.word	0x08007574

08001808 <handle_BANK_3>:
void handle_BANK_3()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 800180e:	4813      	ldr	r0, [pc, #76]	@ (800185c <handle_BANK_3+0x54>)
 8001810:	f001 fb1c 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8001814:	2101      	movs	r1, #1
 8001816:	4811      	ldr	r0, [pc, #68]	@ (800185c <handle_BANK_3+0x54>)
 8001818:	f001 fa00 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 800181c:	2101      	movs	r1, #1
 800181e:	480f      	ldr	r0, [pc, #60]	@ (800185c <handle_BANK_3+0x54>)
 8001820:	f002 f803 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 64, 0, 32, 32);
 8001824:	2320      	movs	r3, #32
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2320      	movs	r3, #32
 800182a:	2200      	movs	r2, #0
 800182c:	2140      	movs	r1, #64	@ 0x40
 800182e:	480b      	ldr	r0, [pc, #44]	@ (800185c <handle_BANK_3+0x54>)
 8001830:	f001 fad6 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 8001834:	2102      	movs	r1, #2
 8001836:	4809      	ldr	r0, [pc, #36]	@ (800185c <handle_BANK_3+0x54>)
 8001838:	f002 fa98 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <handle_BANK_3+0x58>)
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2332      	movs	r3, #50	@ 0x32
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	236e      	movs	r3, #110	@ 0x6e
 8001846:	2207      	movs	r2, #7
 8001848:	2109      	movs	r1, #9
 800184a:	4804      	ldr	r0, [pc, #16]	@ (800185c <handle_BANK_3+0x54>)
 800184c:	f001 fa85 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <handle_BANK_3+0x54>)
 8001852:	f001 fb6e 	bl	8002f32 <u8g2_SendBuffer>
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000188 	.word	0x20000188
 8001860:	08007830 	.word	0x08007830

08001864 <handle_BANK_4>:

void handle_BANK_4()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 800186a:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <handle_BANK_4+0x54>)
 800186c:	f001 faee 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8001870:	2101      	movs	r1, #1
 8001872:	4811      	ldr	r0, [pc, #68]	@ (80018b8 <handle_BANK_4+0x54>)
 8001874:	f001 f9d2 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 8001878:	2101      	movs	r1, #1
 800187a:	480f      	ldr	r0, [pc, #60]	@ (80018b8 <handle_BANK_4+0x54>)
 800187c:	f001 ffd5 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 96, 0, 32, 32);
 8001880:	2320      	movs	r3, #32
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2320      	movs	r3, #32
 8001886:	2200      	movs	r2, #0
 8001888:	2160      	movs	r1, #96	@ 0x60
 800188a:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <handle_BANK_4+0x54>)
 800188c:	f001 faa8 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 8001890:	2102      	movs	r1, #2
 8001892:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <handle_BANK_4+0x54>)
 8001894:	f002 fa6a 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <handle_BANK_4+0x58>)
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	2332      	movs	r3, #50	@ 0x32
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	236e      	movs	r3, #110	@ 0x6e
 80018a2:	2207      	movs	r2, #7
 80018a4:	2109      	movs	r1, #9
 80018a6:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <handle_BANK_4+0x54>)
 80018a8:	f001 fa57 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <handle_BANK_4+0x54>)
 80018ae:	f001 fb40 	bl	8002f32 <u8g2_SendBuffer>
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000188 	.word	0x20000188
 80018bc:	08007aec 	.word	0x08007aec

080018c0 <handle_BANK_5>:
void handle_BANK_5()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 80018c6:	4813      	ldr	r0, [pc, #76]	@ (8001914 <handle_BANK_5+0x54>)
 80018c8:	f001 fac0 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 80018cc:	2101      	movs	r1, #1
 80018ce:	4811      	ldr	r0, [pc, #68]	@ (8001914 <handle_BANK_5+0x54>)
 80018d0:	f001 f9a4 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 80018d4:	2101      	movs	r1, #1
 80018d6:	480f      	ldr	r0, [pc, #60]	@ (8001914 <handle_BANK_5+0x54>)
 80018d8:	f001 ffa7 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 0, 32, 32, 32);
 80018dc:	2320      	movs	r3, #32
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2320      	movs	r3, #32
 80018e2:	2220      	movs	r2, #32
 80018e4:	2100      	movs	r1, #0
 80018e6:	480b      	ldr	r0, [pc, #44]	@ (8001914 <handle_BANK_5+0x54>)
 80018e8:	f001 fa7a 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 80018ec:	2102      	movs	r1, #2
 80018ee:	4809      	ldr	r0, [pc, #36]	@ (8001914 <handle_BANK_5+0x54>)
 80018f0:	f002 fa3c 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <handle_BANK_5+0x58>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2332      	movs	r3, #50	@ 0x32
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	236e      	movs	r3, #110	@ 0x6e
 80018fe:	2207      	movs	r2, #7
 8001900:	2109      	movs	r1, #9
 8001902:	4804      	ldr	r0, [pc, #16]	@ (8001914 <handle_BANK_5+0x54>)
 8001904:	f001 fa29 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <handle_BANK_5+0x54>)
 800190a:	f001 fb12 	bl	8002f32 <u8g2_SendBuffer>
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000188 	.word	0x20000188
 8001918:	08007da8 	.word	0x08007da8

0800191c <handle_BANK_6>:
void handle_BANK_6()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 8001922:	4813      	ldr	r0, [pc, #76]	@ (8001970 <handle_BANK_6+0x54>)
 8001924:	f001 fa92 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8001928:	2101      	movs	r1, #1
 800192a:	4811      	ldr	r0, [pc, #68]	@ (8001970 <handle_BANK_6+0x54>)
 800192c:	f001 f976 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 8001930:	2101      	movs	r1, #1
 8001932:	480f      	ldr	r0, [pc, #60]	@ (8001970 <handle_BANK_6+0x54>)
 8001934:	f001 ff79 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 32, 32, 32, 32);
 8001938:	2320      	movs	r3, #32
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2320      	movs	r3, #32
 800193e:	2220      	movs	r2, #32
 8001940:	2120      	movs	r1, #32
 8001942:	480b      	ldr	r0, [pc, #44]	@ (8001970 <handle_BANK_6+0x54>)
 8001944:	f001 fa4c 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 8001948:	2102      	movs	r1, #2
 800194a:	4809      	ldr	r0, [pc, #36]	@ (8001970 <handle_BANK_6+0x54>)
 800194c:	f002 fa0e 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <handle_BANK_6+0x58>)
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2332      	movs	r3, #50	@ 0x32
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	236e      	movs	r3, #110	@ 0x6e
 800195a:	2207      	movs	r2, #7
 800195c:	2109      	movs	r1, #9
 800195e:	4804      	ldr	r0, [pc, #16]	@ (8001970 <handle_BANK_6+0x54>)
 8001960:	f001 f9fb 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <handle_BANK_6+0x54>)
 8001966:	f001 fae4 	bl	8002f32 <u8g2_SendBuffer>
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000188 	.word	0x20000188
 8001974:	08008064 	.word	0x08008064

08001978 <handle_BANK_7>:
void handle_BANK_7()
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 800197e:	4813      	ldr	r0, [pc, #76]	@ (80019cc <handle_BANK_7+0x54>)
 8001980:	f001 fa64 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8001984:	2101      	movs	r1, #1
 8001986:	4811      	ldr	r0, [pc, #68]	@ (80019cc <handle_BANK_7+0x54>)
 8001988:	f001 f948 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 800198c:	2101      	movs	r1, #1
 800198e:	480f      	ldr	r0, [pc, #60]	@ (80019cc <handle_BANK_7+0x54>)
 8001990:	f001 ff4b 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 64, 32, 32, 32);
 8001994:	2320      	movs	r3, #32
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2320      	movs	r3, #32
 800199a:	2220      	movs	r2, #32
 800199c:	2140      	movs	r1, #64	@ 0x40
 800199e:	480b      	ldr	r0, [pc, #44]	@ (80019cc <handle_BANK_7+0x54>)
 80019a0:	f001 fa1e 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 80019a4:	2102      	movs	r1, #2
 80019a6:	4809      	ldr	r0, [pc, #36]	@ (80019cc <handle_BANK_7+0x54>)
 80019a8:	f002 f9e0 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <handle_BANK_7+0x58>)
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	2332      	movs	r3, #50	@ 0x32
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	236e      	movs	r3, #110	@ 0x6e
 80019b6:	2207      	movs	r2, #7
 80019b8:	2109      	movs	r1, #9
 80019ba:	4804      	ldr	r0, [pc, #16]	@ (80019cc <handle_BANK_7+0x54>)
 80019bc:	f001 f9cd 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <handle_BANK_7+0x54>)
 80019c2:	f001 fab6 	bl	8002f32 <u8g2_SendBuffer>
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000188 	.word	0x20000188
 80019d0:	08008320 	.word	0x08008320

080019d4 <handle_BANK_8>:
void handle_BANK_8()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af02      	add	r7, sp, #8
  static const uint8_t image_Layer_10_bits[] = {0xe0, 0x01, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0xe0, 0x01, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0xf0, 0x03, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0xf0, 0x03, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x38, 0x07, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0x0e, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x0e, 0x1c, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x3c, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x38, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x1c, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x07, 0x38, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x38, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0x0e, 0x7e, 0x00, 0x00, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x07, 0x38, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x1f, 0x00, 0x00, 0x07, 0x38, 0xff, 0x3f, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x07, 0x38};
  u8g2_ClearBuffer(&u8g2);
 80019da:	4813      	ldr	r0, [pc, #76]	@ (8001a28 <handle_BANK_8+0x54>)
 80019dc:	f001 fa36 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 80019e0:	2101      	movs	r1, #1
 80019e2:	4811      	ldr	r0, [pc, #68]	@ (8001a28 <handle_BANK_8+0x54>)
 80019e4:	f001 f91a 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 80019e8:	2101      	movs	r1, #1
 80019ea:	480f      	ldr	r0, [pc, #60]	@ (8001a28 <handle_BANK_8+0x54>)
 80019ec:	f001 ff1d 	bl	800382a <u8g2_SetFontMode>
  u8g2_DrawBox(&u8g2, 96, 32, 32, 32);
 80019f0:	2320      	movs	r3, #32
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2320      	movs	r3, #32
 80019f6:	2220      	movs	r2, #32
 80019f8:	2160      	movs	r1, #96	@ 0x60
 80019fa:	480b      	ldr	r0, [pc, #44]	@ (8001a28 <handle_BANK_8+0x54>)
 80019fc:	f001 f9f0 	bl	8002de0 <u8g2_DrawBox>
  u8g2_SetDrawColor(&u8g2, 2);
 8001a00:	2102      	movs	r1, #2
 8001a02:	4809      	ldr	r0, [pc, #36]	@ (8001a28 <handle_BANK_8+0x54>)
 8001a04:	f002 f9b2 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawXBM(&u8g2, 9, 7, 110, 50, image_Layer_10_bits);
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <handle_BANK_8+0x58>)
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	2332      	movs	r3, #50	@ 0x32
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	236e      	movs	r3, #110	@ 0x6e
 8001a12:	2207      	movs	r2, #7
 8001a14:	2109      	movs	r1, #9
 8001a16:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <handle_BANK_8+0x54>)
 8001a18:	f001 f99f 	bl	8002d5a <u8g2_DrawXBM>
  u8g2_SendBuffer(&u8g2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <handle_BANK_8+0x54>)
 8001a1e:	f001 fa88 	bl	8002f32 <u8g2_SendBuffer>
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000188 	.word	0x20000188
 8001a2c:	080085dc 	.word	0x080085dc

08001a30 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a36:	f003 f87b 	bl	8004b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3a:	f000 fc17 	bl	800226c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3e:	f000 fd89 	bl	8002554 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a42:	f000 fcdf 	bl	8002404 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a46:	f000 fd31 	bl	80024ac <MX_TIM3_Init>
  MX_TIM1_Init();
 8001a4a:	f000 fc83 	bl	8002354 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001a4e:	f000 fc53 	bl	80022f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8001a52:	f7fe fdf9 	bl	8000648 <DWT_Delay_Init>
  X9C104_ZERO();
 8001a56:	f7ff fd09 	bl	800146c <X9C104_ZERO>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a5a:	213c      	movs	r1, #60	@ 0x3c
 8001a5c:	4829      	ldr	r0, [pc, #164]	@ (8001b04 <main+0xd4>)
 8001a5e:	f005 fa4d 	bl	8006efc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a62:	213c      	movs	r1, #60	@ 0x3c
 8001a64:	4828      	ldr	r0, [pc, #160]	@ (8001b08 <main+0xd8>)
 8001a66:	f005 fa49 	bl	8006efc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a6a:	213c      	movs	r1, #60	@ 0x3c
 8001a6c:	4827      	ldr	r0, [pc, #156]	@ (8001b0c <main+0xdc>)
 8001a6e:	f005 fa45 	bl	8006efc <HAL_TIM_Encoder_Start>

  lastActivityTime = HAL_GetTick();
 8001a72:	f003 f8b5 	bl	8004be0 <HAL_GetTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a25      	ldr	r2, [pc, #148]	@ (8001b10 <main+0xe0>)
 8001a7a:	6013      	str	r3, [r2, #0]

  u8g2_Setup_ssd1306_i2c_128x64_noname_f(
 8001a7c:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <main+0xe4>)
 8001a7e:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <main+0xe8>)
 8001a80:	4926      	ldr	r1, [pc, #152]	@ (8001b1c <main+0xec>)
 8001a82:	4827      	ldr	r0, [pc, #156]	@ (8001b20 <main+0xf0>)
 8001a84:	f001 fa74 	bl	8002f70 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
      U8G2_R0,
      u8x8_byte_hw_i2c_stm32,
      u8x8_gpio_and_delay_stm32);

  // Initialize display
  u8g2_InitDisplay(&u8g2);
 8001a88:	4825      	ldr	r0, [pc, #148]	@ (8001b20 <main+0xf0>)
 8001a8a:	f002 ff8e 	bl	80049aa <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4823      	ldr	r0, [pc, #140]	@ (8001b20 <main+0xf0>)
 8001a92:	f002 ff99 	bl	80049c8 <u8x8_SetPowerSave>
  static const uint8_t image_theib_idp2_bits[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0x00, 0xf0, 0x8f, 0xff, 0x7f, 0x00, 0xff, 0xff, 0xcf, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x01, 0xff, 0xff, 0xcf, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x03, 0xff, 0xff, 0xcf, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x07, 0xff, 0xff, 0xcf, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x07, 0xff, 0xff, 0xcf, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x07, 0xff, 0xff, 0xcf, 0x1f, 0xf0, 0xc7, 0x3f, 0x00, 0x00, 0xf0, 0x8f, 0x3f, 0xf8, 0x07, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0x3f, 0x00, 0x00, 0xf0, 0x8f, 0x3f, 0xf0, 0x07, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0x3f, 0x00, 0x00, 0xf0, 0x8f, 0x3f, 0xf0, 0x07, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0xc7, 0xff, 0x7f, 0x00, 0xf0, 0x8f, 0x3f, 0xf8, 0x07, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0xc7, 0xff, 0x7f, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x03, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0xc7, 0xff, 0x7f, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x01, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0xc7, 0xff, 0x7f, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x01, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0xc7, 0xff, 0x7f, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x03, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0xc7, 0xff, 0x7f, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x07, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 0xc7, 0xff, 0x7f, 0x00, 0xf0, 0x8f, 0xff, 0xff, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0x3f, 0x00, 0x60, 0xf0, 0x8f, 0x3f, 0xf0, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0x3f, 0x00, 0xf8, 0xf1, 0x8f, 0x3f, 0xe0, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0x3f, 0x00, 0xf8, 0xf1, 0x8f, 0x3f, 0xe0, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0xfc, 0xf3, 0x8f, 0x3f, 0xf8, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0xfc, 0xf3, 0x8f, 0xff, 0xff, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0xfc, 0xf3, 0x8f, 0xff, 0xff, 0x0f, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0xfc, 0xf3, 0x8f, 0xff, 0xff, 0x07, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0xfc, 0xf3, 0x8f, 0xff, 0xff, 0x07, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0xf8, 0xf1, 0x8f, 0xff, 0xff, 0x01, 0xc0, 0x3f, 0xc0, 0x1f, 0xf0, 0xc7, 0xff, 0xff, 0xf0, 0xf0, 0x8f, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  u8g2_ClearBuffer(&u8g2);
 8001a96:	4822      	ldr	r0, [pc, #136]	@ (8001b20 <main+0xf0>)
 8001a98:	f001 f9d8 	bl	8002e4c <u8g2_ClearBuffer>
  u8g2_SetBitmapMode(&u8g2, 1);
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4820      	ldr	r0, [pc, #128]	@ (8001b20 <main+0xf0>)
 8001aa0:	f001 f8bc 	bl	8002c1c <u8g2_SetBitmapMode>
  u8g2_SetFontMode(&u8g2, 1);
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	481e      	ldr	r0, [pc, #120]	@ (8001b20 <main+0xf0>)
 8001aa8:	f001 febf 	bl	800382a <u8g2_SetFontMode>

  u8g2_SetDrawColor(&u8g2, 2);
 8001aac:	2102      	movs	r1, #2
 8001aae:	481c      	ldr	r0, [pc, #112]	@ (8001b20 <main+0xf0>)
 8001ab0:	f002 f95c 	bl	8003d6c <u8g2_SetDrawColor>
  u8g2_DrawBox(&u8g2, 6, 10, 117, 41);
 8001ab4:	2329      	movs	r3, #41	@ 0x29
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2375      	movs	r3, #117	@ 0x75
 8001aba:	220a      	movs	r2, #10
 8001abc:	2106      	movs	r1, #6
 8001abe:	4818      	ldr	r0, [pc, #96]	@ (8001b20 <main+0xf0>)
 8001ac0:	f001 f98e 	bl	8002de0 <u8g2_DrawBox>

  u8g2_DrawXBM(&u8g2, 9, 11, 109, 42, image_theib_idp2_bits);
 8001ac4:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <main+0xf4>)
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	232a      	movs	r3, #42	@ 0x2a
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	236d      	movs	r3, #109	@ 0x6d
 8001ace:	220b      	movs	r2, #11
 8001ad0:	2109      	movs	r1, #9
 8001ad2:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <main+0xf0>)
 8001ad4:	f001 f941 	bl	8002d5a <u8g2_DrawXBM>

  u8g2_SendBuffer(&u8g2);
 8001ad8:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <main+0xf0>)
 8001ada:	f001 fa2a 	bl	8002f32 <u8g2_SendBuffer>
  DWT_Delay_ms(2000);
 8001ade:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ae2:	f7fe fe09 	bl	80006f8 <DWT_Delay_ms>
  if (HAL_GPIO_ReadPin(SW_3PDT_EXTI_GPIO_Port, SW_3PDT_EXTI_Pin) == GPIO_PIN_RESET)
 8001ae6:	2180      	movs	r1, #128	@ 0x80
 8001ae8:	480f      	ldr	r0, [pc, #60]	@ (8001b28 <main+0xf8>)
 8001aea:	f003 fb39 	bl	8005160 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11f      	bne.n	8001b34 <main+0x104>
  {
    system_locked = 0;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <main+0xfc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
    currentState = MAIN;
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <main+0x100>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e01e      	b.n	8001b40 <main+0x110>
 8001b02:	bf00      	nop
 8001b04:	20000080 	.word	0x20000080
 8001b08:	200000c8 	.word	0x200000c8
 8001b0c:	20000110 	.word	0x20000110
 8001b10:	20000270 	.word	0x20000270
 8001b14:	08000745 	.word	0x08000745
 8001b18:	08000775 	.word	0x08000775
 8001b1c:	0800a0f8 	.word	0x0800a0f8
 8001b20:	20000188 	.word	0x20000188
 8001b24:	08008898 	.word	0x08008898
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	20000168 	.word	0x20000168
 8001b30:	2000024e 	.word	0x2000024e
  }
  else
  {
    system_locked = 1;
 8001b34:	4ba0      	ldr	r3, [pc, #640]	@ (8001db8 <main+0x388>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
    currentState = bypassed;
 8001b3a:	4ba0      	ldr	r3, [pc, #640]	@ (8001dbc <main+0x38c>)
 8001b3c:	2215      	movs	r2, #21
 8001b3e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    encoder_position1 = (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 8001b40:	4b9f      	ldr	r3, [pc, #636]	@ (8001dc0 <main+0x390>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b9e      	ldr	r3, [pc, #632]	@ (8001dc4 <main+0x394>)
 8001b4a:	801a      	strh	r2, [r3, #0]
    encoder_position2 = (int16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8001b4c:	4b9e      	ldr	r3, [pc, #632]	@ (8001dc8 <main+0x398>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	4b9d      	ldr	r3, [pc, #628]	@ (8001dcc <main+0x39c>)
 8001b56:	801a      	strh	r2, [r3, #0]
    encoder_position3 = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8001b58:	4b9d      	ldr	r3, [pc, #628]	@ (8001dd0 <main+0x3a0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	4b9c      	ldr	r3, [pc, #624]	@ (8001dd4 <main+0x3a4>)
 8001b62:	801a      	strh	r2, [r3, #0]

    if (encoder_position1 < 0)
 8001b64:	4b97      	ldr	r3, [pc, #604]	@ (8001dc4 <main+0x394>)
 8001b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da03      	bge.n	8001b76 <main+0x146>
    {
      __HAL_TIM_SET_COUNTER(&htim1, 0); // Reset the encoder counter to 0
 8001b6e:	4b94      	ldr	r3, [pc, #592]	@ (8001dc0 <main+0x390>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (encoder_position1 > 128)
 8001b76:	4b93      	ldr	r3, [pc, #588]	@ (8001dc4 <main+0x394>)
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	2b80      	cmp	r3, #128	@ 0x80
 8001b7e:	dd03      	ble.n	8001b88 <main+0x158>
    {
      __HAL_TIM_SET_COUNTER(&htim1, 128); // Reset the encoder counter to 128
 8001b80:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc0 <main+0x390>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (encoder_position2 < 0)
 8001b88:	4b90      	ldr	r3, [pc, #576]	@ (8001dcc <main+0x39c>)
 8001b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da03      	bge.n	8001b9a <main+0x16a>
    {
      __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset the encoder counter to 0
 8001b92:	4b8d      	ldr	r3, [pc, #564]	@ (8001dc8 <main+0x398>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (encoder_position2 > 128)
 8001b9a:	4b8c      	ldr	r3, [pc, #560]	@ (8001dcc <main+0x39c>)
 8001b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba0:	2b80      	cmp	r3, #128	@ 0x80
 8001ba2:	dd03      	ble.n	8001bac <main+0x17c>
    {
      __HAL_TIM_SET_COUNTER(&htim2, 128); // Reset the encoder counter to 128
 8001ba4:	4b88      	ldr	r3, [pc, #544]	@ (8001dc8 <main+0x398>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (encoder_position3 < 0)
 8001bac:	4b89      	ldr	r3, [pc, #548]	@ (8001dd4 <main+0x3a4>)
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da03      	bge.n	8001bbe <main+0x18e>
    {
      __HAL_TIM_SET_COUNTER(&htim3, 0); // Reset the encoder counter to 0
 8001bb6:	4b86      	ldr	r3, [pc, #536]	@ (8001dd0 <main+0x3a0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    if (encoder_position3 > 128)
 8001bbe:	4b85      	ldr	r3, [pc, #532]	@ (8001dd4 <main+0x3a4>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	2b80      	cmp	r3, #128	@ 0x80
 8001bc6:	dd03      	ble.n	8001bd0 <main+0x1a0>
    {
      __HAL_TIM_SET_COUNTER(&htim3, 128); // Reset the encoder counter to 128
 8001bc8:	4b81      	ldr	r3, [pc, #516]	@ (8001dd0 <main+0x3a0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2280      	movs	r2, #128	@ 0x80
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    mapped_value1 = MapValue(encoder_position1, 0, 128, 2, 66);
 8001bd0:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc4 <main+0x394>)
 8001bd2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001bd6:	2342      	movs	r3, #66	@ 0x42
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	2100      	movs	r1, #0
 8001be0:	f7fe feab 	bl	800093a <MapValue>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd8 <main+0x3a8>)
 8001bea:	701a      	strb	r2, [r3, #0]
    mapped_value2 = MapValue(encoder_position2, 0, 128, 2, 66);
 8001bec:	4b77      	ldr	r3, [pc, #476]	@ (8001dcc <main+0x39c>)
 8001bee:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001bf2:	2342      	movs	r3, #66	@ 0x42
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	2280      	movs	r2, #128	@ 0x80
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f7fe fe9d 	bl	800093a <MapValue>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b75      	ldr	r3, [pc, #468]	@ (8001ddc <main+0x3ac>)
 8001c06:	701a      	strb	r2, [r3, #0]
    mapped_value3 = MapValue(encoder_position3, 0, 128, 2, 66);
 8001c08:	4b72      	ldr	r3, [pc, #456]	@ (8001dd4 <main+0x3a4>)
 8001c0a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c0e:	2342      	movs	r3, #66	@ 0x42
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2302      	movs	r3, #2
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	2100      	movs	r1, #0
 8001c18:	f7fe fe8f 	bl	800093a <MapValue>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b6f      	ldr	r3, [pc, #444]	@ (8001de0 <main+0x3b0>)
 8001c22:	701a      	strb	r2, [r3, #0]

    GP_map_v = MapValue(encoder_position1, 0, 128, 0, 100);
 8001c24:	4b67      	ldr	r3, [pc, #412]	@ (8001dc4 <main+0x394>)
 8001c26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c2a:	2364      	movs	r3, #100	@ 0x64
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	2100      	movs	r1, #0
 8001c34:	f7fe fe81 	bl	800093a <MapValue>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b69      	ldr	r3, [pc, #420]	@ (8001de4 <main+0x3b4>)
 8001c3e:	801a      	strh	r2, [r3, #0]
    TP_map_v = MapValue(encoder_position2, 0, 128, 0, 100);
 8001c40:	4b62      	ldr	r3, [pc, #392]	@ (8001dcc <main+0x39c>)
 8001c42:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c46:	2364      	movs	r3, #100	@ 0x64
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2280      	movs	r2, #128	@ 0x80
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f7fe fe73 	bl	800093a <MapValue>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b63      	ldr	r3, [pc, #396]	@ (8001de8 <main+0x3b8>)
 8001c5a:	801a      	strh	r2, [r3, #0]
    LP_map_v = MapValue(encoder_position3, 0, 128, 0, 100);
 8001c5c:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd4 <main+0x3a4>)
 8001c5e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c62:	2364      	movs	r3, #100	@ 0x64
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	2280      	movs	r2, #128	@ 0x80
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	f7fe fe65 	bl	800093a <MapValue>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b5d      	ldr	r3, [pc, #372]	@ (8001dec <main+0x3bc>)
 8001c76:	801a      	strh	r2, [r3, #0]
    // Update state based on encoder positions
    UpdateState(&currentState, encoder_position1, encoder_position2, encoder_position3);
 8001c78:	4b52      	ldr	r3, [pc, #328]	@ (8001dc4 <main+0x394>)
 8001c7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c7e:	4b53      	ldr	r3, [pc, #332]	@ (8001dcc <main+0x39c>)
 8001c80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c84:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <main+0x3a4>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	484c      	ldr	r0, [pc, #304]	@ (8001dbc <main+0x38c>)
 8001c8c:	f7fe fdd4 	bl	8000838 <UpdateState>

    if ((HAL_GetTick() - lastActivityTime > 1000) && (currentState != prstinit1) && (currentState != prstinit2) && (currentState != prstinit3) && (currentState != prst_s1) && (currentState != prst_s2) && (currentState != prst_s3) && (currentState != RD_PRST_1) && (currentState != RD_PRST_2) && (currentState != RD_PRST_3) && (currentState != BANK_1) && (currentState != BANK_2) &&
 8001c90:	f002 ffa6 	bl	8004be0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b56      	ldr	r3, [pc, #344]	@ (8001df0 <main+0x3c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ca0:	d94a      	bls.n	8001d38 <main+0x308>
 8001ca2:	4b46      	ldr	r3, [pc, #280]	@ (8001dbc <main+0x38c>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d046      	beq.n	8001d38 <main+0x308>
 8001caa:	4b44      	ldr	r3, [pc, #272]	@ (8001dbc <main+0x38c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d042      	beq.n	8001d38 <main+0x308>
 8001cb2:	4b42      	ldr	r3, [pc, #264]	@ (8001dbc <main+0x38c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d03e      	beq.n	8001d38 <main+0x308>
 8001cba:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <main+0x38c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	d03a      	beq.n	8001d38 <main+0x308>
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dbc <main+0x38c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d036      	beq.n	8001d38 <main+0x308>
 8001cca:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <main+0x38c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b09      	cmp	r3, #9
 8001cd0:	d032      	beq.n	8001d38 <main+0x308>
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <main+0x38c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d02e      	beq.n	8001d38 <main+0x308>
 8001cda:	4b38      	ldr	r3, [pc, #224]	@ (8001dbc <main+0x38c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b0b      	cmp	r3, #11
 8001ce0:	d02a      	beq.n	8001d38 <main+0x308>
 8001ce2:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <main+0x38c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d026      	beq.n	8001d38 <main+0x308>
 8001cea:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <main+0x38c>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b0d      	cmp	r3, #13
 8001cf0:	d022      	beq.n	8001d38 <main+0x308>
 8001cf2:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <main+0x38c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b0e      	cmp	r3, #14
 8001cf8:	d01e      	beq.n	8001d38 <main+0x308>
        (currentState != BANK_3) && (currentState != BANK_4) &&
 8001cfa:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <main+0x38c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
    if ((HAL_GetTick() - lastActivityTime > 1000) && (currentState != prstinit1) && (currentState != prstinit2) && (currentState != prstinit3) && (currentState != prst_s1) && (currentState != prst_s2) && (currentState != prst_s3) && (currentState != RD_PRST_1) && (currentState != RD_PRST_2) && (currentState != RD_PRST_3) && (currentState != BANK_1) && (currentState != BANK_2) &&
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d01a      	beq.n	8001d38 <main+0x308>
        (currentState != BANK_3) && (currentState != BANK_4) &&
 8001d02:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <main+0x38c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d016      	beq.n	8001d38 <main+0x308>
        (currentState != BANK_5) && (currentState != BANK_6) &&
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <main+0x38c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
        (currentState != BANK_3) && (currentState != BANK_4) &&
 8001d0e:	2b11      	cmp	r3, #17
 8001d10:	d012      	beq.n	8001d38 <main+0x308>
        (currentState != BANK_5) && (currentState != BANK_6) &&
 8001d12:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <main+0x38c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d00e      	beq.n	8001d38 <main+0x308>
        (currentState != BANK_7) && (currentState != BANK_8) && (currentState != bypassed))
 8001d1a:	4b28      	ldr	r3, [pc, #160]	@ (8001dbc <main+0x38c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
        (currentState != BANK_5) && (currentState != BANK_6) &&
 8001d1e:	2b13      	cmp	r3, #19
 8001d20:	d00a      	beq.n	8001d38 <main+0x308>
        (currentState != BANK_7) && (currentState != BANK_8) && (currentState != bypassed))
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <main+0x38c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b14      	cmp	r3, #20
 8001d28:	d006      	beq.n	8001d38 <main+0x308>
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <main+0x38c>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b15      	cmp	r3, #21
 8001d30:	d002      	beq.n	8001d38 <main+0x308>
    {
      // If no activity for 1 second, go to MAIN state
      currentState = MAIN;
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <main+0x38c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
    }

    // Add any additional logic based on the current state here
    updateWiperPosition(GP_map_v, TP_map_v, LP_map_v);
 8001d38:	4b2a      	ldr	r3, [pc, #168]	@ (8001de4 <main+0x3b4>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <main+0x3b8>)
 8001d40:	8812      	ldrh	r2, [r2, #0]
 8001d42:	b211      	sxth	r1, r2
 8001d44:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <main+0x3bc>)
 8001d46:	8812      	ldrh	r2, [r2, #0]
 8001d48:	b212      	sxth	r2, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff faf0 	bl	8001330 <updateWiperPosition>
    switch (currentState)
 8001d50:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <main+0x38c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b15      	cmp	r3, #21
 8001d56:	f63f aef3 	bhi.w	8001b40 <main+0x110>
 8001d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <main+0x330>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001df5 	.word	0x08001df5
 8001d64:	08001f77 	.word	0x08001f77
 8001d68:	08001fe5 	.word	0x08001fe5
 8001d6c:	08002053 	.word	0x08002053
 8001d70:	080020c1 	.word	0x080020c1
 8001d74:	080020c7 	.word	0x080020c7
 8001d78:	080020cd 	.word	0x080020cd
 8001d7c:	080020d3 	.word	0x080020d3
 8001d80:	080020d9 	.word	0x080020d9
 8001d84:	080020df 	.word	0x080020df
 8001d88:	080020e5 	.word	0x080020e5
 8001d8c:	080020eb 	.word	0x080020eb
 8001d90:	080020f1 	.word	0x080020f1
 8001d94:	08002149 	.word	0x08002149
 8001d98:	0800215f 	.word	0x0800215f
 8001d9c:	08002165 	.word	0x08002165
 8001da0:	0800216b 	.word	0x0800216b
 8001da4:	08002171 	.word	0x08002171
 8001da8:	08002177 	.word	0x08002177
 8001dac:	0800217d 	.word	0x0800217d
 8001db0:	08002183 	.word	0x08002183
 8001db4:	08002189 	.word	0x08002189
 8001db8:	20000168 	.word	0x20000168
 8001dbc:	2000024e 	.word	0x2000024e
 8001dc0:	20000080 	.word	0x20000080
 8001dc4:	20000256 	.word	0x20000256
 8001dc8:	200000c8 	.word	0x200000c8
 8001dcc:	20000258 	.word	0x20000258
 8001dd0:	20000110 	.word	0x20000110
 8001dd4:	2000025a 	.word	0x2000025a
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000001 	.word	0x20000001
 8001de0:	20000002 	.word	0x20000002
 8001de4:	20000274 	.word	0x20000274
 8001de8:	20000276 	.word	0x20000276
 8001dec:	20000278 	.word	0x20000278
 8001df0:	20000270 	.word	0x20000270
    {
    case MAIN:
      static const uint8_t image_ButtonLeft_bits[] = {0x08, 0x0c, 0x0e, 0x0f, 0x0e, 0x0c, 0x08};
      static const uint8_t image_ButtonRight_bits[] = {0x01, 0x03, 0x07, 0x0f, 0x07, 0x03, 0x01};
      u8g2_ClearBuffer(&u8g2);
 8001df4:	48c0      	ldr	r0, [pc, #768]	@ (80020f8 <main+0x6c8>)
 8001df6:	f001 f829 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	48be      	ldr	r0, [pc, #760]	@ (80020f8 <main+0x6c8>)
 8001dfe:	f000 ff0d 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8001e02:	2101      	movs	r1, #1
 8001e04:	48bc      	ldr	r0, [pc, #752]	@ (80020f8 <main+0x6c8>)
 8001e06:	f001 fd10 	bl	800382a <u8g2_SetFontMode>
      u8g2_SetFont(&u8g2, u8g2_font_profont12_tr);
 8001e0a:	49bc      	ldr	r1, [pc, #752]	@ (80020fc <main+0x6cc>)
 8001e0c:	48ba      	ldr	r0, [pc, #744]	@ (80020f8 <main+0x6c8>)
 8001e0e:	f001 fe67 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 5, 25, "GAIN");
 8001e12:	4bbb      	ldr	r3, [pc, #748]	@ (8002100 <main+0x6d0>)
 8001e14:	2219      	movs	r2, #25
 8001e16:	2105      	movs	r1, #5
 8001e18:	48b7      	ldr	r0, [pc, #732]	@ (80020f8 <main+0x6c8>)
 8001e1a:	f001 fdc3 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawLine(&u8g2, 127, 10, 0, 10);
 8001e1e:	230a      	movs	r3, #10
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	220a      	movs	r2, #10
 8001e26:	217f      	movs	r1, #127	@ 0x7f
 8001e28:	48b3      	ldr	r0, [pc, #716]	@ (80020f8 <main+0x6c8>)
 8001e2a:	f002 f813 	bl	8003e54 <u8g2_DrawLine>
      u8g2_DrawBox(&u8g2, 40, 16, mapped_value1, 10);
 8001e2e:	4bb5      	ldr	r3, [pc, #724]	@ (8002104 <main+0x6d4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	230a      	movs	r3, #10
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	2128      	movs	r1, #40	@ 0x28
 8001e3e:	48ae      	ldr	r0, [pc, #696]	@ (80020f8 <main+0x6c8>)
 8001e40:	f000 ffce 	bl	8002de0 <u8g2_DrawBox>
      u8g2_DrawBox(&u8g2, 40, 33, mapped_value2, 10);
 8001e44:	4bb0      	ldr	r3, [pc, #704]	@ (8002108 <main+0x6d8>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	2221      	movs	r2, #33	@ 0x21
 8001e52:	2128      	movs	r1, #40	@ 0x28
 8001e54:	48a8      	ldr	r0, [pc, #672]	@ (80020f8 <main+0x6c8>)
 8001e56:	f000 ffc3 	bl	8002de0 <u8g2_DrawBox>
      u8g2_DrawBox(&u8g2, 40, 51, mapped_value3, 10);
 8001e5a:	4bac      	ldr	r3, [pc, #688]	@ (800210c <main+0x6dc>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	230a      	movs	r3, #10
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	2233      	movs	r2, #51	@ 0x33
 8001e68:	2128      	movs	r1, #40	@ 0x28
 8001e6a:	48a3      	ldr	r0, [pc, #652]	@ (80020f8 <main+0x6c8>)
 8001e6c:	f000 ffb8 	bl	8002de0 <u8g2_DrawBox>
      u8g2_DrawStr(&u8g2, 5, 42, "TONE");
 8001e70:	4ba7      	ldr	r3, [pc, #668]	@ (8002110 <main+0x6e0>)
 8001e72:	222a      	movs	r2, #42	@ 0x2a
 8001e74:	2105      	movs	r1, #5
 8001e76:	48a0      	ldr	r0, [pc, #640]	@ (80020f8 <main+0x6c8>)
 8001e78:	f001 fd94 	bl	80039a4 <u8g2_DrawStr>
      u8g2_DrawStr(&u8g2, 5, 60, "LEVEL");
 8001e7c:	4ba5      	ldr	r3, [pc, #660]	@ (8002114 <main+0x6e4>)
 8001e7e:	223c      	movs	r2, #60	@ 0x3c
 8001e80:	2105      	movs	r1, #5
 8001e82:	489d      	ldr	r0, [pc, #628]	@ (80020f8 <main+0x6c8>)
 8001e84:	f001 fd8e 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetFont(&u8g2, u8g2_font_4x6_tr);
 8001e88:	49a3      	ldr	r1, [pc, #652]	@ (8002118 <main+0x6e8>)
 8001e8a:	489b      	ldr	r0, [pc, #620]	@ (80020f8 <main+0x6c8>)
 8001e8c:	f001 fe28 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 95, 7, "THE.IB");
 8001e90:	4ba2      	ldr	r3, [pc, #648]	@ (800211c <main+0x6ec>)
 8001e92:	2207      	movs	r2, #7
 8001e94:	215f      	movs	r1, #95	@ 0x5f
 8001e96:	4898      	ldr	r0, [pc, #608]	@ (80020f8 <main+0x6c8>)
 8001e98:	f001 fd84 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SetDrawColor(&u8g2, 2);
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4896      	ldr	r0, [pc, #600]	@ (80020f8 <main+0x6c8>)
 8001ea0:	f001 ff64 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawBox(&u8g2, 94, 1, 25, 7);
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2319      	movs	r3, #25
 8001eaa:	2201      	movs	r2, #1
 8001eac:	215e      	movs	r1, #94	@ 0x5e
 8001eae:	4892      	ldr	r0, [pc, #584]	@ (80020f8 <main+0x6c8>)
 8001eb0:	f000 ff96 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetFont(&u8g2, u8g2_font_profont10_tr);
 8001eb4:	499a      	ldr	r1, [pc, #616]	@ (8002120 <main+0x6f0>)
 8001eb6:	4890      	ldr	r0, [pc, #576]	@ (80020f8 <main+0x6c8>)
 8001eb8:	f001 fe12 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 10, 8, "BANK");
 8001ebc:	4b99      	ldr	r3, [pc, #612]	@ (8002124 <main+0x6f4>)
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	210a      	movs	r1, #10
 8001ec2:	488d      	ldr	r0, [pc, #564]	@ (80020f8 <main+0x6c8>)
 8001ec4:	f001 fd6e 	bl	80039a4 <u8g2_DrawStr>
      char bankLetter[8] = {0}; // Buffer to hold the bank letter
 8001ec8:	2300      	movs	r3, #0
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
      if (preset_bank == 0)
 8001ed0:	4b95      	ldr	r3, [pc, #596]	@ (8002128 <main+0x6f8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <main+0x4b6>
      {
        u8g2_DrawStr(&u8g2, 34, 8, "A");
 8001ed8:	4b94      	ldr	r3, [pc, #592]	@ (800212c <main+0x6fc>)
 8001eda:	2208      	movs	r2, #8
 8001edc:	2122      	movs	r1, #34	@ 0x22
 8001ede:	4886      	ldr	r0, [pc, #536]	@ (80020f8 <main+0x6c8>)
 8001ee0:	f001 fd60 	bl	80039a4 <u8g2_DrawStr>
 8001ee4:	e00b      	b.n	8001efe <main+0x4ce>
      }
      else
      {
        bankLetter[0] = 'A' + (preset_bank - 1); // Calculate the letter based on preset_bank
 8001ee6:	4b90      	ldr	r3, [pc, #576]	@ (8002128 <main+0x6f8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	3340      	adds	r3, #64	@ 0x40
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	703b      	strb	r3, [r7, #0]
        u8g2_DrawStr(&u8g2, 34, 8, bankLetter);
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	2122      	movs	r1, #34	@ 0x22
 8001ef8:	487f      	ldr	r0, [pc, #508]	@ (80020f8 <main+0x6c8>)
 8001efa:	f001 fd53 	bl	80039a4 <u8g2_DrawStr>
      }

      u8g2_DrawBox(&u8g2, 8, 1, 32, 8);
 8001efe:	2308      	movs	r3, #8
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2320      	movs	r3, #32
 8001f04:	2201      	movs	r2, #1
 8001f06:	2108      	movs	r1, #8
 8001f08:	487b      	ldr	r0, [pc, #492]	@ (80020f8 <main+0x6c8>)
 8001f0a:	f000 ff69 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetDrawColor(&u8g2, 1);
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4879      	ldr	r0, [pc, #484]	@ (80020f8 <main+0x6c8>)
 8001f12:	f001 ff2b 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawLine(&u8g2, 106, 16, 106, 25);
 8001f16:	2319      	movs	r3, #25
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	236a      	movs	r3, #106	@ 0x6a
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	216a      	movs	r1, #106	@ 0x6a
 8001f20:	4875      	ldr	r0, [pc, #468]	@ (80020f8 <main+0x6c8>)
 8001f22:	f001 ff97 	bl	8003e54 <u8g2_DrawLine>
      u8g2_DrawLine(&u8g2, 106, 33, 106, 42);
 8001f26:	232a      	movs	r3, #42	@ 0x2a
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	236a      	movs	r3, #106	@ 0x6a
 8001f2c:	2221      	movs	r2, #33	@ 0x21
 8001f2e:	216a      	movs	r1, #106	@ 0x6a
 8001f30:	4871      	ldr	r0, [pc, #452]	@ (80020f8 <main+0x6c8>)
 8001f32:	f001 ff8f 	bl	8003e54 <u8g2_DrawLine>
      u8g2_DrawLine(&u8g2, 106, 51, 106, 60);
 8001f36:	233c      	movs	r3, #60	@ 0x3c
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	236a      	movs	r3, #106	@ 0x6a
 8001f3c:	2233      	movs	r2, #51	@ 0x33
 8001f3e:	216a      	movs	r1, #106	@ 0x6a
 8001f40:	486d      	ldr	r0, [pc, #436]	@ (80020f8 <main+0x6c8>)
 8001f42:	f001 ff87 	bl	8003e54 <u8g2_DrawLine>
      u8g2_DrawXBM(&u8g2, 0, 1, 4, 7, image_ButtonLeft_bits);
 8001f46:	4b7a      	ldr	r3, [pc, #488]	@ (8002130 <main+0x700>)
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2304      	movs	r3, #4
 8001f50:	2201      	movs	r2, #1
 8001f52:	2100      	movs	r1, #0
 8001f54:	4868      	ldr	r0, [pc, #416]	@ (80020f8 <main+0x6c8>)
 8001f56:	f000 ff00 	bl	8002d5a <u8g2_DrawXBM>
      u8g2_DrawXBM(&u8g2, 124, 1, 4, 7, image_ButtonRight_bits);
 8001f5a:	4b76      	ldr	r3, [pc, #472]	@ (8002134 <main+0x704>)
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	2307      	movs	r3, #7
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2304      	movs	r3, #4
 8001f64:	2201      	movs	r2, #1
 8001f66:	217c      	movs	r1, #124	@ 0x7c
 8001f68:	4863      	ldr	r0, [pc, #396]	@ (80020f8 <main+0x6c8>)
 8001f6a:	f000 fef6 	bl	8002d5a <u8g2_DrawXBM>
      u8g2_SendBuffer(&u8g2);
 8001f6e:	4862      	ldr	r0, [pc, #392]	@ (80020f8 <main+0x6c8>)
 8001f70:	f000 ffdf 	bl	8002f32 <u8g2_SendBuffer>
      break;
 8001f74:	e16b      	b.n	800224e <main+0x81e>
    case STATE1:
      // Logic for STATE1
      u8g2_ClearBuffer(&u8g2);
 8001f76:	4860      	ldr	r0, [pc, #384]	@ (80020f8 <main+0x6c8>)
 8001f78:	f000 ff68 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	485e      	ldr	r0, [pc, #376]	@ (80020f8 <main+0x6c8>)
 8001f80:	f000 fe4c 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8001f84:	2101      	movs	r1, #1
 8001f86:	485c      	ldr	r0, [pc, #368]	@ (80020f8 <main+0x6c8>)
 8001f88:	f001 fc4f 	bl	800382a <u8g2_SetFontMode>
      u8g2_SetDrawColor(&u8g2, 2);
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	485a      	ldr	r0, [pc, #360]	@ (80020f8 <main+0x6c8>)
 8001f90:	f001 feec 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawBox(&u8g2, 0, 0, 128, 30);
 8001f94:	231e      	movs	r3, #30
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4856      	ldr	r0, [pc, #344]	@ (80020f8 <main+0x6c8>)
 8001fa0:	f000 ff1e 	bl	8002de0 <u8g2_DrawBox>
      u8g2_DrawBox(&u8g2, 0, 34, ClampValue(encoder_position1, 1, 128), 30);
 8001fa4:	4b64      	ldr	r3, [pc, #400]	@ (8002138 <main+0x708>)
 8001fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001faa:	2280      	movs	r2, #128	@ 0x80
 8001fac:	2101      	movs	r1, #1
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fca6 	bl	8000900 <ClampValue>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	231e      	movs	r3, #30
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	2222      	movs	r2, #34	@ 0x22
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	484d      	ldr	r0, [pc, #308]	@ (80020f8 <main+0x6c8>)
 8001fc4:	f000 ff0c 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8001fc8:	495c      	ldr	r1, [pc, #368]	@ (800213c <main+0x70c>)
 8001fca:	484b      	ldr	r0, [pc, #300]	@ (80020f8 <main+0x6c8>)
 8001fcc:	f001 fd88 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 34, 25, "GAIN");
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002100 <main+0x6d0>)
 8001fd2:	2219      	movs	r2, #25
 8001fd4:	2122      	movs	r1, #34	@ 0x22
 8001fd6:	4848      	ldr	r0, [pc, #288]	@ (80020f8 <main+0x6c8>)
 8001fd8:	f001 fce4 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 8001fdc:	4846      	ldr	r0, [pc, #280]	@ (80020f8 <main+0x6c8>)
 8001fde:	f000 ffa8 	bl	8002f32 <u8g2_SendBuffer>
      break;
 8001fe2:	e134      	b.n	800224e <main+0x81e>
    case STATE2:
      u8g2_ClearBuffer(&u8g2);
 8001fe4:	4844      	ldr	r0, [pc, #272]	@ (80020f8 <main+0x6c8>)
 8001fe6:	f000 ff31 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8001fea:	2101      	movs	r1, #1
 8001fec:	4842      	ldr	r0, [pc, #264]	@ (80020f8 <main+0x6c8>)
 8001fee:	f000 fe15 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4840      	ldr	r0, [pc, #256]	@ (80020f8 <main+0x6c8>)
 8001ff6:	f001 fc18 	bl	800382a <u8g2_SetFontMode>
      u8g2_SetDrawColor(&u8g2, 2);
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	483e      	ldr	r0, [pc, #248]	@ (80020f8 <main+0x6c8>)
 8001ffe:	f001 feb5 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawBox(&u8g2, 0, 0, 128, 30);
 8002002:	231e      	movs	r3, #30
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	483a      	ldr	r0, [pc, #232]	@ (80020f8 <main+0x6c8>)
 800200e:	f000 fee7 	bl	8002de0 <u8g2_DrawBox>
      u8g2_DrawBox(&u8g2, 0, 34, ClampValue(encoder_position2, 1, 128), 30);
 8002012:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <main+0x710>)
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	2280      	movs	r2, #128	@ 0x80
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fc6f 	bl	8000900 <ClampValue>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	231e      	movs	r3, #30
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	2222      	movs	r2, #34	@ 0x22
 800202e:	2100      	movs	r1, #0
 8002030:	4831      	ldr	r0, [pc, #196]	@ (80020f8 <main+0x6c8>)
 8002032:	f000 fed5 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 8002036:	4941      	ldr	r1, [pc, #260]	@ (800213c <main+0x70c>)
 8002038:	482f      	ldr	r0, [pc, #188]	@ (80020f8 <main+0x6c8>)
 800203a:	f001 fd51 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 32, 25, "TONE");
 800203e:	4b34      	ldr	r3, [pc, #208]	@ (8002110 <main+0x6e0>)
 8002040:	2219      	movs	r2, #25
 8002042:	2120      	movs	r1, #32
 8002044:	482c      	ldr	r0, [pc, #176]	@ (80020f8 <main+0x6c8>)
 8002046:	f001 fcad 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 800204a:	482b      	ldr	r0, [pc, #172]	@ (80020f8 <main+0x6c8>)
 800204c:	f000 ff71 	bl	8002f32 <u8g2_SendBuffer>
      break;
 8002050:	e0fd      	b.n	800224e <main+0x81e>
    case STATE3:
      // Logic for STATE3
      u8g2_ClearBuffer(&u8g2);
 8002052:	4829      	ldr	r0, [pc, #164]	@ (80020f8 <main+0x6c8>)
 8002054:	f000 fefa 	bl	8002e4c <u8g2_ClearBuffer>
      u8g2_SetBitmapMode(&u8g2, 1);
 8002058:	2101      	movs	r1, #1
 800205a:	4827      	ldr	r0, [pc, #156]	@ (80020f8 <main+0x6c8>)
 800205c:	f000 fdde 	bl	8002c1c <u8g2_SetBitmapMode>
      u8g2_SetFontMode(&u8g2, 1);
 8002060:	2101      	movs	r1, #1
 8002062:	4825      	ldr	r0, [pc, #148]	@ (80020f8 <main+0x6c8>)
 8002064:	f001 fbe1 	bl	800382a <u8g2_SetFontMode>
      u8g2_SetDrawColor(&u8g2, 2);
 8002068:	2102      	movs	r1, #2
 800206a:	4823      	ldr	r0, [pc, #140]	@ (80020f8 <main+0x6c8>)
 800206c:	f001 fe7e 	bl	8003d6c <u8g2_SetDrawColor>
      u8g2_DrawBox(&u8g2, 0, 0, 128, 30);
 8002070:	231e      	movs	r3, #30
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	481f      	ldr	r0, [pc, #124]	@ (80020f8 <main+0x6c8>)
 800207c:	f000 feb0 	bl	8002de0 <u8g2_DrawBox>
      u8g2_DrawBox(&u8g2, 0, 34, ClampValue(encoder_position3, 1, 128), 30);
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <main+0x714>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	2280      	movs	r2, #128	@ 0x80
 8002088:	2101      	movs	r1, #1
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fc38 	bl	8000900 <ClampValue>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	231e      	movs	r3, #30
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	2222      	movs	r2, #34	@ 0x22
 800209c:	2100      	movs	r1, #0
 800209e:	4816      	ldr	r0, [pc, #88]	@ (80020f8 <main+0x6c8>)
 80020a0:	f000 fe9e 	bl	8002de0 <u8g2_DrawBox>
      u8g2_SetFont(&u8g2, u8g2_font_profont29_tr);
 80020a4:	4925      	ldr	r1, [pc, #148]	@ (800213c <main+0x70c>)
 80020a6:	4814      	ldr	r0, [pc, #80]	@ (80020f8 <main+0x6c8>)
 80020a8:	f001 fd1a 	bl	8003ae0 <u8g2_SetFont>
      u8g2_DrawStr(&u8g2, 27, 25, "LEVEL");
 80020ac:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <main+0x6e4>)
 80020ae:	2219      	movs	r2, #25
 80020b0:	211b      	movs	r1, #27
 80020b2:	4811      	ldr	r0, [pc, #68]	@ (80020f8 <main+0x6c8>)
 80020b4:	f001 fc76 	bl	80039a4 <u8g2_DrawStr>
      u8g2_SendBuffer(&u8g2);
 80020b8:	480f      	ldr	r0, [pc, #60]	@ (80020f8 <main+0x6c8>)
 80020ba:	f000 ff3a 	bl	8002f32 <u8g2_SendBuffer>
      break;
 80020be:	e0c6      	b.n	800224e <main+0x81e>
    case prstinit1:
      handleprstinit1();
 80020c0:	f7fe fc7a 	bl	80009b8 <handleprstinit1>
      break;
 80020c4:	e0c3      	b.n	800224e <main+0x81e>
    case prstinit2:
      // Logic for prstinit1
      handleprstinit2();
 80020c6:	f7fe fd43 	bl	8000b50 <handleprstinit2>
      break;
 80020ca:	e0c0      	b.n	800224e <main+0x81e>
    case prstinit3:
      // Logic for prstinit1
      handleprstinit3();
 80020cc:	f7fe fe0c 	bl	8000ce8 <handleprstinit3>
      break;
 80020d0:	e0bd      	b.n	800224e <main+0x81e>
    case prst_s1:
      Ex_prst_s1();
 80020d2:	f7fe fed5 	bl	8000e80 <Ex_prst_s1>
      break;
 80020d6:	e0ba      	b.n	800224e <main+0x81e>
    case prst_s2:
      Ex_prst_s2();
 80020d8:	f7fe ff4c 	bl	8000f74 <Ex_prst_s2>
      break;
 80020dc:	e0b7      	b.n	800224e <main+0x81e>
    case prst_s3:
      Ex_prst_s3();
 80020de:	f7fe ffc3 	bl	8001068 <Ex_prst_s3>
      break;
 80020e2:	e0b4      	b.n	800224e <main+0x81e>
    case RD_PRST_1:
      handle_RD_PRST_1();
 80020e4:	f7ff f9d6 	bl	8001494 <handle_RD_PRST_1>
      // Logic for RD_PRST_1
      break;
 80020e8:	e0b1      	b.n	800224e <main+0x81e>
    case RD_PRST_2:
      handle_RD_PRST_2();
 80020ea:	f7ff fa2d 	bl	8001548 <handle_RD_PRST_2>
      // Logic for RD_PRST_2
      break;
 80020ee:	e0ae      	b.n	800224e <main+0x81e>
    case RD_PRST_3:
      handle_RD_PRST_3();
 80020f0:	f7ff fa84 	bl	80015fc <handle_RD_PRST_3>
      // Logic for RD_PRST_3
      break;
 80020f4:	e0ab      	b.n	800224e <main+0x81e>
 80020f6:	bf00      	nop
 80020f8:	20000188 	.word	0x20000188
 80020fc:	080094e8 	.word	0x080094e8
 8002100:	0800728c 	.word	0x0800728c
 8002104:	20000000 	.word	0x20000000
 8002108:	20000001 	.word	0x20000001
 800210c:	20000002 	.word	0x20000002
 8002110:	08007294 	.word	0x08007294
 8002114:	0800729c 	.word	0x0800729c
 8002118:	08008ecc 	.word	0x08008ecc
 800211c:	080072a4 	.word	0x080072a4
 8002120:	080091a0 	.word	0x080091a0
 8002124:	080072b0 	.word	0x080072b0
 8002128:	20000170 	.word	0x20000170
 800212c:	080072ac 	.word	0x080072ac
 8002130:	08008ae4 	.word	0x08008ae4
 8002134:	08008aec 	.word	0x08008aec
 8002138:	20000256 	.word	0x20000256
 800213c:	080098bc 	.word	0x080098bc
 8002140:	20000258 	.word	0x20000258
 8002144:	2000025a 	.word	0x2000025a
    case BANK_1:
      previesly_pressed = 1111;
 8002148:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <main+0x820>)
 800214a:	f240 4257 	movw	r2, #1111	@ 0x457
 800214e:	601a      	str	r2, [r3, #0]
      handle_BANK_1();
 8002150:	f7ff fafe 	bl	8001750 <handle_BANK_1>
      previesly_pressed = 3333;
 8002154:	4b3e      	ldr	r3, [pc, #248]	@ (8002250 <main+0x820>)
 8002156:	f640 5205 	movw	r2, #3333	@ 0xd05
 800215a:	601a      	str	r2, [r3, #0]
      break;
 800215c:	e077      	b.n	800224e <main+0x81e>
    case BANK_2:
      handle_BANK_2();
 800215e:	f7ff fb25 	bl	80017ac <handle_BANK_2>
      break;
 8002162:	e074      	b.n	800224e <main+0x81e>
    case BANK_3:
      handle_BANK_3();
 8002164:	f7ff fb50 	bl	8001808 <handle_BANK_3>
      break;
 8002168:	e071      	b.n	800224e <main+0x81e>
    case BANK_4:
      handle_BANK_4();
 800216a:	f7ff fb7b 	bl	8001864 <handle_BANK_4>
      break;
 800216e:	e06e      	b.n	800224e <main+0x81e>
    case BANK_5:

      handle_BANK_5();
 8002170:	f7ff fba6 	bl	80018c0 <handle_BANK_5>
      break;
 8002174:	e06b      	b.n	800224e <main+0x81e>
    case BANK_6:
      handle_BANK_6();
 8002176:	f7ff fbd1 	bl	800191c <handle_BANK_6>
      break;
 800217a:	e068      	b.n	800224e <main+0x81e>
    case BANK_7:
      handle_BANK_7();
 800217c:	f7ff fbfc 	bl	8001978 <handle_BANK_7>
      break;
 8002180:	e065      	b.n	800224e <main+0x81e>
    case BANK_8:
      handle_BANK_8();
 8002182:	f7ff fc27 	bl	80019d4 <handle_BANK_8>
      break;
 8002186:	e062      	b.n	800224e <main+0x81e>
    case bypassed:
      currentTimepreset1 = HAL_GetTick();
 8002188:	f002 fd2a 	bl	8004be0 <HAL_GetTick>
 800218c:	4603      	mov	r3, r0
 800218e:	4a31      	ldr	r2, [pc, #196]	@ (8002254 <main+0x824>)
 8002190:	6013      	str	r3, [r2, #0]
      if (currentTimepreset1 - lastBlinkTime >= 600) // 250 ms delay
 8002192:	4b30      	ldr	r3, [pc, #192]	@ (8002254 <main+0x824>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <main+0x828>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80021a0:	d353      	bcc.n	800224a <main+0x81a>
      {
        lastBlinkTime = currentTimepreset1;
 80021a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002254 <main+0x824>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002258 <main+0x828>)
 80021a8:	6013      	str	r3, [r2, #0]
        displayOn = !displayOn; // Toggle display state
 80021aa:	4b2c      	ldr	r3, [pc, #176]	@ (800225c <main+0x82c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f083 0301 	eor.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b25      	ldr	r3, [pc, #148]	@ (800225c <main+0x82c>)
 80021c6:	701a      	strb	r2, [r3, #0]

        if (displayOn)
 80021c8:	4b24      	ldr	r3, [pc, #144]	@ (800225c <main+0x82c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d024      	beq.n	800221a <main+0x7ea>
        {
          static const uint8_t image_unnamed__1__bits[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x8f, 0x07, 0xde, 0xff, 0x00, 0x07, 0xf0, 0x1f, 0xfe, 0xe3, 0xff, 0xf8, 0x1f, 0x00, 0xfc, 0x9f, 0x07, 0xdf, 0xff, 0x81, 0x0f, 0xf8, 0x1f, 0xff, 0xe3, 0xff, 0xf8, 0x3f, 0x00, 0xfc, 0x1f, 0x0f, 0xcf, 0xff, 0x83, 0x0f, 0xf8, 0x1f, 0xff, 0xe1, 0xff, 0xf8, 0x7f, 0x00, 0x1c, 0x3e, 0x9f, 0xc7, 0xc3, 0xc3, 0x1f, 0x78, 0x8c, 0x87, 0xe0, 0x00, 0x38, 0xfc, 0x00, 0x1c, 0x3c, 0xde, 0xc7, 0x83, 0xc3, 0x1f, 0x38, 0x80, 0x07, 0xe0, 0x00, 0x38, 0xf0, 0x01, 0x1c, 0x1c, 0xfe, 0xc3, 0x83, 0xc3, 0x1f, 0x78, 0x80, 0x07, 0xe0, 0x00, 0x38, 0xe0, 0x01, 0x1c, 0x1f, 0xfc, 0xc3, 0xc3, 0xe3, 0x3d, 0xf8, 0x80, 0x1f, 0xe0, 0x7f, 0x38, 0xe0, 0x01, 0xfc, 0x0f, 0xf8, 0xc1, 0xff, 0xe3, 0x3c, 0xf8, 0x07, 0xff, 0xe0, 0x7f, 0x38, 0xc0, 0x01, 0xfc, 0x1f, 0xf8, 0xc0, 0xff, 0xf1, 0x78, 0xf0, 0x1f, 0xfe, 0xe1, 0x7f, 0x38, 0xc0, 0x01, 0xfc, 0x3f, 0xf0, 0xc0, 0xff, 0xf0, 0x78, 0xc0, 0x1f, 0xf8, 0xe3, 0x7f, 0x38, 0xe0, 0x01, 0x1c, 0x3c, 0xf0, 0xc0, 0x03, 0xf0, 0x7f, 0x00, 0x3e, 0xc0, 0xe3, 0x00, 0x38, 0xe0, 0x01, 0x1c, 0x38, 0xf0, 0xc0, 0x03, 0xf8, 0xff, 0x00, 0x3c, 0xc0, 0xe3, 0x00, 0x38, 0xf0, 0x01, 0x1c, 0x3c, 0xf0, 0xc0, 0x03, 0xf8, 0xff, 0x10, 0x3c, 0xc2, 0xe3, 0x00, 0x38, 0xf8, 0x00, 0x1c, 0x3e, 0xf0, 0xc0, 0x03, 0x3c, 0xf0, 0x78, 0x1e, 0xe7, 0xe3, 0xff, 0xf8, 0xff, 0x00, 0xfc, 0x3f, 0xf0, 0xc0, 0x03, 0x3c, 0xe0, 0xfd, 0x9f, 0xff, 0xe3, 0xff, 0xf8, 0x7f, 0x00, 0xfc, 0x1f, 0xf0, 0xc0, 0x03, 0x3c, 0xe0, 0xfd, 0x8f, 0xff, 0xe1, 0xff, 0xf8, 0x3f, 0x00, 0xfc, 0x07, 0xf0, 0xc0, 0x03, 0x1e, 0xc0, 0xf3, 0x07, 0xff, 0xe0, 0xff, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
          u8g2_ClearBuffer(&u8g2);
 80021d0:	4823      	ldr	r0, [pc, #140]	@ (8002260 <main+0x830>)
 80021d2:	f000 fe3b 	bl	8002e4c <u8g2_ClearBuffer>
          u8g2_SetBitmapMode(&u8g2, 1);
 80021d6:	2101      	movs	r1, #1
 80021d8:	4821      	ldr	r0, [pc, #132]	@ (8002260 <main+0x830>)
 80021da:	f000 fd1f 	bl	8002c1c <u8g2_SetBitmapMode>
          u8g2_SetFontMode(&u8g2, 1);
 80021de:	2101      	movs	r1, #1
 80021e0:	481f      	ldr	r0, [pc, #124]	@ (8002260 <main+0x830>)
 80021e2:	f001 fb22 	bl	800382a <u8g2_SetFontMode>

          u8g2_DrawXBM(&u8g2, 7, 20, 114, 32, image_unnamed__1__bits);
 80021e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <main+0x834>)
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2320      	movs	r3, #32
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2372      	movs	r3, #114	@ 0x72
 80021f0:	2214      	movs	r2, #20
 80021f2:	2107      	movs	r1, #7
 80021f4:	481a      	ldr	r0, [pc, #104]	@ (8002260 <main+0x830>)
 80021f6:	f000 fdb0 	bl	8002d5a <u8g2_DrawXBM>

          u8g2_SetDrawColor(&u8g2, 2);
 80021fa:	2102      	movs	r1, #2
 80021fc:	4818      	ldr	r0, [pc, #96]	@ (8002260 <main+0x830>)
 80021fe:	f001 fdb5 	bl	8003d6c <u8g2_SetDrawColor>
          u8g2_DrawBox(&u8g2, 0, 1, 128, 64);
 8002202:	2340      	movs	r3, #64	@ 0x40
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	2201      	movs	r2, #1
 800220a:	2100      	movs	r1, #0
 800220c:	4814      	ldr	r0, [pc, #80]	@ (8002260 <main+0x830>)
 800220e:	f000 fde7 	bl	8002de0 <u8g2_DrawBox>

          u8g2_SendBuffer(&u8g2);
 8002212:	4813      	ldr	r0, [pc, #76]	@ (8002260 <main+0x830>)
 8002214:	f000 fe8d 	bl	8002f32 <u8g2_SendBuffer>
          u8g2_DrawXBM(&u8g2, 7, 20, 114, 32, image_unnamed__1__bits);

          u8g2_SendBuffer(&u8g2);
        }
      }
      break;
 8002218:	e017      	b.n	800224a <main+0x81a>
          u8g2_ClearBuffer(&u8g2);
 800221a:	4811      	ldr	r0, [pc, #68]	@ (8002260 <main+0x830>)
 800221c:	f000 fe16 	bl	8002e4c <u8g2_ClearBuffer>
          u8g2_SetBitmapMode(&u8g2, 1);
 8002220:	2101      	movs	r1, #1
 8002222:	480f      	ldr	r0, [pc, #60]	@ (8002260 <main+0x830>)
 8002224:	f000 fcfa 	bl	8002c1c <u8g2_SetBitmapMode>
          u8g2_SetFontMode(&u8g2, 1);
 8002228:	2101      	movs	r1, #1
 800222a:	480d      	ldr	r0, [pc, #52]	@ (8002260 <main+0x830>)
 800222c:	f001 fafd 	bl	800382a <u8g2_SetFontMode>
          u8g2_DrawXBM(&u8g2, 7, 20, 114, 32, image_unnamed__1__bits);
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <main+0x838>)
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2320      	movs	r3, #32
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2372      	movs	r3, #114	@ 0x72
 800223a:	2214      	movs	r2, #20
 800223c:	2107      	movs	r1, #7
 800223e:	4808      	ldr	r0, [pc, #32]	@ (8002260 <main+0x830>)
 8002240:	f000 fd8b 	bl	8002d5a <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 8002244:	4806      	ldr	r0, [pc, #24]	@ (8002260 <main+0x830>)
 8002246:	f000 fe74 	bl	8002f32 <u8g2_SendBuffer>
      break;
 800224a:	bf00      	nop
 800224c:	e478      	b.n	8001b40 <main+0x110>
    encoder_position1 = (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 800224e:	e477      	b.n	8001b40 <main+0x110>
 8002250:	2000016c 	.word	0x2000016c
 8002254:	20000164 	.word	0x20000164
 8002258:	20000160 	.word	0x20000160
 800225c:	20000169 	.word	0x20000169
 8002260:	20000188 	.word	0x20000188
 8002264:	08008af4 	.word	0x08008af4
 8002268:	08008cd4 	.word	0x08008cd4

0800226c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	@ 0x40
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0318 	add.w	r3, r7, #24
 8002276:	2228      	movs	r2, #40	@ 0x28
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f004 ffbc 	bl	80071f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800228e:	2301      	movs	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002298:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800229c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800229e:	2301      	movs	r3, #1
 80022a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a2:	2302      	movs	r3, #2
 80022a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80022b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 f980 	bl	80065bc <HAL_RCC_OscConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80022c2:	f000 fb1d 	bl	8002900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022c6:	230f      	movs	r3, #15
 80022c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ca:	2302      	movs	r3, #2
 80022cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fbed 	bl	8006ac0 <HAL_RCC_ClockConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80022ec:	f000 fb08 	bl	8002900 <Error_Handler>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3740      	adds	r7, #64	@ 0x40
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <MX_I2C1_Init+0x50>)
 80022fe:	4a13      	ldr	r2, [pc, #76]	@ (800234c <MX_I2C1_Init+0x54>)
 8002300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <MX_I2C1_Init+0x50>)
 8002304:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <MX_I2C1_Init+0x58>)
 8002306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002308:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <MX_I2C1_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <MX_I2C1_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <MX_I2C1_Init+0x50>)
 8002316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800231a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <MX_I2C1_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <MX_I2C1_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <MX_I2C1_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <MX_I2C1_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	@ (8002348 <MX_I2C1_Init+0x50>)
 8002336:	f002 ff5b 	bl	80051f0 <HAL_I2C_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002340:	f000 fade 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000002c 	.word	0x2000002c
 800234c:	40005400 	.word	0x40005400
 8002350:	00061a80 	.word	0x00061a80

08002354 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	@ 0x30
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	2224      	movs	r2, #36	@ 0x24
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f004 ff48 	bl	80071f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002370:	4b22      	ldr	r3, [pc, #136]	@ (80023fc <MX_TIM1_Init+0xa8>)
 8002372:	4a23      	ldr	r2, [pc, #140]	@ (8002400 <MX_TIM1_Init+0xac>)
 8002374:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002376:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <MX_TIM1_Init+0xa8>)
 8002378:	2200      	movs	r2, #0
 800237a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237c:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <MX_TIM1_Init+0xa8>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002382:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <MX_TIM1_Init+0xa8>)
 8002384:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002388:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238a:	4b1c      	ldr	r3, [pc, #112]	@ (80023fc <MX_TIM1_Init+0xa8>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <MX_TIM1_Init+0xa8>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <MX_TIM1_Init+0xa8>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800239c:	2303      	movs	r3, #3
 800239e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023a4:	2301      	movs	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023b4:	2301      	movs	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	480d      	ldr	r0, [pc, #52]	@ (80023fc <MX_TIM1_Init+0xa8>)
 80023c8:	f004 fcf6 	bl	8006db8 <HAL_TIM_Encoder_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80023d2:	f000 fa95 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4806      	ldr	r0, [pc, #24]	@ (80023fc <MX_TIM1_Init+0xa8>)
 80023e4:	f004 feaa 	bl	800713c <HAL_TIMEx_MasterConfigSynchronization>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023ee:	f000 fa87 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80023f2:	bf00      	nop
 80023f4:	3730      	adds	r7, #48	@ 0x30
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000080 	.word	0x20000080
 8002400:	40012c00 	.word	0x40012c00

08002404 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	@ 0x30
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	2224      	movs	r2, #36	@ 0x24
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f004 fef0 	bl	80071f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002420:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 8002422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002428:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 800242a:	2200      	movs	r2, #0
 800242c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002434:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 8002436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800243a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243c:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002442:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002448:	2303      	movs	r3, #3
 800244a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002450:	2301      	movs	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8002458:	2302      	movs	r3, #2
 800245a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002460:	2301      	movs	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8002468:	2302      	movs	r3, #2
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	4619      	mov	r1, r3
 8002472:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 8002474:	f004 fca0 	bl	8006db8 <HAL_TIM_Encoder_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800247e:	f000 fa3f 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	@ (80024a8 <MX_TIM2_Init+0xa4>)
 8002490:	f004 fe54 	bl	800713c <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800249a:	f000 fa31 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 800249e:	bf00      	nop
 80024a0:	3730      	adds	r7, #48	@ 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200000c8 	.word	0x200000c8

080024ac <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	@ 0x30
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	2224      	movs	r2, #36	@ 0x24
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 fe9c 	bl	80071f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c8:	4b20      	ldr	r3, [pc, #128]	@ (800254c <MX_TIM3_Init+0xa0>)
 80024ca:	4a21      	ldr	r2, [pc, #132]	@ (8002550 <MX_TIM3_Init+0xa4>)
 80024cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <MX_TIM3_Init+0xa0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <MX_TIM3_Init+0xa0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024da:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <MX_TIM3_Init+0xa0>)
 80024dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <MX_TIM3_Init+0xa0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <MX_TIM3_Init+0xa0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ee:	2303      	movs	r3, #3
 80024f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024f6:	2301      	movs	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80024fe:	2302      	movs	r3, #2
 8002500:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002506:	2301      	movs	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 800250e:	2302      	movs	r3, #2
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	4619      	mov	r1, r3
 8002518:	480c      	ldr	r0, [pc, #48]	@ (800254c <MX_TIM3_Init+0xa0>)
 800251a:	f004 fc4d 	bl	8006db8 <HAL_TIM_Encoder_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002524:	f000 f9ec 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4805      	ldr	r0, [pc, #20]	@ (800254c <MX_TIM3_Init+0xa0>)
 8002536:	f004 fe01 	bl	800713c <HAL_TIMEx_MasterConfigSynchronization>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002540:	f000 f9de 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8002544:	bf00      	nop
 8002546:	3730      	adds	r7, #48	@ 0x30
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000110 	.word	0x20000110
 8002550:	40000400 	.word	0x40000400

08002554 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002568:	4b58      	ldr	r3, [pc, #352]	@ (80026cc <MX_GPIO_Init+0x178>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a57      	ldr	r2, [pc, #348]	@ (80026cc <MX_GPIO_Init+0x178>)
 800256e:	f043 0310 	orr.w	r3, r3, #16
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b55      	ldr	r3, [pc, #340]	@ (80026cc <MX_GPIO_Init+0x178>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002580:	4b52      	ldr	r3, [pc, #328]	@ (80026cc <MX_GPIO_Init+0x178>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a51      	ldr	r2, [pc, #324]	@ (80026cc <MX_GPIO_Init+0x178>)
 8002586:	f043 0320 	orr.w	r3, r3, #32
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b4f      	ldr	r3, [pc, #316]	@ (80026cc <MX_GPIO_Init+0x178>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	4b4c      	ldr	r3, [pc, #304]	@ (80026cc <MX_GPIO_Init+0x178>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a4b      	ldr	r2, [pc, #300]	@ (80026cc <MX_GPIO_Init+0x178>)
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6193      	str	r3, [r2, #24]
 80025a4:	4b49      	ldr	r3, [pc, #292]	@ (80026cc <MX_GPIO_Init+0x178>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	4b46      	ldr	r3, [pc, #280]	@ (80026cc <MX_GPIO_Init+0x178>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a45      	ldr	r2, [pc, #276]	@ (80026cc <MX_GPIO_Init+0x178>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b43      	ldr	r3, [pc, #268]	@ (80026cc <MX_GPIO_Init+0x178>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025ce:	4840      	ldr	r0, [pc, #256]	@ (80026d0 <MX_GPIO_Init+0x17c>)
 80025d0:	f002 fddd 	bl	800518e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GP_UD_Pin | TP_UD_Pin | LP_UD_Pin | LP_INC_Pin | TP_INC_Pin | GP_INC_Pin | CS_ALL_Pin, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	f64f 4102 	movw	r1, #64514	@ 0xfc02
 80025da:	483e      	ldr	r0, [pc, #248]	@ (80026d4 <MX_GPIO_Init+0x180>)
 80025dc:	f002 fdd7 	bl	800518e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	4619      	mov	r1, r3
 80025f8:	4835      	ldr	r0, [pc, #212]	@ (80026d0 <MX_GPIO_Init+0x17c>)
 80025fa:	f002 fc2d 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_EXTI_Pin Button2_EXTI_Pin Button3_EXTI_Pin */
  GPIO_InitStruct.Pin = Button1_EXTI_Pin | Button2_EXTI_Pin | Button3_EXTI_Pin;
 80025fe:	2338      	movs	r3, #56	@ 0x38
 8002600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002602:	4b35      	ldr	r3, [pc, #212]	@ (80026d8 <MX_GPIO_Init+0x184>)
 8002604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	4619      	mov	r1, r3
 8002610:	4832      	ldr	r0, [pc, #200]	@ (80026dc <MX_GPIO_Init+0x188>)
 8002612:	f002 fc21 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_3PDT_EXTI_Pin */
  GPIO_InitStruct.Pin = SW_3PDT_EXTI_Pin;
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800261a:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <MX_GPIO_Init+0x18c>)
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800261e:	2302      	movs	r3, #2
 8002620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_3PDT_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4619      	mov	r1, r3
 8002628:	482c      	ldr	r0, [pc, #176]	@ (80026dc <MX_GPIO_Init+0x188>)
 800262a:	f002 fc15 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : GP_UD_Pin TP_UD_Pin LP_UD_Pin CS_ALL_Pin */
  GPIO_InitStruct.Pin = GP_UD_Pin | TP_UD_Pin | LP_UD_Pin | CS_ALL_Pin;
 800262e:	f648 4302 	movw	r3, #35842	@ 0x8c02
 8002632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002638:	2301      	movs	r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2302      	movs	r3, #2
 800263e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4619      	mov	r1, r3
 8002646:	4823      	ldr	r0, [pc, #140]	@ (80026d4 <MX_GPIO_Init+0x180>)
 8002648:	f002 fc06 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LP_INC_Pin TP_INC_Pin GP_INC_Pin */
  GPIO_InitStruct.Pin = LP_INC_Pin | TP_INC_Pin | GP_INC_Pin;
 800264c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002652:	2301      	movs	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002656:	2301      	movs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265a:	2303      	movs	r3, #3
 800265c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	4619      	mov	r1, r3
 8002664:	481b      	ldr	r0, [pc, #108]	@ (80026d4 <MX_GPIO_Init+0x180>)
 8002666:	f002 fbf7 	bl	8004e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : GAIN_EXTI_Pin TONE_EXTI_Pin LEVEL_EXTI_Pin */
  GPIO_InitStruct.Pin = GAIN_EXTI_Pin | TONE_EXTI_Pin | LEVEL_EXTI_Pin;
 800266a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800266e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <MX_GPIO_Init+0x184>)
 8002672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002674:	2301      	movs	r3, #1
 8002676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4619      	mov	r1, r3
 800267e:	4817      	ldr	r0, [pc, #92]	@ (80026dc <MX_GPIO_Init+0x188>)
 8002680:	f002 fbea 	bl	8004e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	2009      	movs	r0, #9
 800268a:	f002 fbae 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800268e:	2009      	movs	r0, #9
 8002690:	f002 fbc7 	bl	8004e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	200a      	movs	r0, #10
 800269a:	f002 fba6 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800269e:	200a      	movs	r0, #10
 80026a0:	f002 fbbf 	bl	8004e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	2017      	movs	r0, #23
 80026aa:	f002 fb9e 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026ae:	2017      	movs	r0, #23
 80026b0:	f002 fbb7 	bl	8004e22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	2028      	movs	r0, #40	@ 0x28
 80026ba:	f002 fb96 	bl	8004dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026be:	2028      	movs	r0, #40	@ 0x28
 80026c0:	f002 fbaf 	bl	8004e22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40010c00 	.word	0x40010c00
 80026d8:	10210000 	.word	0x10210000
 80026dc:	40010800 	.word	0x40010800
 80026e0:	10310000 	.word	0x10310000

080026e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  uint32_t current_time = HAL_GetTick();
 80026ee:	f002 fa77 	bl	8004be0 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]
  if ((current_time - last_interrupt_time) < DEBOUNCE_DELAY)
 80026f4:	4b73      	ldr	r3, [pc, #460]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002700:	f0c0 80db 	bcc.w	80028ba <HAL_GPIO_EXTI_Callback+0x1d6>
  {
    return; // Ignore the interrupt if it's within the debounce delay
  }
  last_interrupt_time = current_time;
 8002704:	4a6f      	ldr	r2, [pc, #444]	@ (80028c4 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6013      	str	r3, [r2, #0]

  if (GPIO_Pin == GAIN_EXTI_Pin)
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002710:	d10c      	bne.n	800272c <HAL_GPIO_EXTI_Callback+0x48>
  {
    Preset_Bank_selected = 0;
 8002712:	4b6d      	ldr	r3, [pc, #436]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
    gain_press_count++;
 8002718:	4b6c      	ldr	r3, [pc, #432]	@ (80028cc <HAL_GPIO_EXTI_Callback+0x1e8>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002722:	801a      	strh	r2, [r3, #0]
    currentState = RD_PRST_1;
 8002724:	4b6a      	ldr	r3, [pc, #424]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002726:	220a      	movs	r2, #10
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e0c7      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
  }
  else if (GPIO_Pin == TONE_EXTI_Pin)
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002732:	d10c      	bne.n	800274e <HAL_GPIO_EXTI_Callback+0x6a>
  {
    Preset_Bank_selected = 0;
 8002734:	4b64      	ldr	r3, [pc, #400]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    tone_press_count++;
 800273a:	4b66      	ldr	r3, [pc, #408]	@ (80028d4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b64      	ldr	r3, [pc, #400]	@ (80028d4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002744:	801a      	strh	r2, [r3, #0]
    currentState = RD_PRST_2;
 8002746:	4b62      	ldr	r3, [pc, #392]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002748:	220b      	movs	r2, #11
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e0b6      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
  }
  else if (GPIO_Pin == LEVEL_EXTI_Pin)
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002754:	d10c      	bne.n	8002770 <HAL_GPIO_EXTI_Callback+0x8c>
  {
    Preset_Bank_selected = 0;
 8002756:	4b5c      	ldr	r3, [pc, #368]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    level_press_count++;
 800275c:	4b5e      	ldr	r3, [pc, #376]	@ (80028d8 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b5c      	ldr	r3, [pc, #368]	@ (80028d8 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002766:	801a      	strh	r2, [r3, #0]
    currentState = RD_PRST_3;
 8002768:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800276a:	220c      	movs	r2, #12
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e0a5      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
  }
  else if (GPIO_Pin == Button2_EXTI_Pin)
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b10      	cmp	r3, #16
 8002774:	d136      	bne.n	80027e4 <HAL_GPIO_EXTI_Callback+0x100>
  {
    Preset_Bank_selected = 0;
 8002776:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    button1_press_count++;
 800277c:	4b57      	ldr	r3, [pc, #348]	@ (80028dc <HAL_GPIO_EXTI_Callback+0x1f8>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b55      	ldr	r3, [pc, #340]	@ (80028dc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002788:	801a      	strh	r2, [r3, #0]
    lastStateChangeTime = HAL_GetTick(); // Record the time of the state change
 800278a:	f002 fa29 	bl	8004be0 <HAL_GetTick>
 800278e:	4603      	mov	r3, r0
 8002790:	4a53      	ldr	r2, [pc, #332]	@ (80028e0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8002792:	6013      	str	r3, [r2, #0]
    Preset_Bank_selected = 0;
 8002794:	4b4c      	ldr	r3, [pc, #304]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    switch (button1_press_count)
 800279a:	4b50      	ldr	r3, [pc, #320]	@ (80028dc <HAL_GPIO_EXTI_Callback+0x1f8>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d015      	beq.n	80027d0 <HAL_GPIO_EXTI_Callback+0xec>
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	f300 8089 	bgt.w	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <HAL_GPIO_EXTI_Callback+0xd0>
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d007      	beq.n	80027c2 <HAL_GPIO_EXTI_Callback+0xde>
 80027b2:	e083      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
    {
    case 1:
      currentState = prstinit1;
 80027b4:	4b46      	ldr	r3, [pc, #280]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80027b6:	2204      	movs	r2, #4
 80027b8:	701a      	strb	r2, [r3, #0]
      lastState = 1;
 80027ba:	4b4a      	ldr	r3, [pc, #296]	@ (80028e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
      break;
 80027c0:	e07c      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
    case 2:
      currentState = prstinit2;
 80027c2:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80027c4:	2205      	movs	r2, #5
 80027c6:	701a      	strb	r2, [r3, #0]
      lastState = 2;
 80027c8:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
      break;
 80027ce:	e075      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
    case 3:
      currentState = prstinit3;
 80027d0:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80027d2:	2206      	movs	r2, #6
 80027d4:	701a      	strb	r2, [r3, #0]
      lastState = 3;
 80027d6:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_GPIO_EXTI_Callback+0x200>)
 80027d8:	2203      	movs	r2, #3
 80027da:	701a      	strb	r2, [r3, #0]
      button1_press_count = 0;
 80027dc:	4b3f      	ldr	r3, [pc, #252]	@ (80028dc <HAL_GPIO_EXTI_Callback+0x1f8>)
 80027de:	2200      	movs	r2, #0
 80027e0:	801a      	strh	r2, [r3, #0]
      break;
 80027e2:	e06b      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
      // Add more cases as needed
    }
  }
  else if (GPIO_Pin == Button3_EXTI_Pin)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d128      	bne.n	800283c <HAL_GPIO_EXTI_Callback+0x158>
  {
    button2_press_count++;
 80027ea:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <HAL_GPIO_EXTI_Callback+0x204>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b3c      	ldr	r3, [pc, #240]	@ (80028e8 <HAL_GPIO_EXTI_Callback+0x204>)
 80027f6:	801a      	strh	r2, [r3, #0]
    if (Preset_Bank_selected == 0)
 80027f8:	4b33      	ldr	r3, [pc, #204]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <HAL_GPIO_EXTI_Callback+0x14a>
    {
      switch (currentState)
 8002800:	4b33      	ldr	r3, [pc, #204]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d00e      	beq.n	8002826 <HAL_GPIO_EXTI_Callback+0x142>
 8002808:	2b06      	cmp	r3, #6
 800280a:	dc57      	bgt.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
 800280c:	2b04      	cmp	r3, #4
 800280e:	d002      	beq.n	8002816 <HAL_GPIO_EXTI_Callback+0x132>
 8002810:	2b05      	cmp	r3, #5
 8002812:	d004      	beq.n	800281e <HAL_GPIO_EXTI_Callback+0x13a>
 8002814:	e052      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
      {
      case prstinit1:
        currentState = prst_s1;
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002818:	2207      	movs	r2, #7
 800281a:	701a      	strb	r2, [r3, #0]
        break;
 800281c:	e04e      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
      case prstinit2:
        currentState = prst_s2;
 800281e:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002820:	2208      	movs	r2, #8
 8002822:	701a      	strb	r2, [r3, #0]
        break;
 8002824:	e04a      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
      case prstinit3:
        currentState = prst_s3;
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002828:	2209      	movs	r2, #9
 800282a:	701a      	strb	r2, [r3, #0]
        break;
 800282c:	e046      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
      }
    }
    else
    {
      Preset_Bank_selected = 0;
 800282e:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
      currentState = MAIN;
 8002834:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e03f      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
    }
  }
  else if (GPIO_Pin == Button1_EXTI_Pin)
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11a      	bne.n	8002878 <HAL_GPIO_EXTI_Callback+0x194>
  {
    button3_press_count++;
 8002842:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <HAL_GPIO_EXTI_Callback+0x208>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	3301      	adds	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b27      	ldr	r3, [pc, #156]	@ (80028ec <HAL_GPIO_EXTI_Callback+0x208>)
 800284e:	801a      	strh	r2, [r3, #0]
    preset_bank++;
 8002850:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a26      	ldr	r2, [pc, #152]	@ (80028f0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002858:	6013      	str	r3, [r2, #0]
    Preset_Bank_select();
 800285a:	f7fe ff29 	bl	80016b0 <Preset_Bank_select>
    if (preset_bank > 8)
 800285e:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	dd04      	ble.n	8002870 <HAL_GPIO_EXTI_Callback+0x18c>
    {
      preset_bank = 1;
 8002866:	4b22      	ldr	r3, [pc, #136]	@ (80028f0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]
      Preset_Bank_select();
 800286c:	f7fe ff20 	bl	80016b0 <Preset_Bank_select>
    }
    Preset_Bank_selected = 1;
 8002870:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e021      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
  }
  else if (GPIO_Pin == SW_3PDT_EXTI_Pin)
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	2b80      	cmp	r3, #128	@ 0x80
 800287c:	d11e      	bne.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
  {
    Preset_Bank_selected = 0;
 800287e:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
    SW_3PDT_ON++;
 8002884:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_GPIO_EXTI_Callback+0x210>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <HAL_GPIO_EXTI_Callback+0x210>)
 800288e:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(SW_3PDT_EXTI_GPIO_Port, SW_3PDT_EXTI_Pin) == GPIO_PIN_RESET)
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	4819      	ldr	r0, [pc, #100]	@ (80028f8 <HAL_GPIO_EXTI_Callback+0x214>)
 8002894:	f002 fc64 	bl	8005160 <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_GPIO_EXTI_Callback+0x1c8>
    {
      system_locked = 0;
 800289e:	4b17      	ldr	r3, [pc, #92]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x218>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
      currentState = MAIN;
 80028a4:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e007      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
    }
    else
    {
      system_locked = 1;
 80028ac:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <HAL_GPIO_EXTI_Callback+0x218>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
      currentState = bypassed;
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80028b4:	2215      	movs	r2, #21
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_EXTI_Callback+0x1d8>
    return; // Ignore the interrupt if it's within the debounce delay
 80028ba:	bf00      	nop
    }
  }
}
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000158 	.word	0x20000158
 80028c8:	20000174 	.word	0x20000174
 80028cc:	2000017a 	.word	0x2000017a
 80028d0:	2000024e 	.word	0x2000024e
 80028d4:	2000017c 	.word	0x2000017c
 80028d8:	2000017e 	.word	0x2000017e
 80028dc:	20000180 	.word	0x20000180
 80028e0:	2000015c 	.word	0x2000015c
 80028e4:	2000021c 	.word	0x2000021c
 80028e8:	20000182 	.word	0x20000182
 80028ec:	20000184 	.word	0x20000184
 80028f0:	20000170 	.word	0x20000170
 80028f4:	20000178 	.word	0x20000178
 80028f8:	40010800 	.word	0x40010800
 80028fc:	20000168 	.word	0x20000168

08002900 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <Error_Handler+0x8>

0800290c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_MspInit+0x5c>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <HAL_MspInit+0x5c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b12      	ldr	r3, [pc, #72]	@ (8002968 <HAL_MspInit+0x5c>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_MspInit+0x5c>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a0e      	ldr	r2, [pc, #56]	@ (8002968 <HAL_MspInit+0x5c>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <HAL_MspInit+0x5c>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_MspInit+0x60>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4a04      	ldr	r2, [pc, #16]	@ (800296c <HAL_MspInit+0x60>)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000

08002970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	@ 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a00 <HAL_I2C_MspInit+0x90>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d132      	bne.n	80029f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <HAL_I2C_MspInit+0x94>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a1b      	ldr	r2, [pc, #108]	@ (8002a04 <HAL_I2C_MspInit+0x94>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_I2C_MspInit+0x94>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ae:	2312      	movs	r3, #18
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	4619      	mov	r1, r3
 80029bc:	4812      	ldr	r0, [pc, #72]	@ (8002a08 <HAL_I2C_MspInit+0x98>)
 80029be:	f002 fa4b 	bl	8004e58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_I2C_MspInit+0x9c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a0c <HAL_I2C_MspInit+0x9c>)
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_I2C_MspInit+0x94>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_I2C_MspInit+0x94>)
 80029e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029e8:	61d3      	str	r3, [r2, #28]
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_I2C_MspInit+0x94>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029f6:	bf00      	nop
 80029f8:	3728      	adds	r7, #40	@ 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40005400 	.word	0x40005400
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010c00 	.word	0x40010c00
 8002a0c:	40010000 	.word	0x40010000

08002a10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	@ 0x38
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a49      	ldr	r2, [pc, #292]	@ (8002b50 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d125      	bne.n	8002a7c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a30:	4b48      	ldr	r3, [pc, #288]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4a47      	ldr	r2, [pc, #284]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a3a:	6193      	str	r3, [r2, #24]
 8002a3c:	4b45      	ldr	r3, [pc, #276]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a48:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	4a41      	ldr	r2, [pc, #260]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	6193      	str	r3, [r2, #24]
 8002a54:	4b3f      	ldr	r3, [pc, #252]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a72:	4619      	mov	r1, r3
 8002a74:	4838      	ldr	r0, [pc, #224]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x148>)
 8002a76:	f002 f9ef 	bl	8004e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a7a:	e064      	b.n	8002b46 <HAL_TIM_Encoder_MspInit+0x136>
  else if(htim_encoder->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a84:	d124      	bne.n	8002ad0 <HAL_TIM_Encoder_MspInit+0xc0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a86:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a32      	ldr	r2, [pc, #200]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	61d3      	str	r3, [r2, #28]
 8002a92:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	6193      	str	r3, [r2, #24]
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4823      	ldr	r0, [pc, #140]	@ (8002b58 <HAL_TIM_Encoder_MspInit+0x148>)
 8002aca:	f002 f9c5 	bl	8004e58 <HAL_GPIO_Init>
}
 8002ace:	e03a      	b.n	8002b46 <HAL_TIM_Encoder_MspInit+0x136>
  else if(htim_encoder->Instance==TIM3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <HAL_TIM_Encoder_MspInit+0x14c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d135      	bne.n	8002b46 <HAL_TIM_Encoder_MspInit+0x136>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ada:	4b1e      	ldr	r3, [pc, #120]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	4a17      	ldr	r2, [pc, #92]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002af8:	f043 0308 	orr.w	r3, r3, #8
 8002afc:	6193      	str	r3, [r2, #24]
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_TIM_Encoder_MspInit+0x144>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b0a:	2330      	movs	r3, #48	@ 0x30
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4810      	ldr	r0, [pc, #64]	@ (8002b60 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b1e:	f002 f99b 	bl	8004e58 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_TIM_Encoder_MspInit+0x154>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b32:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b40:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <HAL_TIM_Encoder_MspInit+0x154>)
 8002b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b44:	6053      	str	r3, [r2, #4]
}
 8002b46:	bf00      	nop
 8002b48:	3738      	adds	r7, #56	@ 0x38
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40010800 	.word	0x40010800
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40010c00 	.word	0x40010c00
 8002b64:	40010000 	.word	0x40010000

08002b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <NMI_Handler+0x4>

08002b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <HardFault_Handler+0x4>

08002b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <MemManage_Handler+0x4>

08002b80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <BusFault_Handler+0x4>

08002b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <UsageFault_Handler+0x4>

08002b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb8:	f002 f800 	bl	8004bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_EXTI_Pin);
 8002bc4:	2008      	movs	r0, #8
 8002bc6:	f002 fafb 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button2_EXTI_Pin);
 8002bd2:	2010      	movs	r0, #16
 8002bd4:	f002 faf4 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button3_EXTI_Pin);
 8002be0:	2020      	movs	r0, #32
 8002be2:	f002 faed 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3PDT_EXTI_Pin);
 8002be6:	2080      	movs	r0, #128	@ 0x80
 8002be8:	f002 faea 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GAIN_EXTI_Pin);
 8002bf4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002bf8:	f002 fae2 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TONE_EXTI_Pin);
 8002bfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002c00:	f002 fade 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEVEL_EXTI_Pin);
 8002c04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c08:	f002 fada 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b088      	sub	sp, #32
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	4608      	mov	r0, r1
 8002c44:	4611      	mov	r1, r2
 8002c46:	461a      	mov	r2, r3
 8002c48:	4603      	mov	r3, r0
 8002c4a:	817b      	strh	r3, [r7, #10]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	813b      	strh	r3, [r7, #8]
 8002c50:	4613      	mov	r3, r2
 8002c52:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002c5a:	74fb      	strb	r3, [r7, #19]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	74bb      	strb	r3, [r7, #18]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8002c6a:	897a      	ldrh	r2, [r7, #10]
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b298      	uxth	r0, r3
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	4603      	mov	r3, r0
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f001 f8bc 	bl	8003dfe <u8g2_IsIntersection>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d062      	beq.n	8002d52 <u8g2_DrawHXBM+0x118>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8002c90:	e057      	b.n	8002d42 <u8g2_DrawHXBM+0x108>
    uint8_t current_bit = (*b) & mask;
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	747b      	strb	r3, [r7, #17]
      mask = 1;
      b++;
    }
    len--;
#else
    u8g2_uint_t run_length = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	82bb      	strh	r3, [r7, #20]
    // Determine the run length of consecutive bits with the same color
    while (len > 0 && (current_bit == 0 ? (((*b) & mask) == 0) : (((*b) & mask) != 0 )  ))
 8002ca0:	e013      	b.n	8002cca <u8g2_DrawHXBM+0x90>
    {
        run_length++;
 8002ca2:	8abb      	ldrh	r3, [r7, #20]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	82bb      	strh	r3, [r7, #20]
        x++;
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	3301      	adds	r3, #1
 8002cac:	817b      	strh	r3, [r7, #10]
        mask <<= 1;
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	75fb      	strb	r3, [r7, #23]
        if (mask == 0)
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <u8g2_DrawHXBM+0x8a>
        {
            mask = 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
            b++;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	623b      	str	r3, [r7, #32]
        }
        len--;
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	80fb      	strh	r3, [r7, #6]
    while (len > 0 && (current_bit == 0 ? (((*b) & mask) == 0) : (((*b) & mask) != 0 )  ))
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d011      	beq.n	8002cf4 <u8g2_DrawHXBM+0xba>
 8002cd0:	7c7b      	ldrb	r3, [r7, #17]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <u8g2_DrawHXBM+0xac>
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0de      	beq.n	8002ca2 <u8g2_DrawHXBM+0x68>
 8002ce4:	e006      	b.n	8002cf4 <u8g2_DrawHXBM+0xba>
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1d6      	bne.n	8002ca2 <u8g2_DrawHXBM+0x68>
    }
    if (current_bit)
 8002cf4:	7c7b      	ldrb	r3, [r7, #17]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00f      	beq.n	8002d1a <u8g2_DrawHXBM+0xe0>
    {
        u8g2->draw_color = color;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	7cfa      	ldrb	r2, [r7, #19]
 8002cfe:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 8002d02:	897a      	ldrh	r2, [r7, #10]
 8002d04:	8abb      	ldrh	r3, [r7, #20]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	b299      	uxth	r1, r3
 8002d0a:	8abb      	ldrh	r3, [r7, #20]
 8002d0c:	893a      	ldrh	r2, [r7, #8]
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9000      	str	r0, [sp, #0]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 ff6c 	bl	8003bf0 <u8g2_DrawHVLine>
 8002d18:	e013      	b.n	8002d42 <u8g2_DrawHXBM+0x108>
    }
    else if (u8g2->bitmap_transparency == 0)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10e      	bne.n	8002d42 <u8g2_DrawHXBM+0x108>
    {
        u8g2->draw_color = ncolor;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	7cba      	ldrb	r2, [r7, #18]
 8002d28:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
        u8g2_DrawHVLine(u8g2, x - run_length, y, run_length, 0);
 8002d2c:	897a      	ldrh	r2, [r7, #10]
 8002d2e:	8abb      	ldrh	r3, [r7, #20]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	b299      	uxth	r1, r3
 8002d34:	8abb      	ldrh	r3, [r7, #20]
 8002d36:	893a      	ldrh	r2, [r7, #8]
 8002d38:	2000      	movs	r0, #0
 8002d3a:	9000      	str	r0, [sp, #0]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 ff57 	bl	8003bf0 <u8g2_DrawHVLine>
  while(len > 0) {
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1a4      	bne.n	8002c92 <u8g2_DrawHXBM+0x58>
    }
#endif
  }
  u8g2->draw_color = color;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	7cfa      	ldrb	r2, [r7, #19]
 8002d4c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
 8002d50:	e000      	b.n	8002d54 <u8g2_DrawHXBM+0x11a>
    return;
 8002d52:	bf00      	nop
}
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b088      	sub	sp, #32
 8002d5e:	af02      	add	r7, sp, #8
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	4608      	mov	r0, r1
 8002d64:	4611      	mov	r1, r2
 8002d66:	461a      	mov	r2, r3
 8002d68:	4603      	mov	r3, r0
 8002d6a:	817b      	strh	r3, [r7, #10]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	813b      	strh	r3, [r7, #8]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8002d78:	8afb      	ldrh	r3, [r7, #22]
 8002d7a:	3307      	adds	r3, #7
 8002d7c:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002d84:	897a      	ldrh	r2, [r7, #10]
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	4413      	add	r3, r2
 8002d8a:	b298      	uxth	r0, r3
 8002d8c:	893a      	ldrh	r2, [r7, #8]
 8002d8e:	8c3b      	ldrh	r3, [r7, #32]
 8002d90:	4413      	add	r3, r2
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	893a      	ldrh	r2, [r7, #8]
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f001 f82e 	bl	8003dfe <u8g2_IsIntersection>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8002da8:	e012      	b.n	8002dd0 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8002daa:	88f8      	ldrh	r0, [r7, #6]
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	8979      	ldrh	r1, [r7, #10]
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4603      	mov	r3, r0
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ff3f 	bl	8002c3a <u8g2_DrawHXBM>
    bitmap += blen;
 8002dbc:	8afb      	ldrh	r3, [r7, #22]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	4413      	add	r3, r2
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    y++;
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	813b      	strh	r3, [r7, #8]
    h--;
 8002dca:	8c3b      	ldrh	r3, [r7, #32]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8002dd0:	8c3b      	ldrh	r3, [r7, #32]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e9      	bne.n	8002daa <u8g2_DrawXBM+0x50>
 8002dd6:	e000      	b.n	8002dda <u8g2_DrawXBM+0x80>
    return;
 8002dd8:	bf00      	nop
  }
}
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	817b      	strh	r3, [r7, #10]
 8002df2:	460b      	mov	r3, r1
 8002df4:	813b      	strh	r3, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002dfa:	897a      	ldrh	r2, [r7, #10]
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	4413      	add	r3, r2
 8002e00:	b298      	uxth	r0, r3
 8002e02:	893a      	ldrh	r2, [r7, #8]
 8002e04:	8b3b      	ldrh	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	893a      	ldrh	r2, [r7, #8]
 8002e0c:	8979      	ldrh	r1, [r7, #10]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4603      	mov	r3, r0
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fff3 	bl	8003dfe <u8g2_IsIntersection>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d012      	beq.n	8002e44 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8002e1e:	e00d      	b.n	8002e3c <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	893a      	ldrh	r2, [r7, #8]
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	2000      	movs	r0, #0
 8002e28:	9000      	str	r0, [sp, #0]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fee0 	bl	8003bf0 <u8g2_DrawHVLine>
    y++;    
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	3301      	adds	r3, #1
 8002e34:	813b      	strh	r3, [r7, #8]
    h--;
 8002e36:	8b3b      	ldrh	r3, [r7, #24]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8002e3c:	8b3b      	ldrh	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ee      	bne.n	8002e20 <u8g2_DrawBox+0x40>
 8002e42:	e000      	b.n	8002e46 <u8g2_DrawBox+0x66>
    return;
 8002e44:	bf00      	nop
  }
}
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	7c1b      	ldrb	r3, [r3, #16]
 8002e5a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 f9bc 	bl	80071f8 <memset>
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
 8002e94:	4613      	mov	r3, r2
 8002e96:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	7c1b      	ldrb	r3, [r3, #16]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	89ba      	ldrh	r2, [r7, #12]
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8002eb6:	89bb      	ldrh	r3, [r7, #12]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002ebc:	89bb      	ldrh	r3, [r7, #12]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002ec4:	7bf9      	ldrb	r1, [r7, #15]
 8002ec6:	78ba      	ldrb	r2, [r7, #2]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f001 fd39 	bl	8004948 <u8x8_DrawTile>
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ef0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002ef8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	7c5b      	ldrb	r3, [r3, #17]
 8002f00:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8002f02:	7bba      	ldrb	r2, [r7, #14]
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffbd 	bl	8002e88 <u8g2_send_tile_row>
    src_row++;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	3301      	adds	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
 8002f16:	3301      	adds	r3, #1
 8002f18:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	7b7b      	ldrb	r3, [r7, #13]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d203      	bcs.n	8002f2a <u8g2_send_buffer+0x4c>
 8002f22:	7bba      	ldrb	r2, [r7, #14]
 8002f24:	7b3b      	ldrb	r3, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d3eb      	bcc.n	8002f02 <u8g2_send_buffer+0x24>
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffcf 	bl	8002ede <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 fd52 	bl	80049ea <u8x8_RefreshDisplay>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	701a      	strb	r2, [r3, #0]
  return buf;
 8002f5e:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	2000029c 	.word	0x2000029c

08002f70 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8002f86:	490c      	ldr	r1, [pc, #48]	@ (8002fb8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f001 fd8d 	bl	8004aa8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002f8e:	f107 0313 	add.w	r3, r7, #19
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ffdc 	bl	8002f50 <u8g2_m_16_8_f>
 8002f98:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002f9a:	7cfa      	ldrb	r2, [r7, #19]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8002fa2:	6979      	ldr	r1, [r7, #20]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f001 f8ad 	bl	8004104 <u8g2_SetupBuffer>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	080045e9 	.word	0x080045e9
 8002fb8:	08004845 	.word	0x08004845
 8002fbc:	08003f89 	.word	0x08003f89

08002fc0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	81fb      	strh	r3, [r7, #14]
    font++;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3301      	adds	r3, #1
 8003000:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	4413      	add	r3, r2
 8003012:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003014:	89fb      	ldrh	r3, [r7, #14]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800302a:	2100      	movs	r1, #0
 800302c:	6838      	ldr	r0, [r7, #0]
 800302e:	f7ff ffc7 	bl	8002fc0 <u8g2_font_get_byte>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800303a:	2101      	movs	r1, #1
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f7ff ffbf 	bl	8002fc0 <u8g2_font_get_byte>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800304a:	2102      	movs	r1, #2
 800304c:	6838      	ldr	r0, [r7, #0]
 800304e:	f7ff ffb7 	bl	8002fc0 <u8g2_font_get_byte>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800305a:	2103      	movs	r1, #3
 800305c:	6838      	ldr	r0, [r7, #0]
 800305e:	f7ff ffaf 	bl	8002fc0 <u8g2_font_get_byte>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800306a:	2104      	movs	r1, #4
 800306c:	6838      	ldr	r0, [r7, #0]
 800306e:	f7ff ffa7 	bl	8002fc0 <u8g2_font_get_byte>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800307a:	2105      	movs	r1, #5
 800307c:	6838      	ldr	r0, [r7, #0]
 800307e:	f7ff ff9f 	bl	8002fc0 <u8g2_font_get_byte>
 8003082:	4603      	mov	r3, r0
 8003084:	461a      	mov	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800308a:	2106      	movs	r1, #6
 800308c:	6838      	ldr	r0, [r7, #0]
 800308e:	f7ff ff97 	bl	8002fc0 <u8g2_font_get_byte>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800309a:	2107      	movs	r1, #7
 800309c:	6838      	ldr	r0, [r7, #0]
 800309e:	f7ff ff8f 	bl	8002fc0 <u8g2_font_get_byte>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80030aa:	2108      	movs	r1, #8
 80030ac:	6838      	ldr	r0, [r7, #0]
 80030ae:	f7ff ff87 	bl	8002fc0 <u8g2_font_get_byte>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80030ba:	2109      	movs	r1, #9
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f7ff ff7f 	bl	8002fc0 <u8g2_font_get_byte>
 80030c2:	4603      	mov	r3, r0
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80030ca:	210a      	movs	r1, #10
 80030cc:	6838      	ldr	r0, [r7, #0]
 80030ce:	f7ff ff77 	bl	8002fc0 <u8g2_font_get_byte>
 80030d2:	4603      	mov	r3, r0
 80030d4:	b25a      	sxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80030da:	210b      	movs	r1, #11
 80030dc:	6838      	ldr	r0, [r7, #0]
 80030de:	f7ff ff6f 	bl	8002fc0 <u8g2_font_get_byte>
 80030e2:	4603      	mov	r3, r0
 80030e4:	b25a      	sxtb	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80030ea:	210c      	movs	r1, #12
 80030ec:	6838      	ldr	r0, [r7, #0]
 80030ee:	f7ff ff67 	bl	8002fc0 <u8g2_font_get_byte>
 80030f2:	4603      	mov	r3, r0
 80030f4:	b25a      	sxtb	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80030fa:	210d      	movs	r1, #13
 80030fc:	6838      	ldr	r0, [r7, #0]
 80030fe:	f7ff ff5f 	bl	8002fc0 <u8g2_font_get_byte>
 8003102:	4603      	mov	r3, r0
 8003104:	b25a      	sxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800310a:	210e      	movs	r1, #14
 800310c:	6838      	ldr	r0, [r7, #0]
 800310e:	f7ff ff57 	bl	8002fc0 <u8g2_font_get_byte>
 8003112:	4603      	mov	r3, r0
 8003114:	b25a      	sxtb	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800311a:	210f      	movs	r1, #15
 800311c:	6838      	ldr	r0, [r7, #0]
 800311e:	f7ff ff4f 	bl	8002fc0 <u8g2_font_get_byte>
 8003122:	4603      	mov	r3, r0
 8003124:	b25a      	sxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800312a:	2110      	movs	r1, #16
 800312c:	6838      	ldr	r0, [r7, #0]
 800312e:	f7ff ff47 	bl	8002fc0 <u8g2_font_get_byte>
 8003132:	4603      	mov	r3, r0
 8003134:	b25a      	sxtb	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800313a:	2111      	movs	r1, #17
 800313c:	6838      	ldr	r0, [r7, #0]
 800313e:	f7ff ff50 	bl	8002fe2 <u8g2_font_get_word>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800314a:	2113      	movs	r1, #19
 800314c:	6838      	ldr	r0, [r7, #0]
 800314e:	f7ff ff48 	bl	8002fe2 <u8g2_font_get_word>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800315a:	2115      	movs	r1, #21
 800315c:	6838      	ldr	r0, [r7, #0]
 800315e:	f7ff ff40 	bl	8002fe2 <u8g2_font_get_word>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	82da      	strh	r2, [r3, #22]
#endif
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7b1b      	ldrb	r3, [r3, #12]
 8003182:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	7b7b      	ldrb	r3, [r7, #13]
 8003190:	fa42 f303 	asr.w	r3, r2, r3
 8003194:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003196:	7b7b      	ldrb	r3, [r7, #13]
 8003198:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800319a:	7bba      	ldrb	r2, [r7, #14]
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	4413      	add	r3, r2
 80031a0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	2b07      	cmp	r3, #7
 80031a6:	d91a      	bls.n	80031de <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80031a8:	2308      	movs	r3, #8
 80031aa:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80031ac:	7b3a      	ldrb	r2, [r7, #12]
 80031ae:	7b7b      	ldrb	r3, [r7, #13]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	7b3b      	ldrb	r3, [r7, #12]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	b25a      	sxtb	r2, r3
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	3b08      	subs	r3, #8
 80031dc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	4013      	ands	r3, r2
 80031f2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7bba      	ldrb	r2, [r7, #14]
 80031f8:	731a      	strb	r2, [r3, #12]
  return val;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ffab 	bl	8003172 <u8g2_font_decode_get_unsigned_bits>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003220:	2301      	movs	r3, #1
 8003222:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	3b01      	subs	r3, #1
 8003228:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800322a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	7bbb      	ldrb	r3, [r7, #14]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	73fb      	strb	r3, [r7, #15]
  return v;
 8003240:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800324c:	b490      	push	{r4, r7}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	80fb      	strh	r3, [r7, #6]
 800325e:	4603      	mov	r3, r0
 8003260:	717b      	strb	r3, [r7, #5]
 8003262:	460b      	mov	r3, r1
 8003264:	713b      	strb	r3, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d014      	beq.n	800329a <u8g2_add_vector_y+0x4e>
 8003270:	2b02      	cmp	r3, #2
 8003272:	dc19      	bgt.n	80032a8 <u8g2_add_vector_y+0x5c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <u8g2_add_vector_y+0x32>
 8003278:	2b01      	cmp	r3, #1
 800327a:	d007      	beq.n	800328c <u8g2_add_vector_y+0x40>
 800327c:	e014      	b.n	80032a8 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800327e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003282:	b29a      	uxth	r2, r3
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	4413      	add	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
      break;
 800328a:	e014      	b.n	80032b6 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800328c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003290:	b29a      	uxth	r2, r3
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4413      	add	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
      break;
 8003298:	e00d      	b.n	80032b6 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800329a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	80fb      	strh	r3, [r7, #6]
      break;
 80032a6:	e006      	b.n	80032b6 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80032a8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	80fb      	strh	r3, [r7, #6]
      break;      
 80032b4:	bf00      	nop
  }
  return dy;
 80032b6:	88fb      	ldrh	r3, [r7, #6]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc90      	pop	{r4, r7}
 80032c0:	4770      	bx	lr

080032c2 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80032c2:	b490      	push	{r4, r7}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4604      	mov	r4, r0
 80032ca:	4608      	mov	r0, r1
 80032cc:	4611      	mov	r1, r2
 80032ce:	461a      	mov	r2, r3
 80032d0:	4623      	mov	r3, r4
 80032d2:	80fb      	strh	r3, [r7, #6]
 80032d4:	4603      	mov	r3, r0
 80032d6:	717b      	strb	r3, [r7, #5]
 80032d8:	460b      	mov	r3, r1
 80032da:	713b      	strb	r3, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d014      	beq.n	8003310 <u8g2_add_vector_x+0x4e>
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	dc19      	bgt.n	800331e <u8g2_add_vector_x+0x5c>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <u8g2_add_vector_x+0x32>
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d007      	beq.n	8003302 <u8g2_add_vector_x+0x40>
 80032f2:	e014      	b.n	800331e <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80032f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	4413      	add	r3, r2
 80032fe:	80fb      	strh	r3, [r7, #6]
      break;
 8003300:	e014      	b.n	800332c <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8003302:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003306:	b29b      	uxth	r3, r3
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	80fb      	strh	r3, [r7, #6]
      break;
 800330e:	e00d      	b.n	800332c <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8003310:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003314:	b29b      	uxth	r3, r3
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	80fb      	strh	r3, [r7, #6]
      break;
 800331c:	e006      	b.n	800332c <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800331e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003322:	b29a      	uxth	r2, r3
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	4413      	add	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
      break;      
 800332a:	bf00      	nop
  }
  return dx;
 800332c:	88fb      	ldrh	r3, [r7, #6]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bc90      	pop	{r4, r7}
 8003336:	4770      	bx	lr

08003338 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
 8003344:	4613      	mov	r3, r2
 8003346:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3360      	adds	r3, #96	@ 0x60
 800334c:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003358:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003360:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003368:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	7d7b      	ldrb	r3, [r7, #21]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003376:	7dfa      	ldrb	r2, [r7, #23]
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	429a      	cmp	r2, r3
 800337c:	d201      	bcs.n	8003382 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	889b      	ldrh	r3, [r3, #4]
 8003386:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	88db      	ldrh	r3, [r3, #6]
 800338c:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800338e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003392:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	7c1b      	ldrb	r3, [r3, #16]
 800339a:	89b8      	ldrh	r0, [r7, #12]
 800339c:	f7ff ff91 	bl	80032c2 <u8g2_add_vector_x>
 80033a0:	4603      	mov	r3, r0
 80033a2:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80033a4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80033a8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	7c1b      	ldrb	r3, [r3, #16]
 80033b0:	8978      	ldrh	r0, [r7, #10]
 80033b2:	f7ff ff4b 	bl	800324c <u8g2_add_vector_y>
 80033b6:	4603      	mov	r3, r0
 80033b8:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80033ba:	78bb      	ldrb	r3, [r7, #2]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	7b9a      	ldrb	r2, [r3, #14]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80033ca:	7dbb      	ldrb	r3, [r7, #22]
 80033cc:	b298      	uxth	r0, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	7c1b      	ldrb	r3, [r3, #16]
 80033d2:	897a      	ldrh	r2, [r7, #10]
 80033d4:	89b9      	ldrh	r1, [r7, #12]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4603      	mov	r3, r0
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fc08 	bl	8003bf0 <u8g2_DrawHVLine>
 80033e0:	e013      	b.n	800340a <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	7b5b      	ldrb	r3, [r3, #13]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	7bda      	ldrb	r2, [r3, #15]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
      u8g2_DrawHVLine(u8g2, 
 80033f4:	7dbb      	ldrb	r3, [r7, #22]
 80033f6:	b298      	uxth	r0, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	7c1b      	ldrb	r3, [r3, #16]
 80033fc:	897a      	ldrh	r2, [r7, #10]
 80033fe:	89b9      	ldrh	r1, [r7, #12]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4603      	mov	r3, r0
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fbf3 	bl	8003bf0 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800340a:	7dfa      	ldrb	r2, [r7, #23]
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	429a      	cmp	r2, r3
 8003410:	d309      	bcc.n	8003426 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8003412:	7dfa      	ldrb	r2, [r7, #23]
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	757b      	strb	r3, [r7, #21]
    ly++;
 800341e:	7d3b      	ldrb	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003424:	e79d      	b.n	8003362 <u8g2_font_decode_len+0x2a>
      break;
 8003426:	bf00      	nop
  }
  lx += cnt;
 8003428:	7d7a      	ldrb	r2, [r7, #21]
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	4413      	add	r3, r2
 800342e:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003430:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8003438:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	725a      	strb	r2, [r3, #9]
}
 8003440:	bf00      	nop
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3360      	adds	r3, #96	@ 0x60
 8003456:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800346a:	4619      	mov	r1, r3
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff fe80 	bl	8003172 <u8g2_font_decode_get_unsigned_bits>
 8003472:	4603      	mov	r3, r0
 8003474:	b25a      	sxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8003480:	4619      	mov	r1, r3
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff fe75 	bl	8003172 <u8g2_font_decode_get_unsigned_bits>
 8003488:	4603      	mov	r3, r0
 800348a:	b25a      	sxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 2092 	ldrb.w	r2, [r3, #146]	@ 0x92
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	7b9b      	ldrb	r3, [r3, #14]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	73da      	strb	r2, [r3, #15]
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af02      	add	r7, sp, #8
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3360      	adds	r3, #96	@ 0x60
 80034c6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffbc 	bl	8003448 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80034d6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80034de:	4619      	mov	r1, r3
 80034e0:	6978      	ldr	r0, [r7, #20]
 80034e2:	f7ff fe90 	bl	8003206 <u8g2_font_decode_get_signed_bits>
 80034e6:	4603      	mov	r3, r0
 80034e8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80034f0:	4619      	mov	r1, r3
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff fe87 	bl	8003206 <u8g2_font_decode_get_signed_bits>
 80034f8:	4603      	mov	r3, r0
 80034fa:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003502:	4619      	mov	r1, r3
 8003504:	6978      	ldr	r0, [r7, #20]
 8003506:	f7ff fe7e 	bl	8003206 <u8g2_font_decode_get_signed_bits>
 800350a:	4603      	mov	r3, r0
 800350c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f340 80d7 	ble.w	80036c8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	8898      	ldrh	r0, [r3, #4]
 800351e:	7cfa      	ldrb	r2, [r7, #19]
 8003520:	7c7b      	ldrb	r3, [r7, #17]
 8003522:	4413      	add	r3, r2
 8003524:	b2db      	uxtb	r3, r3
 8003526:	425b      	negs	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	b25a      	sxtb	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	7c1b      	ldrb	r3, [r3, #16]
 8003530:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003534:	f7ff fec5 	bl	80032c2 <u8g2_add_vector_x>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	88d8      	ldrh	r0, [r3, #6]
 8003544:	7cfa      	ldrb	r2, [r7, #19]
 8003546:	7c7b      	ldrb	r3, [r7, #17]
 8003548:	4413      	add	r3, r2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	425b      	negs	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	b25a      	sxtb	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	7c1b      	ldrb	r3, [r3, #16]
 8003556:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800355a:	f7ff fe77 	bl	800324c <u8g2_add_vector_y>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	889b      	ldrh	r3, [r3, #4]
 800356a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	88db      	ldrh	r3, [r3, #6]
 8003570:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8003572:	8bfb      	ldrh	r3, [r7, #30]
 8003574:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8003576:	8b7b      	ldrh	r3, [r7, #26]
 8003578:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	7c1b      	ldrb	r3, [r3, #16]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d85a      	bhi.n	8003638 <u8g2_font_decode_glyph+0x180>
 8003582:	a201      	add	r2, pc, #4	@ (adr r2, 8003588 <u8g2_font_decode_glyph+0xd0>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	08003599 	.word	0x08003599
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035dd 	.word	0x080035dd
 8003594:	08003611 	.word	0x08003611
      {
	case 0:
	    x1 += decode->glyph_width;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	8bbb      	ldrh	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80035a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	8b3b      	ldrh	r3, [r7, #24]
 80035ae:	4413      	add	r3, r2
 80035b0:	833b      	strh	r3, [r7, #24]
	    break;
 80035b2:	e041      	b.n	8003638 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80035b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8bfa      	ldrh	r2, [r7, #30]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80035c0:	8bfb      	ldrh	r3, [r7, #30]
 80035c2:	3301      	adds	r3, #1
 80035c4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80035c6:	8bbb      	ldrh	r3, [r7, #28]
 80035c8:	3301      	adds	r3, #1
 80035ca:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	8b3b      	ldrh	r3, [r7, #24]
 80035d6:	4413      	add	r3, r2
 80035d8:	833b      	strh	r3, [r7, #24]
	    break;
 80035da:	e02d      	b.n	8003638 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	8bfa      	ldrh	r2, [r7, #30]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80035ea:	8bfb      	ldrh	r3, [r7, #30]
 80035ec:	3301      	adds	r3, #1
 80035ee:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80035f0:	8bbb      	ldrh	r3, [r7, #28]
 80035f2:	3301      	adds	r3, #1
 80035f4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80035f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	8b7a      	ldrh	r2, [r7, #26]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003602:	8b7b      	ldrh	r3, [r7, #26]
 8003604:	3301      	adds	r3, #1
 8003606:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003608:	8b3b      	ldrh	r3, [r7, #24]
 800360a:	3301      	adds	r3, #1
 800360c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800360e:	e013      	b.n	8003638 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8003610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003614:	b29a      	uxth	r2, r3
 8003616:	8bbb      	ldrh	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003622:	b29b      	uxth	r3, r3
 8003624:	8b7a      	ldrh	r2, [r7, #26]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800362a:	8b7b      	ldrh	r3, [r7, #26]
 800362c:	3301      	adds	r3, #1
 800362e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003630:	8b3b      	ldrh	r3, [r7, #24]
 8003632:	3301      	adds	r3, #1
 8003634:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003636:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003638:	8bb8      	ldrh	r0, [r7, #28]
 800363a:	8b7a      	ldrh	r2, [r7, #26]
 800363c:	8bf9      	ldrh	r1, [r7, #30]
 800363e:	8b3b      	ldrh	r3, [r7, #24]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4603      	mov	r3, r0
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fbda 	bl	8003dfe <u8g2_IsIntersection>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <u8g2_font_decode_glyph+0x19e>
	return d;
 8003650:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003654:	e03a      	b.n	80036cc <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2200      	movs	r2, #0
 8003660:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003668:	4619      	mov	r1, r3
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff fd81 	bl	8003172 <u8g2_font_decode_get_unsigned_bits>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 800367a:	4619      	mov	r1, r3
 800367c:	6978      	ldr	r0, [r7, #20]
 800367e:	f7ff fd78 	bl	8003172 <u8g2_font_decode_get_unsigned_bits>
 8003682:	4603      	mov	r3, r0
 8003684:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2200      	movs	r2, #0
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fe53 	bl	8003338 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003692:	7bbb      	ldrb	r3, [r7, #14]
 8003694:	2201      	movs	r2, #1
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe4d 	bl	8003338 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800369e:	2101      	movs	r1, #1
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	f7ff fd66 	bl	8003172 <u8g2_font_decode_get_unsigned_bits>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ec      	bne.n	8003686 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80036b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	dd00      	ble.n	80036bc <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80036ba:	e7d2      	b.n	8003662 <u8g2_font_decode_glyph+0x1aa>
	break;
 80036bc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	7b9a      	ldrb	r2, [r3, #14]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  }
  return d;
 80036c8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3317      	adds	r3, #23
 80036ea:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	2bff      	cmp	r3, #255	@ 0xff
 80036f0:	d82a      	bhi.n	8003748 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	2b60      	cmp	r3, #96	@ 0x60
 80036f6:	d907      	bls.n	8003708 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80036fe:	461a      	mov	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e009      	b.n	800371c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	2b40      	cmp	r3, #64	@ 0x40
 800370c:	d906      	bls.n	800371c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8003714:	461a      	mov	r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4413      	add	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04e      	beq.n	80037c4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	4293      	cmp	r3, r2
 8003730:	d102      	bne.n	8003738 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3302      	adds	r3, #2
 8003736:	e049      	b.n	80037cc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3301      	adds	r3, #1
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4413      	add	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003746:	e7e9      	b.n	800371c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800374e:	461a      	mov	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4413      	add	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800375a:	2100      	movs	r1, #0
 800375c:	6938      	ldr	r0, [r7, #16]
 800375e:	f7ff fc40 	bl	8002fe2 <u8g2_font_get_word>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4413      	add	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800376c:	2102      	movs	r1, #2
 800376e:	6938      	ldr	r0, [r7, #16]
 8003770:	f7ff fc37 	bl	8002fe2 <u8g2_font_get_word>
 8003774:	4603      	mov	r3, r0
 8003776:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	3304      	adds	r3, #4
 800377c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800377e:	89fa      	ldrh	r2, [r7, #14]
 8003780:	887b      	ldrh	r3, [r7, #2]
 8003782:	429a      	cmp	r2, r3
 8003784:	d3e9      	bcc.n	800375a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3301      	adds	r3, #1
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	89fb      	ldrh	r3, [r7, #14]
 800379c:	4313      	orrs	r3, r2
 800379e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80037a6:	89fa      	ldrh	r2, [r7, #14]
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d102      	bne.n	80037b4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3303      	adds	r3, #3
 80037b2:	e00b      	b.n	80037cc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3302      	adds	r3, #2
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4413      	add	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80037c2:	e7e0      	b.n	8003786 <u8g2_font_get_glyph_data+0xb2>
	break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <u8g2_font_get_glyph_data+0xf6>
	break;
 80037c8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	817b      	strh	r3, [r7, #10]
 80037e6:	460b      	mov	r3, r1
 80037e8:	813b      	strh	r3, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	897a      	ldrh	r2, [r7, #10]
 80037f6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  u8g2->font_decode.target_y = y;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	4619      	mov	r1, r3
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff ff64 	bl	80036d4 <u8g2_font_get_glyph_data>
 800380c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff fe4e 	bl	80034b8 <u8g2_font_decode_glyph>
 800381c:	4603      	mov	r3, r0
 800381e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003820:	8afb      	ldrh	r3, [r7, #22]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	460b      	mov	r3, r1
 800385c:	813b      	strh	r3, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003868:	2b03      	cmp	r3, #3
 800386a:	d833      	bhi.n	80038d4 <u8g2_DrawGlyph+0x8c>
 800386c:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <u8g2_DrawGlyph+0x2c>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003885 	.word	0x08003885
 8003878:	08003899 	.word	0x08003899
 800387c:	080038ad 	.word	0x080038ad
 8003880:	080038c1 	.word	0x080038c1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	4798      	blx	r3
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	4413      	add	r3, r2
 8003894:	813b      	strh	r3, [r7, #8]
      break;
 8003896:	e01d      	b.n	80038d4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	4798      	blx	r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	897b      	ldrh	r3, [r7, #10]
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	817b      	strh	r3, [r7, #10]
      break;
 80038aa:	e013      	b.n	80038d4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	4798      	blx	r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	461a      	mov	r2, r3
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	813b      	strh	r3, [r7, #8]
      break;
 80038be:	e009      	b.n	80038d4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	4798      	blx	r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	897b      	ldrh	r3, [r7, #10]
 80038ce:	4413      	add	r3, r2
 80038d0:	817b      	strh	r3, [r7, #10]
      break;
 80038d2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	893a      	ldrh	r2, [r7, #8]
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ff7a 	bl	80037d4 <u8g2_font_draw_glyph>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop

080038ec <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	4613      	mov	r3, r2
 80038fc:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fd45 	bl	800438e <u8x8_utf8_init>
  sum = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	4611      	mov	r1, r2
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	4798      	blx	r3
 8003916:	4603      	mov	r3, r0
 8003918:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800391a:	8abb      	ldrh	r3, [r7, #20]
 800391c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003920:	4293      	cmp	r3, r2
 8003922:	d038      	beq.n	8003996 <u8g2_draw_string+0xaa>
      break;
    str++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3301      	adds	r3, #1
 8003928:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800392a:	8abb      	ldrh	r3, [r7, #20]
 800392c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003930:	4293      	cmp	r3, r2
 8003932:	d0e9      	beq.n	8003908 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003934:	8abb      	ldrh	r3, [r7, #20]
 8003936:	893a      	ldrh	r2, [r7, #8]
 8003938:	8979      	ldrh	r1, [r7, #10]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff ff84 	bl	8003848 <u8g2_DrawGlyph>
 8003940:	4603      	mov	r3, r0
 8003942:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800394a:	2b03      	cmp	r3, #3
 800394c:	d81e      	bhi.n	800398c <u8g2_draw_string+0xa0>
 800394e:	a201      	add	r2, pc, #4	@ (adr r2, 8003954 <u8g2_draw_string+0x68>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003965 	.word	0x08003965
 8003958:	0800396f 	.word	0x0800396f
 800395c:	08003979 	.word	0x08003979
 8003960:	08003983 	.word	0x08003983
      {
	case 0:
	  x += delta;
 8003964:	897a      	ldrh	r2, [r7, #10]
 8003966:	8a7b      	ldrh	r3, [r7, #18]
 8003968:	4413      	add	r3, r2
 800396a:	817b      	strh	r3, [r7, #10]
	  break;
 800396c:	e00e      	b.n	800398c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800396e:	893a      	ldrh	r2, [r7, #8]
 8003970:	8a7b      	ldrh	r3, [r7, #18]
 8003972:	4413      	add	r3, r2
 8003974:	813b      	strh	r3, [r7, #8]
	  break;
 8003976:	e009      	b.n	800398c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8003978:	897a      	ldrh	r2, [r7, #10]
 800397a:	8a7b      	ldrh	r3, [r7, #18]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	817b      	strh	r3, [r7, #10]
	  break;
 8003980:	e004      	b.n	800398c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8003982:	893a      	ldrh	r2, [r7, #8]
 8003984:	8a7b      	ldrh	r3, [r7, #18]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	813b      	strh	r3, [r7, #8]
	  break;
 800398a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800398c:	8afa      	ldrh	r2, [r7, #22]
 800398e:	8a7b      	ldrh	r3, [r7, #18]
 8003990:	4413      	add	r3, r2
 8003992:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003994:	e7b8      	b.n	8003908 <u8g2_draw_string+0x1c>
      break;
 8003996:	bf00      	nop
    }
  }
  return sum;
 8003998:	8afb      	ldrh	r3, [r7, #22]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop

080039a4 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	4613      	mov	r3, r2
 80039b4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a06      	ldr	r2, [pc, #24]	@ (80039d4 <u8g2_DrawStr+0x30>)
 80039ba:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80039bc:	893a      	ldrh	r2, [r7, #8]
 80039be:	8979      	ldrh	r1, [r7, #10]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff ff92 	bl	80038ec <u8g2_draw_string>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	080043a9 	.word	0x080043a9

080039d8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d05d      	beq.n	8003aa4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f993 2081 	ldrsb.w	r2, [r3, #129]	@ 0x81
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f993 2082 	ldrsb.w	r2, [r3, #130]	@ 0x82
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d04d      	beq.n	8003aa6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d11c      	bne.n	8003a4e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f993 208e 	ldrsb.w	r2, [r3, #142]	@ 0x8e
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f993 3083 	ldrsb.w	r3, [r3, #131]	@ 0x83
 8003a20:	429a      	cmp	r2, r3
 8003a22:	da05      	bge.n	8003a30 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f993 2083 	ldrsb.w	r2, [r3, #131]	@ 0x83
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f993 3084 	ldrsb.w	r3, [r3, #132]	@ 0x84
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	dd32      	ble.n	8003aa6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f993 2084 	ldrsb.w	r2, [r3, #132]	@ 0x84
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8003a4c:	e02b      	b.n	8003aa6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f993 308e 	ldrsb.w	r3, [r3, #142]	@ 0x8e
 8003a54:	461a      	mov	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8003a64:	440b      	add	r3, r1
 8003a66:	429a      	cmp	r2, r3
 8003a68:	da0d      	bge.n	8003a86 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f993 307e 	ldrsb.w	r3, [r3, #126]	@ 0x7e
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	b25a      	sxtb	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f993 208f 	ldrsb.w	r2, [r3, #143]	@ 0x8f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f993 3080 	ldrsb.w	r3, [r3, #128]	@ 0x80
 8003a92:	429a      	cmp	r2, r3
 8003a94:	dd07      	ble.n	8003aa6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f993 2080 	ldrsb.w	r2, [r3, #128]	@ 0x80
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
 8003aa2:	e000      	b.n	8003aa6 <u8g2_UpdateRefHeight+0xce>
    return;
 8003aa4:	bf00      	nop
  }  
}
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  return 0;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr
	...

08003ac4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a03      	ldr	r2, [pc, #12]	@ (8003adc <u8g2_SetFontPosBaseline+0x18>)
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	08003aaf 	.word	0x08003aaf

08003ae0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d00b      	beq.n	8003b0c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3374      	adds	r3, #116	@ 0x74
 8003afe:	6839      	ldr	r1, [r7, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fa8d 	bl	8003020 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ff66 	bl	80039d8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	460b      	mov	r3, r1
 8003b24:	80fb      	strh	r3, [r7, #6]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003b30:	8afb      	ldrh	r3, [r7, #22]
 8003b32:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	881a      	ldrh	r2, [r3, #0]
 8003b38:	8abb      	ldrh	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003b3e:	8afa      	ldrh	r2, [r7, #22]
 8003b40:	8abb      	ldrh	r3, [r7, #20]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d90b      	bls.n	8003b5e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003b46:	8afa      	ldrh	r2, [r7, #22]
 8003b48:	88bb      	ldrh	r3, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d205      	bcs.n	8003b5a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003b4e:	88bb      	ldrh	r3, [r7, #4]
 8003b50:	82bb      	strh	r3, [r7, #20]
      b--;
 8003b52:	8abb      	ldrh	r3, [r7, #20]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	82bb      	strh	r3, [r7, #20]
 8003b58:	e001      	b.n	8003b5e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003b5e:	8afa      	ldrh	r2, [r7, #22]
 8003b60:	88bb      	ldrh	r3, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d301      	bcc.n	8003b6a <u8g2_clip_intersection2+0x56>
    return 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e01c      	b.n	8003ba4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003b6a:	8aba      	ldrh	r2, [r7, #20]
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d801      	bhi.n	8003b76 <u8g2_clip_intersection2+0x62>
    return 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e016      	b.n	8003ba4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003b76:	8afa      	ldrh	r2, [r7, #22]
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d201      	bcs.n	8003b82 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003b82:	8aba      	ldrh	r2, [r7, #20]
 8003b84:	88bb      	ldrh	r3, [r7, #4]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d901      	bls.n	8003b8e <u8g2_clip_intersection2+0x7a>
    b = d;
 8003b8a:	88bb      	ldrh	r3, [r7, #4]
 8003b8c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8afa      	ldrh	r2, [r7, #22]
 8003b92:	801a      	strh	r2, [r3, #0]
  b -= a;
 8003b94:	8aba      	ldrh	r2, [r7, #20]
 8003b96:	8afb      	ldrh	r3, [r7, #22]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	8aba      	ldrh	r2, [r7, #20]
 8003ba0:	801a      	strh	r2, [r3, #0]
  return 1;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003bae:	b590      	push	{r4, r7, lr}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	4608      	mov	r0, r1
 8003bb8:	4611      	mov	r1, r2
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	817b      	strh	r3, [r7, #10]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	813b      	strh	r3, [r7, #8]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bcc:	893a      	ldrh	r2, [r7, #8]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003bd6:	88f8      	ldrh	r0, [r7, #6]
 8003bd8:	893a      	ldrh	r2, [r7, #8]
 8003bda:	8979      	ldrh	r1, [r7, #10]
 8003bdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4603      	mov	r3, r0
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	47a0      	blx	r4
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd90      	pop	{r4, r7, pc}

08003bf0 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	817b      	strh	r3, [r7, #10]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d075      	beq.n	8003d00 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d072      	beq.n	8003d00 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d91a      	bls.n	8003c56 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003c20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d109      	bne.n	8003c3c <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003c28:	897a      	ldrh	r2, [r7, #10]
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	817b      	strh	r3, [r7, #10]
	  x++;
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	3301      	adds	r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	817b      	strh	r3, [r7, #10]
 8003c3a:	e00c      	b.n	8003c56 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d108      	bne.n	8003c56 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003c44:	893a      	ldrh	r2, [r7, #8]
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	813b      	strh	r3, [r7, #8]
	  y++;
 8003c4e:	893b      	ldrh	r3, [r7, #8]
 8003c50:	3301      	adds	r3, #1
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003c56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003c62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11a      	bne.n	8003ca0 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d83b      	bhi.n	8003cee <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d937      	bls.n	8003cf2 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8003c8e:	1db9      	adds	r1, r7, #6
 8003c90:	f107 000a 	add.w	r0, r7, #10
 8003c94:	f7ff ff3e 	bl	8003b14 <u8g2_clip_intersection2>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11a      	bne.n	8003cd4 <u8g2_DrawHVLine+0xe4>
	  return;
 8003c9e:	e02f      	b.n	8003d00 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8003ca6:	897b      	ldrh	r3, [r7, #10]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d824      	bhi.n	8003cf6 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8003cb2:	897b      	ldrh	r3, [r7, #10]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d920      	bls.n	8003cfa <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8003cc4:	1db9      	adds	r1, r7, #6
 8003cc6:	f107 0008 	add.w	r0, r7, #8
 8003cca:	f7ff ff23 	bl	8003b14 <u8g2_clip_intersection2>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d014      	beq.n	8003cfe <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	689c      	ldr	r4, [r3, #8]
 8003cda:	8979      	ldrh	r1, [r7, #10]
 8003cdc:	893a      	ldrh	r2, [r7, #8]
 8003cde:	88f8      	ldrh	r0, [r7, #6]
 8003ce0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	47a0      	blx	r4
 8003cec:	e008      	b.n	8003d00 <u8g2_DrawHVLine+0x110>
	  return;
 8003cee:	bf00      	nop
 8003cf0:	e006      	b.n	8003d00 <u8g2_DrawHVLine+0x110>
	  return;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <u8g2_DrawHVLine+0x110>
	  return;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <u8g2_DrawHVLine+0x110>
	  return;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <u8g2_DrawHVLine+0x110>
	  return;
 8003cfe:	bf00      	nop
    }
}
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}

08003d06 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af02      	add	r7, sp, #8
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	807b      	strh	r3, [r7, #2]
 8003d12:	4613      	mov	r3, r2
 8003d14:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8003d1c:	883a      	ldrh	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d31a      	bcc.n	8003d58 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8003d28:	883a      	ldrh	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d216      	bcs.n	8003d5c <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d312      	bcc.n	8003d60 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d20e      	bcs.n	8003d64 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003d46:	883a      	ldrh	r2, [r7, #0]
 8003d48:	8879      	ldrh	r1, [r7, #2]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff4d 	bl	8003bf0 <u8g2_DrawHVLine>
 8003d56:	e006      	b.n	8003d66 <u8g2_DrawPixel+0x60>
    return;
 8003d58:	bf00      	nop
 8003d5a:	e004      	b.n	8003d66 <u8g2_DrawPixel+0x60>
    return;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <u8g2_DrawPixel+0x60>
    return;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <u8g2_DrawPixel+0x60>
    return;
 8003d64:	bf00      	nop
}
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  if ( color >= 3 )
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d903      	bls.n	8003d8e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003d98:	b490      	push	{r4, r7}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4604      	mov	r4, r0
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4623      	mov	r3, r4
 8003da8:	80fb      	strh	r3, [r7, #6]
 8003daa:	4603      	mov	r3, r0
 8003dac:	80bb      	strh	r3, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	807b      	strh	r3, [r7, #2]
 8003db2:	4613      	mov	r3, r2
 8003db4:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	88bb      	ldrh	r3, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d20d      	bcs.n	8003dda <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003dbe:	883a      	ldrh	r2, [r7, #0]
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d901      	bls.n	8003dca <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e014      	b.n	8003df4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	883b      	ldrh	r3, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d901      	bls.n	8003dd6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00e      	b.n	8003df4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e00c      	b.n	8003df4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003dda:	883a      	ldrh	r2, [r7, #0]
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d907      	bls.n	8003df2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	883b      	ldrh	r3, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d901      	bls.n	8003dee <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e002      	b.n	8003df4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003df2:	2300      	movs	r3, #0
    }
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc90      	pop	{r4, r7}
 8003dfc:	4770      	bx	lr

08003dfe <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	4608      	mov	r0, r1
 8003e08:	4611      	mov	r1, r2
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	817b      	strh	r3, [r7, #10]
 8003e10:	460b      	mov	r3, r1
 8003e12:	813b      	strh	r3, [r7, #8]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f8b3 104e 	ldrh.w	r1, [r3, #78]	@ 0x4e
 8003e24:	8b3b      	ldrh	r3, [r7, #24]
 8003e26:	893a      	ldrh	r2, [r7, #8]
 8003e28:	f7ff ffb6 	bl	8003d98 <u8g2_is_intersection_decision_tree>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <u8g2_IsIntersection+0x38>
    return 0; 
 8003e32:	2300      	movs	r3, #0
 8003e34:	e00a      	b.n	8003e4c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8b3 0048 	ldrh.w	r0, [r3, #72]	@ 0x48
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	897a      	ldrh	r2, [r7, #10]
 8003e46:	f7ff ffa7 	bl	8003d98 <u8g2_is_intersection_decision_tree>
 8003e4a:	4603      	mov	r3, r0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	4611      	mov	r1, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	817b      	strh	r3, [r7, #10]
 8003e66:	460b      	mov	r3, r1
 8003e68:	813b      	strh	r3, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8003e72:	897a      	ldrh	r2, [r7, #10]
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d904      	bls.n	8003e84 <u8g2_DrawLine+0x30>
 8003e7a:	897a      	ldrh	r2, [r7, #10]
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	837b      	strh	r3, [r7, #26]
 8003e82:	e003      	b.n	8003e8c <u8g2_DrawLine+0x38>
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	897b      	ldrh	r3, [r7, #10]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8003e8c:	893a      	ldrh	r2, [r7, #8]
 8003e8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d904      	bls.n	8003e9e <u8g2_DrawLine+0x4a>
 8003e94:	893a      	ldrh	r2, [r7, #8]
 8003e96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	833b      	strh	r3, [r7, #24]
 8003e9c:	e003      	b.n	8003ea6 <u8g2_DrawLine+0x52>
 8003e9e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 8003ea6:	8b3a      	ldrh	r2, [r7, #24]
 8003ea8:	8b7b      	ldrh	r3, [r7, #26]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d913      	bls.n	8003ed6 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 8003eb2:	8b7b      	ldrh	r3, [r7, #26]
 8003eb4:	823b      	strh	r3, [r7, #16]
 8003eb6:	8b3b      	ldrh	r3, [r7, #24]
 8003eb8:	837b      	strh	r3, [r7, #26]
 8003eba:	8a3b      	ldrh	r3, [r7, #16]
 8003ebc:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 8003ebe:	897b      	ldrh	r3, [r7, #10]
 8003ec0:	823b      	strh	r3, [r7, #16]
 8003ec2:	893b      	ldrh	r3, [r7, #8]
 8003ec4:	817b      	strh	r3, [r7, #10]
 8003ec6:	8a3b      	ldrh	r3, [r7, #16]
 8003ec8:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	823b      	strh	r3, [r7, #16]
 8003ece:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ed0:	80fb      	strh	r3, [r7, #6]
 8003ed2:	8a3b      	ldrh	r3, [r7, #16]
 8003ed4:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  if ( x1 > x2 ) 
 8003ed6:	897a      	ldrh	r2, [r7, #10]
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90b      	bls.n	8003ef6 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	823b      	strh	r3, [r7, #16]
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	817b      	strh	r3, [r7, #10]
 8003ee6:	8a3b      	ldrh	r3, [r7, #16]
 8003ee8:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 8003eea:	893b      	ldrh	r3, [r7, #8]
 8003eec:	823b      	strh	r3, [r7, #16]
 8003eee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ef0:	813b      	strh	r3, [r7, #8]
 8003ef2:	8a3b      	ldrh	r3, [r7, #16]
 8003ef4:	853b      	strh	r3, [r7, #40]	@ 0x28
  }
  err = dx >> 1;
 8003ef6:	8b7b      	ldrh	r3, [r7, #26]
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8003efe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f00:	893b      	ldrh	r3, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d902      	bls.n	8003f0c <u8g2_DrawLine+0xb8>
 8003f06:	2301      	movs	r3, #1
 8003f08:	82bb      	strh	r3, [r7, #20]
 8003f0a:	e002      	b.n	8003f12 <u8g2_DrawLine+0xbe>
 8003f0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f10:	82bb      	strh	r3, [r7, #20]
  y = y1;
 8003f12:	893b      	ldrh	r3, [r7, #8]
 8003f14:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d102      	bne.n	8003f26 <u8g2_DrawLine+0xd2>
    x2--;
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 8003f26:	897b      	ldrh	r3, [r7, #10]
 8003f28:	83fb      	strh	r3, [r7, #30]
 8003f2a:	e024      	b.n	8003f76 <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 8003f32:	8bba      	ldrh	r2, [r7, #28]
 8003f34:	8bfb      	ldrh	r3, [r7, #30]
 8003f36:	4619      	mov	r1, r3
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fee4 	bl	8003d06 <u8g2_DrawPixel>
 8003f3e:	e005      	b.n	8003f4c <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8003f40:	8bfa      	ldrh	r2, [r7, #30]
 8003f42:	8bbb      	ldrh	r3, [r7, #28]
 8003f44:	4619      	mov	r1, r3
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fedd 	bl	8003d06 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 8003f4c:	8afa      	ldrh	r2, [r7, #22]
 8003f4e:	8b3b      	ldrh	r3, [r7, #24]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 8003f56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da08      	bge.n	8003f70 <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 8003f5e:	8aba      	ldrh	r2, [r7, #20]
 8003f60:	8bbb      	ldrh	r3, [r7, #28]
 8003f62:	4413      	add	r3, r2
 8003f64:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 8003f66:	8afa      	ldrh	r2, [r7, #22]
 8003f68:	8b7b      	ldrh	r3, [r7, #26]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 8003f70:	8bfb      	ldrh	r3, [r7, #30]
 8003f72:	3301      	adds	r3, #1
 8003f74:	83fb      	strh	r3, [r7, #30]
 8003f76:	8bfa      	ldrh	r2, [r7, #30]
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d9d6      	bls.n	8003f2c <u8g2_DrawLine+0xd8>
    }
  }
}
 8003f7e:	bf00      	nop
 8003f80:	bf00      	nop
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	@ 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	813b      	strh	r3, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8003fa2:	893b      	ldrh	r3, [r7, #8]
 8003fa4:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003fa6:	7efb      	ldrb	r3, [r7, #27]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8003fb2:	7e3a      	ldrb	r2, [r7, #24]
 8003fb4:	7efb      	ldrb	r3, [r7, #27]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d801      	bhi.n	8003fd2 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003fce:	7e3b      	ldrb	r3, [r7, #24]
 8003fd0:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d001      	beq.n	8003fe0 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003fdc:	7e3b      	ldrb	r3, [r7, #24]
 8003fde:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003fe4:	8afb      	ldrh	r3, [r7, #22]
 8003fe6:	f023 0307 	bic.w	r3, r3, #7
 8003fea:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	7c1b      	ldrb	r3, [r3, #16]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	8afb      	ldrh	r3, [r7, #22]
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004000:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004002:	8afb      	ldrh	r3, [r7, #22]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800400a:	897b      	ldrh	r3, [r7, #10]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004012:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d117      	bne.n	800404a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	7ebb      	ldrb	r3, [r7, #26]
 8004020:	4313      	orrs	r3, r2
 8004022:	b2da      	uxtb	r2, r3
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	7e7b      	ldrb	r3, [r7, #25]
 800402e:	4053      	eors	r3, r2
 8004030:	b2da      	uxtb	r2, r3
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
	len--;
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	3b01      	subs	r3, #1
 8004040:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e8      	bne.n	800401a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004048:	e038      	b.n	80040bc <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	7ebb      	ldrb	r3, [r7, #26]
 8004050:	4313      	orrs	r3, r2
 8004052:	b2da      	uxtb	r2, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	7e7b      	ldrb	r3, [r7, #25]
 800405e:	4053      	eors	r3, r2
 8004060:	b2da      	uxtb	r2, r3
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004066:	7efb      	ldrb	r3, [r7, #27]
 8004068:	3301      	adds	r3, #1
 800406a:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800406c:	7efb      	ldrb	r3, [r7, #27]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	76fb      	strb	r3, [r7, #27]
      len--;
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	3b01      	subs	r3, #1
 8004078:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800407a:	7efb      	ldrb	r3, [r7, #27]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d114      	bne.n	80040aa <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004084:	461a      	mov	r2, r3
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8004092:	2b01      	cmp	r3, #1
 8004094:	d801      	bhi.n	800409a <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8004096:	2301      	movs	r3, #1
 8004098:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d008      	beq.n	80040b6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80040a4:	2301      	movs	r3, #1
 80040a6:	767b      	strb	r3, [r7, #25]
 80040a8:	e005      	b.n	80040b6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80040aa:	7ebb      	ldrb	r3, [r7, #26]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80040b0:	7e7b      	ldrb	r3, [r7, #25]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1c6      	bne.n	800404a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80040bc:	bf00      	nop
 80040be:	3724      	adds	r7, #36	@ 0x24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  u8g2->clip_y0 = 0;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4613      	mov	r3, r2
 8004112:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	79fa      	ldrb	r2, [r7, #7]
 800412a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  u8g2->tile_curr_row = 0;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
  u8g2->bitmap_transparency = 0;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
  u8g2->draw_color = 1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
  u8g2->is_auto_page_clear = 1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
  
  u8g2->cb = u8g2_cb;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ffa9 	bl	80040c6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff fca5 	bl	8003ac4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
#endif
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800419e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80041a0:	89fb      	ldrh	r3, [r7, #14]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	89fa      	ldrh	r2, [r7, #14]
 80041aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	7c1b      	ldrb	r3, [r3, #16]
 80041b0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80041b2:	89fb      	ldrh	r3, [r7, #14]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	89fa      	ldrh	r2, [r7, #14]
 80041bc:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80041c4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80041c6:	89fb      	ldrh	r3, [r7, #14]
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	89fa      	ldrh	r2, [r7, #14]
 80041d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041d8:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 80041e2:	4413      	add	r3, r2
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	7c52      	ldrb	r2, [r2, #17]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	dd07      	ble.n	80041fc <u8g2_update_dimension_common+0x72>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	7c5b      	ldrb	r3, [r3, #17]
 80041f0:	461a      	mov	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80041fc:	89fb      	ldrh	r3, [r7, #14]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  u8g2->buf_y1 += t;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	4413      	add	r3, r2
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	8a9a      	ldrh	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  u8g2->height = display_info->pixel_height;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	8ada      	ldrh	r2, [r3, #22]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	@ 0x52
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	4603      	mov	r3, r0
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fdc6 	bl	8003dfe <u8g2_IsIntersection>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004280:	e03b      	b.n	80042fa <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004296:	429a      	cmp	r2, r3
 8004298:	d205      	bcs.n	80042a6 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d905      	bls.n	80042c2 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d205      	bcs.n	80042de <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	@ 0x54
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d905      	bls.n	80042fa <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ff3d 	bl	800418a <u8g2_update_dimension_common>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff7b 	bl	8004248 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af02      	add	r7, sp, #8
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	4608      	mov	r0, r1
 8004364:	4611      	mov	r1, r2
 8004366:	461a      	mov	r2, r3
 8004368:	4603      	mov	r3, r0
 800436a:	817b      	strh	r3, [r7, #10]
 800436c:	460b      	mov	r3, r1
 800436e:	813b      	strh	r3, [r7, #8]
 8004370:	4613      	mov	r3, r2
 8004372:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004374:	88f8      	ldrh	r0, [r7, #6]
 8004376:	893a      	ldrh	r2, [r7, #8]
 8004378:	8979      	ldrh	r1, [r7, #10]
 800437a:	7e3b      	ldrb	r3, [r7, #24]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	4603      	mov	r3, r0
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f7ff fc14 	bl	8003bae <u8g2_draw_hv_line_2dir>
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <u8x8_ascii_next+0x18>
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	2b0a      	cmp	r3, #10
 80043be:	d102      	bne.n	80043c6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80043c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043c4:	e001      	b.n	80043ca <u8x8_ascii_next+0x22>
  return b;
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	b29b      	uxth	r3, r3
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	460b      	mov	r3, r1
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691c      	ldr	r4, [r3, #16]
 80043e6:	7afa      	ldrb	r2, [r7, #11]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2117      	movs	r1, #23
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	47a0      	blx	r4
 80043f0:	4603      	mov	r3, r0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd90      	pop	{r4, r7, pc}

080043fa <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	460b      	mov	r3, r1
 8004404:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004406:	1cfb      	adds	r3, r7, #3
 8004408:	461a      	mov	r2, r3
 800440a:	2101      	movs	r1, #1
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ffe1 	bl	80043d4 <u8x8_byte_SendBytes>
 8004412:	4603      	mov	r3, r0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691c      	ldr	r4, [r3, #16]
 8004428:	2300      	movs	r3, #0
 800442a:	2200      	movs	r2, #0
 800442c:	2118      	movs	r1, #24
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	47a0      	blx	r4
 8004432:	4603      	mov	r3, r0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bd90      	pop	{r4, r7, pc}

0800443c <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691c      	ldr	r4, [r3, #16]
 8004448:	2300      	movs	r3, #0
 800444a:	2200      	movs	r2, #0
 800444c:	2119      	movs	r1, #25
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	47a0      	blx	r4
 8004452:	4603      	mov	r3, r0
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}

0800445c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68dc      	ldr	r4, [r3, #12]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	2300      	movs	r3, #0
 8004470:	2115      	movs	r1, #21
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	47a0      	blx	r4
 8004476:	4603      	mov	r3, r0
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bd90      	pop	{r4, r7, pc}

08004480 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68dc      	ldr	r4, [r3, #12]
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	2300      	movs	r3, #0
 8004494:	2116      	movs	r1, #22
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	47a0      	blx	r4
 800449a:	4603      	mov	r3, r0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd90      	pop	{r4, r7, pc}

080044a4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	460b      	mov	r3, r1
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68dc      	ldr	r4, [r3, #12]
 80044b6:	7afa      	ldrb	r2, [r7, #11]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2117      	movs	r1, #23
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	47a0      	blx	r4
 80044c0:	4603      	mov	r3, r0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}

080044ca <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80044ca:	b590      	push	{r4, r7, lr}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68dc      	ldr	r4, [r3, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	2200      	movs	r2, #0
 80044da:	2118      	movs	r1, #24
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	47a0      	blx	r4
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}

080044ea <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80044ea:	b590      	push	{r4, r7, lr}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68dc      	ldr	r4, [r3, #12]
 80044f6:	2300      	movs	r3, #0
 80044f8:	2200      	movs	r2, #0
 80044fa:	2119      	movs	r1, #25
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	47a0      	blx	r4
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bd90      	pop	{r4, r7, pc}

0800450a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800450a:	b590      	push	{r4, r7, lr}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	73fb      	strb	r3, [r7, #15]
    data++;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2bfe      	cmp	r3, #254	@ 0xfe
 8004524:	d031      	beq.n	800458a <u8x8_cad_SendSequence+0x80>
 8004526:	2bfe      	cmp	r3, #254	@ 0xfe
 8004528:	dc3d      	bgt.n	80045a6 <u8x8_cad_SendSequence+0x9c>
 800452a:	2b19      	cmp	r3, #25
 800452c:	dc3b      	bgt.n	80045a6 <u8x8_cad_SendSequence+0x9c>
 800452e:	2b18      	cmp	r3, #24
 8004530:	da23      	bge.n	800457a <u8x8_cad_SendSequence+0x70>
 8004532:	2b16      	cmp	r3, #22
 8004534:	dc02      	bgt.n	800453c <u8x8_cad_SendSequence+0x32>
 8004536:	2b15      	cmp	r3, #21
 8004538:	da03      	bge.n	8004542 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800453a:	e034      	b.n	80045a6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800453c:	2b17      	cmp	r3, #23
 800453e:	d00e      	beq.n	800455e <u8x8_cad_SendSequence+0x54>
	return;
 8004540:	e031      	b.n	80045a6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68dc      	ldr	r4, [r3, #12]
 800454c:	7bba      	ldrb	r2, [r7, #14]
 800454e:	7bf9      	ldrb	r1, [r7, #15]
 8004550:	2300      	movs	r3, #0
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	47a0      	blx	r4
	  data++;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	603b      	str	r3, [r7, #0]
	  break;
 800455c:	e022      	b.n	80045a4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004564:	f107 030e 	add.w	r3, r7, #14
 8004568:	461a      	mov	r2, r3
 800456a:	2101      	movs	r1, #1
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff99 	bl	80044a4 <u8x8_cad_SendData>
	  data++;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	603b      	str	r3, [r7, #0]
	  break;
 8004578:	e014      	b.n	80045a4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68dc      	ldr	r4, [r3, #12]
 800457e:	7bf9      	ldrb	r1, [r7, #15]
 8004580:	2300      	movs	r3, #0
 8004582:	2200      	movs	r2, #0
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	47a0      	blx	r4
	  break;
 8004588:	e00c      	b.n	80045a4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004590:	7bbb      	ldrb	r3, [r7, #14]
 8004592:	461a      	mov	r2, r3
 8004594:	2129      	movs	r1, #41	@ 0x29
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa36 	bl	8004a08 <u8x8_gpio_call>
	  data++;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	603b      	str	r3, [r7, #0]
	  break;
 80045a2:	bf00      	nop
    cmd = *data;
 80045a4:	e7b6      	b.n	8004514 <u8x8_cad_SendSequence+0xa>
	return;
 80045a6:	bf00      	nop
    }
  }
}
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}

080045ae <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80045ae:	b590      	push	{r4, r7, lr}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	460b      	mov	r3, r1
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff ff2d 	bl	800441c <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80045c2:	2140      	movs	r1, #64	@ 0x40
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff ff18 	bl	80043fa <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691c      	ldr	r4, [r3, #16]
 80045ce:	7afa      	ldrb	r2, [r7, #11]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2117      	movs	r1, #23
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff2f 	bl	800443c <u8x8_byte_EndTransfer>
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd90      	pop	{r4, r7, pc}
	...

080045e8 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	72fb      	strb	r3, [r7, #11]
 80045f6:	4613      	mov	r3, r2
 80045f8:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80045fa:	7afb      	ldrb	r3, [r7, #11]
 80045fc:	3b14      	subs	r3, #20
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d86e      	bhi.n	80046e0 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8004602:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	0800469f 	.word	0x0800469f
 800460c:	08004621 	.word	0x08004621
 8004610:	0800464f 	.word	0x0800464f
 8004614:	0800465b 	.word	0x0800465b
 8004618:	080046c3 	.word	0x080046c3
 800461c:	080046cb 	.word	0x080046cb
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8004620:	4b33      	ldr	r3, [pc, #204]	@ (80046f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff ff07 	bl	800443c <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fef4 	bl	800441c <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8004634:	2100      	movs	r1, #0
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff fedf 	bl	80043fa <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800463c:	7abb      	ldrb	r3, [r7, #10]
 800463e:	4619      	mov	r1, r3
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff feda 	bl	80043fa <u8x8_byte_SendByte>
      in_transfer = 1;
 8004646:	4b2a      	ldr	r3, [pc, #168]	@ (80046f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800464c:	e04a      	b.n	80046e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800464e:	7abb      	ldrb	r3, [r7, #10]
 8004650:	4619      	mov	r1, r3
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff fed1 	bl	80043fa <u8x8_byte_SendByte>
      break;      
 8004658:	e044      	b.n	80046e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800465a:	4b25      	ldr	r3, [pc, #148]	@ (80046f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff feea 	bl	800443c <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = (uint8_t *)arg_ptr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800466c:	e00a      	b.n	8004684 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	2118      	movs	r1, #24
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff ff9b 	bl	80045ae <u8x8_i2c_data_transfer>
	arg_int-=24;
 8004678:	7abb      	ldrb	r3, [r7, #10]
 800467a:	3b18      	subs	r3, #24
 800467c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3318      	adds	r3, #24
 8004682:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004684:	7abb      	ldrb	r3, [r7, #10]
 8004686:	2b18      	cmp	r3, #24
 8004688:	d8f1      	bhi.n	800466e <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800468a:	7abb      	ldrb	r3, [r7, #10]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4619      	mov	r1, r3
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff ff8c 	bl	80045ae <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8004696:	4b16      	ldr	r3, [pc, #88]	@ (80046f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
      break;
 800469c:	e022      	b.n	80046e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046a4:	2bff      	cmp	r3, #255	@ 0xff
 80046a6:	d103      	bne.n	80046b0 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2278      	movs	r2, #120	@ 0x78
 80046ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	691c      	ldr	r4, [r3, #16]
 80046b4:	7aba      	ldrb	r2, [r7, #10]
 80046b6:	7af9      	ldrb	r1, [r7, #11]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	47a0      	blx	r4
 80046be:	4603      	mov	r3, r0
 80046c0:	e011      	b.n	80046e6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
      break;
 80046c8:	e00c      	b.n	80046e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff feb2 	bl	800443c <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
      break;
 80046de:	e001      	b.n	80046e4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80046e4:	2301      	movs	r3, #1
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd90      	pop	{r4, r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2000069c 	.word	0x2000069c

080046f4 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	72fb      	strb	r3, [r7, #11]
 8004702:	4613      	mov	r3, r2
 8004704:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004706:	7afb      	ldrb	r3, [r7, #11]
 8004708:	3b0b      	subs	r3, #11
 800470a:	2b04      	cmp	r3, #4
 800470c:	f200 808a 	bhi.w	8004824 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004710:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	0800472d 	.word	0x0800472d
 800471c:	08004825 	.word	0x08004825
 8004720:	08004747 	.word	0x08004747
 8004724:	08004779 	.word	0x08004779
 8004728:	08004799 	.word	0x08004799
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800472c:	7abb      	ldrb	r3, [r7, #10]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8004732:	4940      	ldr	r1, [pc, #256]	@ (8004834 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff fee8 	bl	800450a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800473a:	e075      	b.n	8004828 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800473c:	493e      	ldr	r1, [pc, #248]	@ (8004838 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff fee3 	bl	800450a <u8x8_cad_SendSequence>
      break;
 8004744:	e070      	b.n	8004828 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004746:	7abb      	ldrb	r3, [r7, #10]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800474c:	493b      	ldr	r1, [pc, #236]	@ (800483c <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fedb 	bl	800450a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	7c9a      	ldrb	r2, [r3, #18]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004760:	e062      	b.n	8004828 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8004762:	4937      	ldr	r1, [pc, #220]	@ (8004840 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fed0 	bl	800450a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	7cda      	ldrb	r2, [r3, #19]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      break;
 8004776:	e057      	b.n	8004828 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff fea6 	bl	80044ca <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800477e:	2181      	movs	r1, #129	@ 0x81
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fe6b 	bl	800445c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8004786:	7abb      	ldrb	r3, [r7, #10]
 8004788:	4619      	mov	r1, r3
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fe78 	bl	8004480 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff feaa 	bl	80044ea <u8x8_cad_EndTransfer>
      break;
 8004796:	e047      	b.n	8004828 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fe96 	bl	80044ca <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	795b      	ldrb	r3, [r3, #5]
 80047a2:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	4413      	add	r3, r2
 80047b4:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80047b6:	2140      	movs	r1, #64	@ 0x40
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff fe4f 	bl	800445c <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f043 0310 	orr.w	r3, r3, #16
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fe45 	bl	800445c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	4619      	mov	r1, r3
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fe4f 	bl	8004480 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	799b      	ldrb	r3, [r3, #6]
 80047e6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff fe46 	bl	8004480 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	791b      	ldrb	r3, [r3, #4]
 80047f8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004800:	7dbb      	ldrb	r3, [r7, #22]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fe4a 	bl	80044a4 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004810:	7abb      	ldrb	r3, [r7, #10]
 8004812:	3b01      	subs	r3, #1
 8004814:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004816:	7abb      	ldrb	r3, [r7, #10]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1eb      	bne.n	80047f4 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fe64 	bl	80044ea <u8x8_cad_EndTransfer>
      break;
 8004822:	e001      	b.n	8004828 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004828:	2301      	movs	r3, #1
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	0800a13c 	.word	0x0800a13c
 8004838:	0800a144 	.word	0x0800a144
 800483c:	0800a14c 	.word	0x0800a14c
 8004840:	0800a154 	.word	0x0800a154

08004844 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	72fb      	strb	r3, [r7, #11]
 8004852:	4613      	mov	r3, r2
 8004854:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004856:	7aba      	ldrb	r2, [r7, #10]
 8004858:	7af9      	ldrb	r1, [r7, #11]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff ff49 	bl	80046f4 <u8x8_d_ssd1306_sh1106_generic>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8004868:	2301      	movs	r3, #1
 800486a:	e014      	b.n	8004896 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800486c:	7afb      	ldrb	r3, [r7, #11]
 800486e:	2b09      	cmp	r3, #9
 8004870:	d009      	beq.n	8004886 <u8x8_d_ssd1306_128x64_noname+0x42>
 8004872:	2b0a      	cmp	r3, #10
 8004874:	d10c      	bne.n	8004890 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f829 	bl	80048ce <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800487c:	4908      	ldr	r1, [pc, #32]	@ (80048a0 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fe43 	bl	800450a <u8x8_cad_SendSequence>
      break;
 8004884:	e006      	b.n	8004894 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004886:	4907      	ldr	r1, [pc, #28]	@ (80048a4 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f80d 	bl	80048a8 <u8x8_d_helper_display_setup_memory>
      break;
 800488e:	e001      	b.n	8004894 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8004894:	2301      	movs	r3, #1
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	0800a104 	.word	0x0800a104
 80048a4:	0800a15c 	.word	0x0800a15c

080048a8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	7c9a      	ldrb	r2, [r3, #18]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80048ce:	b590      	push	{r4, r7, lr}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695c      	ldr	r4, [r3, #20]
 80048da:	2300      	movs	r3, #0
 80048dc:	2200      	movs	r2, #0
 80048de:	2128      	movs	r1, #40	@ 0x28
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68dc      	ldr	r4, [r3, #12]
 80048e8:	2300      	movs	r3, #0
 80048ea:	2200      	movs	r2, #0
 80048ec:	2114      	movs	r1, #20
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80048f2:	2201      	movs	r2, #1
 80048f4:	214b      	movs	r1, #75	@ 0x4b
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f886 	bl	8004a08 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	791b      	ldrb	r3, [r3, #4]
 8004902:	461a      	mov	r2, r3
 8004904:	2129      	movs	r1, #41	@ 0x29
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f87e 	bl	8004a08 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800490c:	2200      	movs	r2, #0
 800490e:	214b      	movs	r1, #75	@ 0x4b
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f879 	bl	8004a08 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	791b      	ldrb	r3, [r3, #4]
 800491c:	461a      	mov	r2, r3
 800491e:	2129      	movs	r1, #41	@ 0x29
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f871 	bl	8004a08 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004926:	2201      	movs	r2, #1
 8004928:	214b      	movs	r1, #75	@ 0x4b
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f86c 	bl	8004a08 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	795b      	ldrb	r3, [r3, #5]
 8004936:	461a      	mov	r2, r3
 8004938:	2129      	movs	r1, #41	@ 0x29
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f864 	bl	8004a08 <u8x8_gpio_call>
}    
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}

08004948 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	4608      	mov	r0, r1
 8004952:	4611      	mov	r1, r2
 8004954:	461a      	mov	r2, r3
 8004956:	4603      	mov	r3, r0
 8004958:	70fb      	strb	r3, [r7, #3]
 800495a:	460b      	mov	r3, r1
 800495c:	70bb      	strb	r3, [r7, #2]
 800495e:	4613      	mov	r3, r2
 8004960:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004966:	78bb      	ldrb	r3, [r7, #2]
 8004968:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800496a:	787b      	ldrb	r3, [r7, #1]
 800496c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689c      	ldr	r4, [r3, #8]
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	2201      	movs	r2, #1
 800497c:	210f      	movs	r1, #15
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	47a0      	blx	r4
 8004982:	4603      	mov	r3, r0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bd90      	pop	{r4, r7, pc}

0800498c <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689c      	ldr	r4, [r3, #8]
 8004998:	2300      	movs	r3, #0
 800499a:	2200      	movs	r2, #0
 800499c:	2109      	movs	r1, #9
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	47a0      	blx	r4
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd90      	pop	{r4, r7, pc}

080049aa <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80049aa:	b590      	push	{r4, r7, lr}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689c      	ldr	r4, [r3, #8]
 80049b6:	2300      	movs	r3, #0
 80049b8:	2200      	movs	r2, #0
 80049ba:	210a      	movs	r1, #10
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd90      	pop	{r4, r7, pc}

080049c8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689c      	ldr	r4, [r3, #8]
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	2300      	movs	r3, #0
 80049dc:	210b      	movs	r1, #11
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	47a0      	blx	r4
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd90      	pop	{r4, r7, pc}

080049ea <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80049ea:	b590      	push	{r4, r7, lr}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689c      	ldr	r4, [r3, #8]
 80049f6:	2300      	movs	r3, #0
 80049f8:	2200      	movs	r2, #0
 80049fa:	2110      	movs	r1, #16
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	47a0      	blx	r4
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd90      	pop	{r4, r7, pc}

08004a08 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
 8004a14:	4613      	mov	r3, r2
 8004a16:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695c      	ldr	r4, [r3, #20]
 8004a1c:	78ba      	ldrb	r2, [r7, #2]
 8004a1e:	78f9      	ldrb	r1, [r7, #3]
 8004a20:	2300      	movs	r3, #0
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	47a0      	blx	r4
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}

08004a2e <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	72fb      	strb	r3, [r7, #11]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a11      	ldr	r2, [pc, #68]	@ (8004aa4 <u8x8_SetupDefaults+0x58>)
 8004a5e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a10      	ldr	r2, [pc, #64]	@ (8004aa4 <u8x8_SetupDefaults+0x58>)
 8004a64:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa4 <u8x8_SetupDefaults+0x58>)
 8004a6a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <u8x8_SetupDefaults+0x58>)
 8004a70:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	22ff      	movs	r2, #255	@ 0xff
 8004a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	22ff      	movs	r2, #255	@ 0xff
 8004a94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	08004a2f 	.word	0x08004a2f

08004aa8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff ffc8 	bl	8004a4c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff59 	bl	800498c <u8x8_SetupMemory>
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ae4:	f7fe f894 	bl	8002c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ae8:	480b      	ldr	r0, [pc, #44]	@ (8004b18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004aea:	490c      	ldr	r1, [pc, #48]	@ (8004b1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004aec:	4a0c      	ldr	r2, [pc, #48]	@ (8004b20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004af0:	e002      	b.n	8004af8 <LoopCopyDataInit>

08004af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004af6:	3304      	adds	r3, #4

08004af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004afc:	d3f9      	bcc.n	8004af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004afe:	4a09      	ldr	r2, [pc, #36]	@ (8004b24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004b00:	4c09      	ldr	r4, [pc, #36]	@ (8004b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b04:	e001      	b.n	8004b0a <LoopFillZerobss>

08004b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b08:	3204      	adds	r2, #4

08004b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b0c:	d3fb      	bcc.n	8004b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b0e:	f002 fb7b 	bl	8007208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b12:	f7fc ff8d 	bl	8001a30 <main>
  bx lr
 8004b16:	4770      	bx	lr
  ldr r0, =_sdata
 8004b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004b20:	0800a190 	.word	0x0800a190
  ldr r2, =_sbss
 8004b24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004b28:	200006a4 	.word	0x200006a4

08004b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b2c:	e7fe      	b.n	8004b2c <ADC1_2_IRQHandler>
	...

08004b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b34:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <HAL_Init+0x28>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a07      	ldr	r2, [pc, #28]	@ (8004b58 <HAL_Init+0x28>)
 8004b3a:	f043 0310 	orr.w	r3, r3, #16
 8004b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b40:	2003      	movs	r0, #3
 8004b42:	f000 f947 	bl	8004dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b46:	200f      	movs	r0, #15
 8004b48:	f000 f808 	bl	8004b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b4c:	f7fd fede 	bl	800290c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40022000 	.word	0x40022000

08004b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b64:	4b12      	ldr	r3, [pc, #72]	@ (8004bb0 <HAL_InitTick+0x54>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4b12      	ldr	r3, [pc, #72]	@ (8004bb4 <HAL_InitTick+0x58>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f95f 	bl	8004e3e <HAL_SYSTICK_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e00e      	b.n	8004ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b0f      	cmp	r3, #15
 8004b8e:	d80a      	bhi.n	8004ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b90:	2200      	movs	r2, #0
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	f000 f927 	bl	8004dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b9c:	4a06      	ldr	r2, [pc, #24]	@ (8004bb8 <HAL_InitTick+0x5c>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000004 	.word	0x20000004
 8004bb4:	2000000c 	.word	0x2000000c
 8004bb8:	20000008 	.word	0x20000008

08004bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_IncTick+0x1c>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_IncTick+0x20>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4413      	add	r3, r2
 8004bcc:	4a03      	ldr	r2, [pc, #12]	@ (8004bdc <HAL_IncTick+0x20>)
 8004bce:	6013      	str	r3, [r2, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	2000000c 	.word	0x2000000c
 8004bdc:	200006a0 	.word	0x200006a0

08004be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return uwTick;
 8004be4:	4b02      	ldr	r3, [pc, #8]	@ (8004bf0 <HAL_GetTick+0x10>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr
 8004bf0:	200006a0 	.word	0x200006a0

08004bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bfc:	f7ff fff0 	bl	8004be0 <HAL_GetTick>
 8004c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d005      	beq.n	8004c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <HAL_Delay+0x44>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c1a:	bf00      	nop
 8004c1c:	f7ff ffe0 	bl	8004be0 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d8f7      	bhi.n	8004c1c <HAL_Delay+0x28>
  {
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <__NVIC_SetPriorityGrouping+0x44>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c6e:	4a04      	ldr	r2, [pc, #16]	@ (8004c80 <__NVIC_SetPriorityGrouping+0x44>)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	60d3      	str	r3, [r2, #12]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c88:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <__NVIC_GetPriorityGrouping+0x18>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	0a1b      	lsrs	r3, r3, #8
 8004c8e:	f003 0307 	and.w	r3, r3, #7
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	db0b      	blt.n	8004cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	f003 021f 	and.w	r2, r3, #31
 8004cb8:	4906      	ldr	r1, [pc, #24]	@ (8004cd4 <__NVIC_EnableIRQ+0x34>)
 8004cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	e000e100 	.word	0xe000e100

08004cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	6039      	str	r1, [r7, #0]
 8004ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db0a      	blt.n	8004d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	490c      	ldr	r1, [pc, #48]	@ (8004d24 <__NVIC_SetPriority+0x4c>)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	0112      	lsls	r2, r2, #4
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d00:	e00a      	b.n	8004d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4908      	ldr	r1, [pc, #32]	@ (8004d28 <__NVIC_SetPriority+0x50>)
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	3b04      	subs	r3, #4
 8004d10:	0112      	lsls	r2, r2, #4
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	440b      	add	r3, r1
 8004d16:	761a      	strb	r2, [r3, #24]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	e000e100 	.word	0xe000e100
 8004d28:	e000ed00 	.word	0xe000ed00

08004d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	@ 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f1c3 0307 	rsb	r3, r3, #7
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	bf28      	it	cs
 8004d4a:	2304      	movcs	r3, #4
 8004d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3304      	adds	r3, #4
 8004d52:	2b06      	cmp	r3, #6
 8004d54:	d902      	bls.n	8004d5c <NVIC_EncodePriority+0x30>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	3b03      	subs	r3, #3
 8004d5a:	e000      	b.n	8004d5e <NVIC_EncodePriority+0x32>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d60:	f04f 32ff 	mov.w	r2, #4294967295
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	401a      	ands	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d74:	f04f 31ff 	mov.w	r1, #4294967295
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7e:	43d9      	mvns	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d84:	4313      	orrs	r3, r2
         );
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3724      	adds	r7, #36	@ 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004da0:	d301      	bcc.n	8004da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004da2:	2301      	movs	r3, #1
 8004da4:	e00f      	b.n	8004dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004da6:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd0 <SysTick_Config+0x40>)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dae:	210f      	movs	r1, #15
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	f7ff ff90 	bl	8004cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <SysTick_Config+0x40>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dbe:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <SysTick_Config+0x40>)
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	e000e010 	.word	0xe000e010

08004dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff2d 	bl	8004c3c <__NVIC_SetPriorityGrouping>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	4603      	mov	r3, r0
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dfc:	f7ff ff42 	bl	8004c84 <__NVIC_GetPriorityGrouping>
 8004e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f7ff ff90 	bl	8004d2c <NVIC_EncodePriority>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff5f 	bl	8004cd8 <__NVIC_SetPriority>
}
 8004e1a:	bf00      	nop
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	4603      	mov	r3, r0
 8004e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff ff35 	bl	8004ca0 <__NVIC_EnableIRQ>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ffa2 	bl	8004d90 <SysTick_Config>
 8004e4c:	4603      	mov	r3, r0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b08b      	sub	sp, #44	@ 0x2c
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e62:	2300      	movs	r3, #0
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e66:	2300      	movs	r3, #0
 8004e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e6a:	e169      	b.n	8005140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	f040 8158 	bne.w	800513a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4a9a      	ldr	r2, [pc, #616]	@ (80050f8 <HAL_GPIO_Init+0x2a0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d05e      	beq.n	8004f52 <HAL_GPIO_Init+0xfa>
 8004e94:	4a98      	ldr	r2, [pc, #608]	@ (80050f8 <HAL_GPIO_Init+0x2a0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d875      	bhi.n	8004f86 <HAL_GPIO_Init+0x12e>
 8004e9a:	4a98      	ldr	r2, [pc, #608]	@ (80050fc <HAL_GPIO_Init+0x2a4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d058      	beq.n	8004f52 <HAL_GPIO_Init+0xfa>
 8004ea0:	4a96      	ldr	r2, [pc, #600]	@ (80050fc <HAL_GPIO_Init+0x2a4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d86f      	bhi.n	8004f86 <HAL_GPIO_Init+0x12e>
 8004ea6:	4a96      	ldr	r2, [pc, #600]	@ (8005100 <HAL_GPIO_Init+0x2a8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d052      	beq.n	8004f52 <HAL_GPIO_Init+0xfa>
 8004eac:	4a94      	ldr	r2, [pc, #592]	@ (8005100 <HAL_GPIO_Init+0x2a8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d869      	bhi.n	8004f86 <HAL_GPIO_Init+0x12e>
 8004eb2:	4a94      	ldr	r2, [pc, #592]	@ (8005104 <HAL_GPIO_Init+0x2ac>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d04c      	beq.n	8004f52 <HAL_GPIO_Init+0xfa>
 8004eb8:	4a92      	ldr	r2, [pc, #584]	@ (8005104 <HAL_GPIO_Init+0x2ac>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d863      	bhi.n	8004f86 <HAL_GPIO_Init+0x12e>
 8004ebe:	4a92      	ldr	r2, [pc, #584]	@ (8005108 <HAL_GPIO_Init+0x2b0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d046      	beq.n	8004f52 <HAL_GPIO_Init+0xfa>
 8004ec4:	4a90      	ldr	r2, [pc, #576]	@ (8005108 <HAL_GPIO_Init+0x2b0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d85d      	bhi.n	8004f86 <HAL_GPIO_Init+0x12e>
 8004eca:	2b12      	cmp	r3, #18
 8004ecc:	d82a      	bhi.n	8004f24 <HAL_GPIO_Init+0xcc>
 8004ece:	2b12      	cmp	r3, #18
 8004ed0:	d859      	bhi.n	8004f86 <HAL_GPIO_Init+0x12e>
 8004ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <HAL_GPIO_Init+0x80>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f53 	.word	0x08004f53
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004f3f 	.word	0x08004f3f
 8004ee4:	08004f81 	.word	0x08004f81
 8004ee8:	08004f87 	.word	0x08004f87
 8004eec:	08004f87 	.word	0x08004f87
 8004ef0:	08004f87 	.word	0x08004f87
 8004ef4:	08004f87 	.word	0x08004f87
 8004ef8:	08004f87 	.word	0x08004f87
 8004efc:	08004f87 	.word	0x08004f87
 8004f00:	08004f87 	.word	0x08004f87
 8004f04:	08004f87 	.word	0x08004f87
 8004f08:	08004f87 	.word	0x08004f87
 8004f0c:	08004f87 	.word	0x08004f87
 8004f10:	08004f87 	.word	0x08004f87
 8004f14:	08004f87 	.word	0x08004f87
 8004f18:	08004f87 	.word	0x08004f87
 8004f1c:	08004f35 	.word	0x08004f35
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	4a79      	ldr	r2, [pc, #484]	@ (800510c <HAL_GPIO_Init+0x2b4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f2a:	e02c      	b.n	8004f86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	623b      	str	r3, [r7, #32]
          break;
 8004f32:	e029      	b.n	8004f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	623b      	str	r3, [r7, #32]
          break;
 8004f3c:	e024      	b.n	8004f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	3308      	adds	r3, #8
 8004f44:	623b      	str	r3, [r7, #32]
          break;
 8004f46:	e01f      	b.n	8004f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	623b      	str	r3, [r7, #32]
          break;
 8004f50:	e01a      	b.n	8004f88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f5a:	2304      	movs	r3, #4
 8004f5c:	623b      	str	r3, [r7, #32]
          break;
 8004f5e:	e013      	b.n	8004f88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f68:	2308      	movs	r3, #8
 8004f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	611a      	str	r2, [r3, #16]
          break;
 8004f72:	e009      	b.n	8004f88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f74:	2308      	movs	r3, #8
 8004f76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	615a      	str	r2, [r3, #20]
          break;
 8004f7e:	e003      	b.n	8004f88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f80:	2300      	movs	r3, #0
 8004f82:	623b      	str	r3, [r7, #32]
          break;
 8004f84:	e000      	b.n	8004f88 <HAL_GPIO_Init+0x130>
          break;
 8004f86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2bff      	cmp	r3, #255	@ 0xff
 8004f8c:	d801      	bhi.n	8004f92 <HAL_GPIO_Init+0x13a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	e001      	b.n	8004f96 <HAL_GPIO_Init+0x13e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2bff      	cmp	r3, #255	@ 0xff
 8004f9c:	d802      	bhi.n	8004fa4 <HAL_GPIO_Init+0x14c>
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	e002      	b.n	8004faa <HAL_GPIO_Init+0x152>
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	3b08      	subs	r3, #8
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	210f      	movs	r1, #15
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	401a      	ands	r2, r3
 8004fbc:	6a39      	ldr	r1, [r7, #32]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80b1 	beq.w	800513a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005110 <HAL_GPIO_Init+0x2b8>)
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	4a4c      	ldr	r2, [pc, #304]	@ (8005110 <HAL_GPIO_Init+0x2b8>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6193      	str	r3, [r2, #24]
 8004fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8005110 <HAL_GPIO_Init+0x2b8>)
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ff0:	4a48      	ldr	r2, [pc, #288]	@ (8005114 <HAL_GPIO_Init+0x2bc>)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	089b      	lsrs	r3, r3, #2
 8004ff6:	3302      	adds	r3, #2
 8004ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	220f      	movs	r2, #15
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a40      	ldr	r2, [pc, #256]	@ (8005118 <HAL_GPIO_Init+0x2c0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <HAL_GPIO_Init+0x1ec>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <HAL_GPIO_Init+0x2c4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00d      	beq.n	8005040 <HAL_GPIO_Init+0x1e8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3e      	ldr	r2, [pc, #248]	@ (8005120 <HAL_GPIO_Init+0x2c8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <HAL_GPIO_Init+0x1e4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3d      	ldr	r2, [pc, #244]	@ (8005124 <HAL_GPIO_Init+0x2cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_GPIO_Init+0x1e0>
 8005034:	2303      	movs	r3, #3
 8005036:	e006      	b.n	8005046 <HAL_GPIO_Init+0x1ee>
 8005038:	2304      	movs	r3, #4
 800503a:	e004      	b.n	8005046 <HAL_GPIO_Init+0x1ee>
 800503c:	2302      	movs	r3, #2
 800503e:	e002      	b.n	8005046 <HAL_GPIO_Init+0x1ee>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_GPIO_Init+0x1ee>
 8005044:	2300      	movs	r3, #0
 8005046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005048:	f002 0203 	and.w	r2, r2, #3
 800504c:	0092      	lsls	r2, r2, #2
 800504e:	4093      	lsls	r3, r2
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005056:	492f      	ldr	r1, [pc, #188]	@ (8005114 <HAL_GPIO_Init+0x2bc>)
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	3302      	adds	r3, #2
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005070:	4b2d      	ldr	r3, [pc, #180]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	492c      	ldr	r1, [pc, #176]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]
 800507c:	e006      	b.n	800508c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800507e:	4b2a      	ldr	r3, [pc, #168]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	43db      	mvns	r3, r3
 8005086:	4928      	ldr	r1, [pc, #160]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 8005088:	4013      	ands	r3, r2
 800508a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d006      	beq.n	80050a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005098:	4b23      	ldr	r3, [pc, #140]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	4922      	ldr	r1, [pc, #136]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60cb      	str	r3, [r1, #12]
 80050a4:	e006      	b.n	80050b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80050a6:	4b20      	ldr	r3, [pc, #128]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	491e      	ldr	r1, [pc, #120]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050c0:	4b19      	ldr	r3, [pc, #100]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4918      	ldr	r1, [pc, #96]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
 80050cc:	e006      	b.n	80050dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050ce:	4b16      	ldr	r3, [pc, #88]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	4914      	ldr	r1, [pc, #80]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050d8:	4013      	ands	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d021      	beq.n	800512c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	490e      	ldr	r1, [pc, #56]	@ (8005128 <HAL_GPIO_Init+0x2d0>)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
 80050f4:	e021      	b.n	800513a <HAL_GPIO_Init+0x2e2>
 80050f6:	bf00      	nop
 80050f8:	10320000 	.word	0x10320000
 80050fc:	10310000 	.word	0x10310000
 8005100:	10220000 	.word	0x10220000
 8005104:	10210000 	.word	0x10210000
 8005108:	10120000 	.word	0x10120000
 800510c:	10110000 	.word	0x10110000
 8005110:	40021000 	.word	0x40021000
 8005114:	40010000 	.word	0x40010000
 8005118:	40010800 	.word	0x40010800
 800511c:	40010c00 	.word	0x40010c00
 8005120:	40011000 	.word	0x40011000
 8005124:	40011400 	.word	0x40011400
 8005128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800512c:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <HAL_GPIO_Init+0x304>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	43db      	mvns	r3, r3
 8005134:	4909      	ldr	r1, [pc, #36]	@ (800515c <HAL_GPIO_Init+0x304>)
 8005136:	4013      	ands	r3, r2
 8005138:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	3301      	adds	r3, #1
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	f47f ae8e 	bne.w	8004e6c <HAL_GPIO_Init+0x14>
  }
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	372c      	adds	r7, #44	@ 0x2c
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr
 800515c:	40010400 	.word	0x40010400

08005160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	887b      	ldrh	r3, [r7, #2]
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e001      	b.n	8005182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	807b      	strh	r3, [r7, #2]
 800519a:	4613      	mov	r3, r2
 800519c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800519e:	787b      	ldrb	r3, [r7, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051a4:	887a      	ldrh	r2, [r7, #2]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80051aa:	e003      	b.n	80051b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	041a      	lsls	r2, r3, #16
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	611a      	str	r2, [r3, #16]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ca:	4b08      	ldr	r3, [pc, #32]	@ (80051ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051d6:	4a05      	ldr	r2, [pc, #20]	@ (80051ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fd fa80 	bl	80026e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40010400 	.word	0x40010400

080051f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e12b      	b.n	800545a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fd fbaa 	bl	8002970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2224      	movs	r2, #36	@ 0x24
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005254:	f001 fd7e 	bl	8006d54 <HAL_RCC_GetPCLK1Freq>
 8005258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4a81      	ldr	r2, [pc, #516]	@ (8005464 <HAL_I2C_Init+0x274>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d807      	bhi.n	8005274 <HAL_I2C_Init+0x84>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a80      	ldr	r2, [pc, #512]	@ (8005468 <HAL_I2C_Init+0x278>)
 8005268:	4293      	cmp	r3, r2
 800526a:	bf94      	ite	ls
 800526c:	2301      	movls	r3, #1
 800526e:	2300      	movhi	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e006      	b.n	8005282 <HAL_I2C_Init+0x92>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a7d      	ldr	r2, [pc, #500]	@ (800546c <HAL_I2C_Init+0x27c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	bf94      	ite	ls
 800527c:	2301      	movls	r3, #1
 800527e:	2300      	movhi	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0e7      	b.n	800545a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a78      	ldr	r2, [pc, #480]	@ (8005470 <HAL_I2C_Init+0x280>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	0c9b      	lsrs	r3, r3, #18
 8005294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005464 <HAL_I2C_Init+0x274>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d802      	bhi.n	80052c4 <HAL_I2C_Init+0xd4>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	3301      	adds	r3, #1
 80052c2:	e009      	b.n	80052d8 <HAL_I2C_Init+0xe8>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	4a69      	ldr	r2, [pc, #420]	@ (8005474 <HAL_I2C_Init+0x284>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	099b      	lsrs	r3, r3, #6
 80052d6:	3301      	adds	r3, #1
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	430b      	orrs	r3, r1
 80052de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80052ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	495c      	ldr	r1, [pc, #368]	@ (8005464 <HAL_I2C_Init+0x274>)
 80052f4:	428b      	cmp	r3, r1
 80052f6:	d819      	bhi.n	800532c <HAL_I2C_Init+0x13c>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1e59      	subs	r1, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	fbb1 f3f3 	udiv	r3, r1, r3
 8005306:	1c59      	adds	r1, r3, #1
 8005308:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800530c:	400b      	ands	r3, r1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_I2C_Init+0x138>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1e59      	subs	r1, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005320:	3301      	adds	r3, #1
 8005322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005326:	e051      	b.n	80053cc <HAL_I2C_Init+0x1dc>
 8005328:	2304      	movs	r3, #4
 800532a:	e04f      	b.n	80053cc <HAL_I2C_Init+0x1dc>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d111      	bne.n	8005358 <HAL_I2C_Init+0x168>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1e58      	subs	r0, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	440b      	add	r3, r1
 8005342:	fbb0 f3f3 	udiv	r3, r0, r3
 8005346:	3301      	adds	r3, #1
 8005348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	e012      	b.n	800537e <HAL_I2C_Init+0x18e>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1e58      	subs	r0, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	0099      	lsls	r1, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	fbb0 f3f3 	udiv	r3, r0, r3
 800536e:	3301      	adds	r3, #1
 8005370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf0c      	ite	eq
 8005378:	2301      	moveq	r3, #1
 800537a:	2300      	movne	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Init+0x196>
 8005382:	2301      	movs	r3, #1
 8005384:	e022      	b.n	80053cc <HAL_I2C_Init+0x1dc>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10e      	bne.n	80053ac <HAL_I2C_Init+0x1bc>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1e58      	subs	r0, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	440b      	add	r3, r1
 800539c:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053aa:	e00f      	b.n	80053cc <HAL_I2C_Init+0x1dc>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1e58      	subs	r0, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	0099      	lsls	r1, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c2:	3301      	adds	r3, #1
 80053c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	6809      	ldr	r1, [r1, #0]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80053fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6911      	ldr	r1, [r2, #16]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68d2      	ldr	r2, [r2, #12]
 8005406:	4311      	orrs	r1, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	430b      	orrs	r3, r1
 800540e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	000186a0 	.word	0x000186a0
 8005468:	001e847f 	.word	0x001e847f
 800546c:	003d08ff 	.word	0x003d08ff
 8005470:	431bde83 	.word	0x431bde83
 8005474:	10624dd3 	.word	0x10624dd3

08005478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	461a      	mov	r2, r3
 8005484:	460b      	mov	r3, r1
 8005486:	817b      	strh	r3, [r7, #10]
 8005488:	4613      	mov	r3, r2
 800548a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800548c:	f7ff fba8 	bl	8004be0 <HAL_GetTick>
 8005490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b20      	cmp	r3, #32
 800549c:	f040 80e0 	bne.w	8005660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2319      	movs	r3, #25
 80054a6:	2201      	movs	r2, #1
 80054a8:	4970      	ldr	r1, [pc, #448]	@ (800566c <HAL_I2C_Master_Transmit+0x1f4>)
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fe50 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
 80054b8:	e0d3      	b.n	8005662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_I2C_Master_Transmit+0x50>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e0cc      	b.n	8005662 <HAL_I2C_Master_Transmit+0x1ea>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d007      	beq.n	80054ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2221      	movs	r2, #33	@ 0x21
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2210      	movs	r2, #16
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	893a      	ldrh	r2, [r7, #8]
 800551e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a50      	ldr	r2, [pc, #320]	@ (8005670 <HAL_I2C_Master_Transmit+0x1f8>)
 800552e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005530:	8979      	ldrh	r1, [r7, #10]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fc0a 	bl	8005d50 <I2C_MasterRequestWrite>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e08d      	b.n	8005662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800555c:	e066      	b.n	800562c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	6a39      	ldr	r1, [r7, #32]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 ff0e 	bl	8006384 <I2C_WaitOnTXEFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005572:	2b04      	cmp	r3, #4
 8005574:	d107      	bne.n	8005586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e06b      	b.n	8005662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	781a      	ldrb	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d11b      	bne.n	8005600 <HAL_I2C_Master_Transmit+0x188>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d017      	beq.n	8005600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	6a39      	ldr	r1, [r7, #32]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 ff05 	bl	8006414 <I2C_WaitOnBTFFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	2b04      	cmp	r3, #4
 8005616:	d107      	bne.n	8005628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e01a      	b.n	8005662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005630:	2b00      	cmp	r3, #0
 8005632:	d194      	bne.n	800555e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	00100002 	.word	0x00100002
 8005670:	ffff0000 	.word	0xffff0000

08005674 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	461a      	mov	r2, r3
 8005682:	4603      	mov	r3, r0
 8005684:	817b      	strh	r3, [r7, #10]
 8005686:	460b      	mov	r3, r1
 8005688:	813b      	strh	r3, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800568e:	f7ff faa7 	bl	8004be0 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b20      	cmp	r3, #32
 800569e:	f040 80d9 	bne.w	8005854 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2319      	movs	r3, #25
 80056a8:	2201      	movs	r2, #1
 80056aa:	496d      	ldr	r1, [pc, #436]	@ (8005860 <HAL_I2C_Mem_Write+0x1ec>)
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 fd4f 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
 80056ba:	e0cc      	b.n	8005856 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_I2C_Mem_Write+0x56>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e0c5      	b.n	8005856 <HAL_I2C_Mem_Write+0x1e2>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d007      	beq.n	80056f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2221      	movs	r2, #33	@ 0x21
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2240      	movs	r2, #64	@ 0x40
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a3a      	ldr	r2, [r7, #32]
 800571a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005720:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a4d      	ldr	r2, [pc, #308]	@ (8005864 <HAL_I2C_Mem_Write+0x1f0>)
 8005730:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005732:	88f8      	ldrh	r0, [r7, #6]
 8005734:	893a      	ldrh	r2, [r7, #8]
 8005736:	8979      	ldrh	r1, [r7, #10]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	4603      	mov	r3, r0
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fb86 	bl	8005e54 <I2C_RequestMemoryWrite>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d052      	beq.n	80057f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e081      	b.n	8005856 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fe14 	bl	8006384 <I2C_WaitOnTXEFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00d      	beq.n	800577e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	2b04      	cmp	r3, #4
 8005768:	d107      	bne.n	800577a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e06b      	b.n	8005856 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d11b      	bne.n	80057f4 <HAL_I2C_Mem_Write+0x180>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d017      	beq.n	80057f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	781a      	ldrb	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1aa      	bne.n	8005752 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fe07 	bl	8006414 <I2C_WaitOnBTFFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	2b04      	cmp	r3, #4
 8005812:	d107      	bne.n	8005824 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005822:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e016      	b.n	8005856 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	e000      	b.n	8005856 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005854:	2302      	movs	r3, #2
  }
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	00100002 	.word	0x00100002
 8005864:	ffff0000 	.word	0xffff0000

08005868 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08c      	sub	sp, #48	@ 0x30
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	461a      	mov	r2, r3
 8005876:	4603      	mov	r3, r0
 8005878:	817b      	strh	r3, [r7, #10]
 800587a:	460b      	mov	r3, r1
 800587c:	813b      	strh	r3, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005886:	f7ff f9ab 	bl	8004be0 <HAL_GetTick>
 800588a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b20      	cmp	r3, #32
 8005896:	f040 8250 	bne.w	8005d3a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	2319      	movs	r3, #25
 80058a0:	2201      	movs	r2, #1
 80058a2:	4982      	ldr	r1, [pc, #520]	@ (8005aac <HAL_I2C_Mem_Read+0x244>)
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fc53 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e243      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_I2C_Mem_Read+0x5a>
 80058be:	2302      	movs	r3, #2
 80058c0:	e23c      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d007      	beq.n	80058e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2222      	movs	r2, #34	@ 0x22
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2240      	movs	r2, #64	@ 0x40
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005912:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005918:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a62      	ldr	r2, [pc, #392]	@ (8005ab0 <HAL_I2C_Mem_Read+0x248>)
 8005928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800592a:	88f8      	ldrh	r0, [r7, #6]
 800592c:	893a      	ldrh	r2, [r7, #8]
 800592e:	8979      	ldrh	r1, [r7, #10]
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4603      	mov	r3, r0
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fb20 	bl	8005f80 <I2C_RequestMemoryRead>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e1f8      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d113      	bne.n	800597a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61fb      	str	r3, [r7, #28]
 8005966:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e1cc      	b.n	8005d14 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597e:	2b01      	cmp	r3, #1
 8005980:	d11e      	bne.n	80059c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005990:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005992:	b672      	cpsid	i
}
 8005994:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005996:	2300      	movs	r3, #0
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80059bc:	b662      	cpsie	i
}
 80059be:	e035      	b.n	8005a2c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d11e      	bne.n	8005a06 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059d8:	b672      	cpsid	i
}
 80059da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a02:	b662      	cpsie	i
}
 8005a04:	e012      	b.n	8005a2c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a14:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005a2c:	e172      	b.n	8005d14 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	f200 811f 	bhi.w	8005c76 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d123      	bne.n	8005a88 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fd2d 	bl	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e173      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a86:	e145      	b.n	8005d14 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d152      	bne.n	8005b36 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	2200      	movs	r2, #0
 8005a98:	4906      	ldr	r1, [pc, #24]	@ (8005ab4 <HAL_I2C_Mem_Read+0x24c>)
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fb58 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e148      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
 8005aaa:	bf00      	nop
 8005aac:	00100002 	.word	0x00100002
 8005ab0:	ffff0000 	.word	0xffff0000
 8005ab4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab8:	b672      	cpsid	i
}
 8005aba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005afe:	b662      	cpsie	i
}
 8005b00:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b34:	e0ee      	b.n	8005d14 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	4981      	ldr	r1, [pc, #516]	@ (8005d44 <HAL_I2C_Mem_Read+0x4dc>)
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fb05 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0f5      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b60:	b672      	cpsid	i
}
 8005b62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b96:	4b6c      	ldr	r3, [pc, #432]	@ (8005d48 <HAL_I2C_Mem_Read+0x4e0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d4c <HAL_I2C_Mem_Read+0x4e4>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0a1a      	lsrs	r2, r3, #8
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	00da      	lsls	r2, r3, #3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d118      	bne.n	8005bee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005bde:	b662      	cpsie	i
}
 8005be0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0a6      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d1d9      	bne.n	8005bb0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005c3e:	b662      	cpsie	i
}
 8005c40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c74:	e04e      	b.n	8005d14 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fc12 	bl	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e058      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d124      	bne.n	8005d14 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d107      	bne.n	8005ce2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f ae88 	bne.w	8005a2e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	@ 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	00010004 	.word	0x00010004
 8005d48:	20000004 	.word	0x20000004
 8005d4c:	14f8b589 	.word	0x14f8b589

08005d50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d006      	beq.n	8005d7a <I2C_MasterRequestWrite+0x2a>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d003      	beq.n	8005d7a <I2C_MasterRequestWrite+0x2a>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d78:	d108      	bne.n	8005d8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e00b      	b.n	8005da4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d90:	2b12      	cmp	r3, #18
 8005d92:	d107      	bne.n	8005da4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f9cd 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00d      	beq.n	8005dd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dca:	d103      	bne.n	8005dd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e035      	b.n	8005e44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de0:	d108      	bne.n	8005df4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005df0:	611a      	str	r2, [r3, #16]
 8005df2:	e01b      	b.n	8005e2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005df4:	897b      	ldrh	r3, [r7, #10]
 8005df6:	11db      	asrs	r3, r3, #7
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	f003 0306 	and.w	r3, r3, #6
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	f063 030f 	orn	r3, r3, #15
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	490e      	ldr	r1, [pc, #56]	@ (8005e4c <I2C_MasterRequestWrite+0xfc>)
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa16 	bl	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e010      	b.n	8005e44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e22:	897b      	ldrh	r3, [r7, #10]
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4907      	ldr	r1, [pc, #28]	@ (8005e50 <I2C_MasterRequestWrite+0x100>)
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fa06 	bl	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	00010008 	.word	0x00010008
 8005e50:	00010002 	.word	0x00010002

08005e54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	4603      	mov	r3, r0
 8005e64:	817b      	strh	r3, [r7, #10]
 8005e66:	460b      	mov	r3, r1
 8005e68:	813b      	strh	r3, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f960 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea4:	d103      	bne.n	8005eae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e05f      	b.n	8005f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eb2:	897b      	ldrh	r3, [r7, #10]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ec0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	492d      	ldr	r1, [pc, #180]	@ (8005f7c <I2C_RequestMemoryWrite+0x128>)
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f9bb 	bl	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e04c      	b.n	8005f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef0:	6a39      	ldr	r1, [r7, #32]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fa46 	bl	8006384 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d107      	bne.n	8005f16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e02b      	b.n	8005f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d105      	bne.n	8005f2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f20:	893b      	ldrh	r3, [r7, #8]
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	611a      	str	r2, [r3, #16]
 8005f2a:	e021      	b.n	8005f70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f2c:	893b      	ldrh	r3, [r7, #8]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f3c:	6a39      	ldr	r1, [r7, #32]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa20 	bl	8006384 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00d      	beq.n	8005f66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d107      	bne.n	8005f62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e005      	b.n	8005f72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f66:	893b      	ldrh	r3, [r7, #8]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	00010002 	.word	0x00010002

08005f80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	817b      	strh	r3, [r7, #10]
 8005f92:	460b      	mov	r3, r1
 8005f94:	813b      	strh	r3, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f8c2 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe0:	d103      	bne.n	8005fea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0aa      	b.n	8006144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fee:	897b      	ldrh	r3, [r7, #10]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	4952      	ldr	r1, [pc, #328]	@ (800614c <I2C_RequestMemoryRead+0x1cc>)
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f91d 	bl	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e097      	b.n	8006144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602c:	6a39      	ldr	r1, [r7, #32]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f9a8 	bl	8006384 <I2C_WaitOnTXEFlagUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00d      	beq.n	8006056 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	2b04      	cmp	r3, #4
 8006040:	d107      	bne.n	8006052 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e076      	b.n	8006144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d105      	bne.n	8006068 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800605c:	893b      	ldrh	r3, [r7, #8]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	611a      	str	r2, [r3, #16]
 8006066:	e021      	b.n	80060ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	b29b      	uxth	r3, r3
 800606e:	b2da      	uxtb	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006078:	6a39      	ldr	r1, [r7, #32]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 f982 	bl	8006384 <I2C_WaitOnTXEFlagUntilTimeout>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00d      	beq.n	80060a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	2b04      	cmp	r3, #4
 800608c:	d107      	bne.n	800609e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800609c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e050      	b.n	8006144 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060a2:	893b      	ldrh	r3, [r7, #8]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ae:	6a39      	ldr	r1, [r7, #32]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f967 	bl	8006384 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d107      	bne.n	80060d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e035      	b.n	8006144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f82b 	bl	8006150 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00d      	beq.n	800611c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610e:	d103      	bne.n	8006118 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e013      	b.n	8006144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800611c:	897b      	ldrh	r3, [r7, #10]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	6a3a      	ldr	r2, [r7, #32]
 8006130:	4906      	ldr	r1, [pc, #24]	@ (800614c <I2C_RequestMemoryRead+0x1cc>)
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f886 	bl	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	00010002 	.word	0x00010002

08006150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	4613      	mov	r3, r2
 800615e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006160:	e048      	b.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d044      	beq.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616a:	f7fe fd39 	bl	8004be0 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d302      	bcc.n	8006180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d139      	bne.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b01      	cmp	r3, #1
 8006188:	d10d      	bne.n	80061a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	43da      	mvns	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	e00c      	b.n	80061c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	43da      	mvns	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4013      	ands	r3, r2
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d116      	bne.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	f043 0220 	orr.w	r2, r3, #32
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e023      	b.n	800623c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d10d      	bne.n	800621a <I2C_WaitOnFlagUntilTimeout+0xca>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	43da      	mvns	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4013      	ands	r3, r2
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	e00c      	b.n	8006234 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	43da      	mvns	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4013      	ands	r3, r2
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	429a      	cmp	r2, r3
 8006238:	d093      	beq.n	8006162 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006252:	e071      	b.n	8006338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006262:	d123      	bne.n	80062ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006272:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800627c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006298:	f043 0204 	orr.w	r2, r3, #4
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e067      	b.n	800637c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d041      	beq.n	8006338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b4:	f7fe fc94 	bl	8004be0 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d302      	bcc.n	80062ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d136      	bne.n	8006338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	0c1b      	lsrs	r3, r3, #16
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d10c      	bne.n	80062ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	43da      	mvns	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	e00b      	b.n	8006306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	43da      	mvns	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	4013      	ands	r3, r2
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf14      	ite	ne
 8006300:	2301      	movne	r3, #1
 8006302:	2300      	moveq	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006324:	f043 0220 	orr.w	r2, r3, #32
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e021      	b.n	800637c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d10c      	bne.n	800635c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	43da      	mvns	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4013      	ands	r3, r2
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e00b      	b.n	8006374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	43da      	mvns	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	bf14      	ite	ne
 800636e:	2301      	movne	r3, #1
 8006370:	2300      	moveq	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	f47f af6d 	bne.w	8006254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006390:	e034      	b.n	80063fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f8e3 	bl	800655e <I2C_IsAcknowledgeFailed>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e034      	b.n	800640c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d028      	beq.n	80063fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063aa:	f7fe fc19 	bl	8004be0 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d302      	bcc.n	80063c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11d      	bne.n	80063fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ca:	2b80      	cmp	r3, #128	@ 0x80
 80063cc:	d016      	beq.n	80063fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e007      	b.n	800640c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006406:	2b80      	cmp	r3, #128	@ 0x80
 8006408:	d1c3      	bne.n	8006392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006420:	e034      	b.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f89b 	bl	800655e <I2C_IsAcknowledgeFailed>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e034      	b.n	800649c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d028      	beq.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643a:	f7fe fbd1 	bl	8004be0 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d11d      	bne.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b04      	cmp	r3, #4
 800645c:	d016      	beq.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e007      	b.n	800649c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b04      	cmp	r3, #4
 8006498:	d1c3      	bne.n	8006422 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064b0:	e049      	b.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d119      	bne.n	80064f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0210 	mvn.w	r2, #16
 80064c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e030      	b.n	8006556 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f4:	f7fe fb74 	bl	8004be0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d11d      	bne.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006514:	2b40      	cmp	r3, #64	@ 0x40
 8006516:	d016      	beq.n	8006546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	f043 0220 	orr.w	r2, r3, #32
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e007      	b.n	8006556 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006550:	2b40      	cmp	r3, #64	@ 0x40
 8006552:	d1ae      	bne.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006574:	d11b      	bne.n	80065ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800657e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	f043 0204 	orr.w	r2, r3, #4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e272      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 8087 	beq.w	80066ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065dc:	4b92      	ldr	r3, [pc, #584]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 030c 	and.w	r3, r3, #12
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d00c      	beq.n	8006602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065e8:	4b8f      	ldr	r3, [pc, #572]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 030c 	and.w	r3, r3, #12
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d112      	bne.n	800661a <HAL_RCC_OscConfig+0x5e>
 80065f4:	4b8c      	ldr	r3, [pc, #560]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006600:	d10b      	bne.n	800661a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006602:	4b89      	ldr	r3, [pc, #548]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d06c      	beq.n	80066e8 <HAL_RCC_OscConfig+0x12c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d168      	bne.n	80066e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e24c      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006622:	d106      	bne.n	8006632 <HAL_RCC_OscConfig+0x76>
 8006624:	4b80      	ldr	r3, [pc, #512]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a7f      	ldr	r2, [pc, #508]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800662a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	e02e      	b.n	8006690 <HAL_RCC_OscConfig+0xd4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10c      	bne.n	8006654 <HAL_RCC_OscConfig+0x98>
 800663a:	4b7b      	ldr	r3, [pc, #492]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a7a      	ldr	r2, [pc, #488]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	4b78      	ldr	r3, [pc, #480]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a77      	ldr	r2, [pc, #476]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800664c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	e01d      	b.n	8006690 <HAL_RCC_OscConfig+0xd4>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800665c:	d10c      	bne.n	8006678 <HAL_RCC_OscConfig+0xbc>
 800665e:	4b72      	ldr	r3, [pc, #456]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a71      	ldr	r2, [pc, #452]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	4b6f      	ldr	r3, [pc, #444]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a6e      	ldr	r2, [pc, #440]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e00b      	b.n	8006690 <HAL_RCC_OscConfig+0xd4>
 8006678:	4b6b      	ldr	r3, [pc, #428]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a6a      	ldr	r2, [pc, #424]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800667e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	4b68      	ldr	r3, [pc, #416]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a67      	ldr	r2, [pc, #412]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800668a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800668e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d013      	beq.n	80066c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006698:	f7fe faa2 	bl	8004be0 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a0:	f7fe fa9e 	bl	8004be0 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b64      	cmp	r3, #100	@ 0x64
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e200      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0xe4>
 80066be:	e014      	b.n	80066ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c0:	f7fe fa8e 	bl	8004be0 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c8:	f7fe fa8a 	bl	8004be0 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b64      	cmp	r3, #100	@ 0x64
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e1ec      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066da:	4b53      	ldr	r3, [pc, #332]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x10c>
 80066e6:	e000      	b.n	80066ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d063      	beq.n	80067be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006702:	4b49      	ldr	r3, [pc, #292]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f003 030c 	and.w	r3, r3, #12
 800670a:	2b08      	cmp	r3, #8
 800670c:	d11c      	bne.n	8006748 <HAL_RCC_OscConfig+0x18c>
 800670e:	4b46      	ldr	r3, [pc, #280]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d116      	bne.n	8006748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671a:	4b43      	ldr	r3, [pc, #268]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_RCC_OscConfig+0x176>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d001      	beq.n	8006732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e1c0      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006732:	4b3d      	ldr	r3, [pc, #244]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4939      	ldr	r1, [pc, #228]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006742:	4313      	orrs	r3, r2
 8006744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006746:	e03a      	b.n	80067be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d020      	beq.n	8006792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006750:	4b36      	ldr	r3, [pc, #216]	@ (800682c <HAL_RCC_OscConfig+0x270>)
 8006752:	2201      	movs	r2, #1
 8006754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006756:	f7fe fa43 	bl	8004be0 <HAL_GetTick>
 800675a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800675e:	f7fe fa3f 	bl	8004be0 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e1a1      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006770:	4b2d      	ldr	r3, [pc, #180]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677c:	4b2a      	ldr	r3, [pc, #168]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	4927      	ldr	r1, [pc, #156]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 800678c:	4313      	orrs	r3, r2
 800678e:	600b      	str	r3, [r1, #0]
 8006790:	e015      	b.n	80067be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006792:	4b26      	ldr	r3, [pc, #152]	@ (800682c <HAL_RCC_OscConfig+0x270>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006798:	f7fe fa22 	bl	8004be0 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a0:	f7fe fa1e 	bl	8004be0 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e180      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d03a      	beq.n	8006840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d019      	beq.n	8006806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067d2:	4b17      	ldr	r3, [pc, #92]	@ (8006830 <HAL_RCC_OscConfig+0x274>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d8:	f7fe fa02 	bl	8004be0 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e0:	f7fe f9fe 	bl	8004be0 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e160      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <HAL_RCC_OscConfig+0x26c>)
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80067fe:	2001      	movs	r0, #1
 8006800:	f000 fabc 	bl	8006d7c <RCC_Delay>
 8006804:	e01c      	b.n	8006840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006806:	4b0a      	ldr	r3, [pc, #40]	@ (8006830 <HAL_RCC_OscConfig+0x274>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800680c:	f7fe f9e8 	bl	8004be0 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006812:	e00f      	b.n	8006834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006814:	f7fe f9e4 	bl	8004be0 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d908      	bls.n	8006834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e146      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
 8006826:	bf00      	nop
 8006828:	40021000 	.word	0x40021000
 800682c:	42420000 	.word	0x42420000
 8006830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006834:	4b92      	ldr	r3, [pc, #584]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e9      	bne.n	8006814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80a6 	beq.w	800699a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006852:	4b8b      	ldr	r3, [pc, #556]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10d      	bne.n	800687a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800685e:	4b88      	ldr	r3, [pc, #544]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	4a87      	ldr	r2, [pc, #540]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006868:	61d3      	str	r3, [r2, #28]
 800686a:	4b85      	ldr	r3, [pc, #532]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006876:	2301      	movs	r3, #1
 8006878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687a:	4b82      	ldr	r3, [pc, #520]	@ (8006a84 <HAL_RCC_OscConfig+0x4c8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d118      	bne.n	80068b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006886:	4b7f      	ldr	r3, [pc, #508]	@ (8006a84 <HAL_RCC_OscConfig+0x4c8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a84 <HAL_RCC_OscConfig+0x4c8>)
 800688c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006892:	f7fe f9a5 	bl	8004be0 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689a:	f7fe f9a1 	bl	8004be0 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b64      	cmp	r3, #100	@ 0x64
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e103      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ac:	4b75      	ldr	r3, [pc, #468]	@ (8006a84 <HAL_RCC_OscConfig+0x4c8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f0      	beq.n	800689a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d106      	bne.n	80068ce <HAL_RCC_OscConfig+0x312>
 80068c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6213      	str	r3, [r2, #32]
 80068cc:	e02d      	b.n	800692a <HAL_RCC_OscConfig+0x36e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCC_OscConfig+0x334>
 80068d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	4a69      	ldr	r2, [pc, #420]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	6213      	str	r3, [r2, #32]
 80068e2:	4b67      	ldr	r3, [pc, #412]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	4a66      	ldr	r2, [pc, #408]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068e8:	f023 0304 	bic.w	r3, r3, #4
 80068ec:	6213      	str	r3, [r2, #32]
 80068ee:	e01c      	b.n	800692a <HAL_RCC_OscConfig+0x36e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	2b05      	cmp	r3, #5
 80068f6:	d10c      	bne.n	8006912 <HAL_RCC_OscConfig+0x356>
 80068f8:	4b61      	ldr	r3, [pc, #388]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	4a60      	ldr	r2, [pc, #384]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80068fe:	f043 0304 	orr.w	r3, r3, #4
 8006902:	6213      	str	r3, [r2, #32]
 8006904:	4b5e      	ldr	r3, [pc, #376]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	4a5d      	ldr	r2, [pc, #372]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	6213      	str	r3, [r2, #32]
 8006910:	e00b      	b.n	800692a <HAL_RCC_OscConfig+0x36e>
 8006912:	4b5b      	ldr	r3, [pc, #364]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	4a5a      	ldr	r2, [pc, #360]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006918:	f023 0301 	bic.w	r3, r3, #1
 800691c:	6213      	str	r3, [r2, #32]
 800691e:	4b58      	ldr	r3, [pc, #352]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	4a57      	ldr	r2, [pc, #348]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006924:	f023 0304 	bic.w	r3, r3, #4
 8006928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d015      	beq.n	800695e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006932:	f7fe f955 	bl	8004be0 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006938:	e00a      	b.n	8006950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7fe f951 	bl	8004be0 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006948:	4293      	cmp	r3, r2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e0b1      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006950:	4b4b      	ldr	r3, [pc, #300]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0ee      	beq.n	800693a <HAL_RCC_OscConfig+0x37e>
 800695c:	e014      	b.n	8006988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800695e:	f7fe f93f 	bl	8004be0 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006964:	e00a      	b.n	800697c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006966:	f7fe f93b 	bl	8004be0 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006974:	4293      	cmp	r3, r2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e09b      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800697c:	4b40      	ldr	r3, [pc, #256]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1ee      	bne.n	8006966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d105      	bne.n	800699a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800698e:	4b3c      	ldr	r3, [pc, #240]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	4a3b      	ldr	r2, [pc, #236]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8087 	beq.w	8006ab2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069a4:	4b36      	ldr	r3, [pc, #216]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f003 030c 	and.w	r3, r3, #12
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d061      	beq.n	8006a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d146      	bne.n	8006a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b8:	4b33      	ldr	r3, [pc, #204]	@ (8006a88 <HAL_RCC_OscConfig+0x4cc>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069be:	f7fe f90f 	bl	8004be0 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c6:	f7fe f90b 	bl	8004be0 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e06d      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069d8:	4b29      	ldr	r3, [pc, #164]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ec:	d108      	bne.n	8006a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069ee:	4b24      	ldr	r3, [pc, #144]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	4921      	ldr	r1, [pc, #132]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a00:	4b1f      	ldr	r3, [pc, #124]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a19      	ldr	r1, [r3, #32]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	430b      	orrs	r3, r1
 8006a12:	491b      	ldr	r1, [pc, #108]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a18:	4b1b      	ldr	r3, [pc, #108]	@ (8006a88 <HAL_RCC_OscConfig+0x4cc>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1e:	f7fe f8df 	bl	8004be0 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a26:	f7fe f8db 	bl	8004be0 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e03d      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a38:	4b11      	ldr	r3, [pc, #68]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x46a>
 8006a44:	e035      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	4b10      	ldr	r3, [pc, #64]	@ (8006a88 <HAL_RCC_OscConfig+0x4cc>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fe f8c8 	bl	8004be0 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fe f8c4 	bl	8004be0 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e026      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a66:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <HAL_RCC_OscConfig+0x4c4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x498>
 8006a72:	e01e      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e019      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
 8006a80:	40021000 	.word	0x40021000
 8006a84:	40007000 	.word	0x40007000
 8006a88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006abc <HAL_RCC_OscConfig+0x500>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d106      	bne.n	8006aae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d001      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40021000 	.word	0x40021000

08006ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0d0      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d910      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b67      	ldr	r3, [pc, #412]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 0207 	bic.w	r2, r3, #7
 8006aea:	4965      	ldr	r1, [pc, #404]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b63      	ldr	r3, [pc, #396]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0b8      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d020      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b1c:	4b59      	ldr	r3, [pc, #356]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a58      	ldr	r2, [pc, #352]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b34:	4b53      	ldr	r3, [pc, #332]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a52      	ldr	r2, [pc, #328]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b40:	4b50      	ldr	r3, [pc, #320]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	494d      	ldr	r1, [pc, #308]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d040      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d107      	bne.n	8006b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b66:	4b47      	ldr	r3, [pc, #284]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d115      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e07f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b7e:	4b41      	ldr	r3, [pc, #260]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e073      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e06b      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b9e:	4b39      	ldr	r3, [pc, #228]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f023 0203 	bic.w	r2, r3, #3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4936      	ldr	r1, [pc, #216]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bb0:	f7fe f816 	bl	8004be0 <HAL_GetTick>
 8006bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb6:	e00a      	b.n	8006bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb8:	f7fe f812 	bl	8004be0 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e053      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	4b2d      	ldr	r3, [pc, #180]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f003 020c 	and.w	r2, r3, #12
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d1eb      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006be0:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d210      	bcs.n	8006c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b24      	ldr	r3, [pc, #144]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 0207 	bic.w	r2, r3, #7
 8006bf6:	4922      	ldr	r1, [pc, #136]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b20      	ldr	r3, [pc, #128]	@ (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e032      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c1c:	4b19      	ldr	r3, [pc, #100]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4916      	ldr	r1, [pc, #88]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c3a:	4b12      	ldr	r3, [pc, #72]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	490e      	ldr	r1, [pc, #56]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c4e:	f000 f821 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 8006c52:	4602      	mov	r2, r0
 8006c54:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	490a      	ldr	r1, [pc, #40]	@ (8006c88 <HAL_RCC_ClockConfig+0x1c8>)
 8006c60:	5ccb      	ldrb	r3, [r1, r3]
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	4a09      	ldr	r2, [pc, #36]	@ (8006c8c <HAL_RCC_ClockConfig+0x1cc>)
 8006c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c6a:	4b09      	ldr	r3, [pc, #36]	@ (8006c90 <HAL_RCC_ClockConfig+0x1d0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fd ff74 	bl	8004b5c <HAL_InitTick>

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40022000 	.word	0x40022000
 8006c84:	40021000 	.word	0x40021000
 8006c88:	08008eb4 	.word	0x08008eb4
 8006c8c:	20000004 	.word	0x20000004
 8006c90:	20000008 	.word	0x20000008

08006c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cae:	4b1e      	ldr	r3, [pc, #120]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d002      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d003      	beq.n	8006cca <HAL_RCC_GetSysClockFreq+0x36>
 8006cc2:	e027      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cc4:	4b19      	ldr	r3, [pc, #100]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006cc6:	613b      	str	r3, [r7, #16]
      break;
 8006cc8:	e027      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	0c9b      	lsrs	r3, r3, #18
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	4a17      	ldr	r2, [pc, #92]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cd4:	5cd3      	ldrb	r3, [r2, r3]
 8006cd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d010      	beq.n	8006d04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ce2:	4b11      	ldr	r3, [pc, #68]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	0c5b      	lsrs	r3, r3, #17
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	4a11      	ldr	r2, [pc, #68]	@ (8006d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006cee:	5cd3      	ldrb	r3, [r2, r3]
 8006cf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006cf6:	fb03 f202 	mul.w	r2, r3, r2
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e004      	b.n	8006d0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a0c      	ldr	r2, [pc, #48]	@ (8006d38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	613b      	str	r3, [r7, #16]
      break;
 8006d12:	e002      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d14:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d16:	613b      	str	r3, [r7, #16]
      break;
 8006d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d1a:	693b      	ldr	r3, [r7, #16]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	00f42400 	.word	0x00f42400
 8006d30:	0800a174 	.word	0x0800a174
 8006d34:	0800a184 	.word	0x0800a184
 8006d38:	003d0900 	.word	0x003d0900
 8006d3c:	007a1200 	.word	0x007a1200

08006d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d44:	4b02      	ldr	r3, [pc, #8]	@ (8006d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d46:	681b      	ldr	r3, [r3, #0]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr
 8006d50:	20000004 	.word	0x20000004

08006d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d58:	f7ff fff2 	bl	8006d40 <HAL_RCC_GetHCLKFreq>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	4b05      	ldr	r3, [pc, #20]	@ (8006d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	0a1b      	lsrs	r3, r3, #8
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	4903      	ldr	r1, [pc, #12]	@ (8006d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d6a:	5ccb      	ldrb	r3, [r1, r3]
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40021000 	.word	0x40021000
 8006d78:	08008ec4 	.word	0x08008ec4

08006d7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d84:	4b0a      	ldr	r3, [pc, #40]	@ (8006db0 <RCC_Delay+0x34>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a0a      	ldr	r2, [pc, #40]	@ (8006db4 <RCC_Delay+0x38>)
 8006d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8e:	0a5b      	lsrs	r3, r3, #9
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d98:	bf00      	nop
  }
  while (Delay --);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1e5a      	subs	r2, r3, #1
 8006d9e:	60fa      	str	r2, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f9      	bne.n	8006d98 <RCC_Delay+0x1c>
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr
 8006db0:	20000004 	.word	0x20000004
 8006db4:	10624dd3 	.word	0x10624dd3

08006db8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e093      	b.n	8006ef4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fb fe15 	bl	8002a10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfc:	f023 0307 	bic.w	r3, r3, #7
 8006e00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f000 f903 	bl	8007018 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e58:	f023 030c 	bic.w	r3, r3, #12
 8006e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	4313      	orrs	r3, r2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	011a      	lsls	r2, r3, #4
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	031b      	lsls	r3, r3, #12
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006f24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d110      	bne.n	8006f4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d102      	bne.n	8006f38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f32:	7b7b      	ldrb	r3, [r7, #13]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d001      	beq.n	8006f3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e069      	b.n	8007010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f4c:	e031      	b.n	8006fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d110      	bne.n	8006f76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d102      	bne.n	8006f60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f5a:	7b3b      	ldrb	r3, [r7, #12]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d001      	beq.n	8006f64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e055      	b.n	8007010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f74:	e01d      	b.n	8006fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d108      	bne.n	8006f8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d105      	bne.n	8006f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d102      	bne.n	8006f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f88:	7b3b      	ldrb	r3, [r7, #12]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d001      	beq.n	8006f92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e03e      	b.n	8007010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0xc4>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d008      	beq.n	8006fd0 <HAL_TIM_Encoder_Start+0xd4>
 8006fbe:	e00f      	b.n	8006fe0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f893 	bl	80070f4 <TIM_CCxChannelCmd>
      break;
 8006fce:	e016      	b.n	8006ffe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	2104      	movs	r1, #4
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 f88b 	bl	80070f4 <TIM_CCxChannelCmd>
      break;
 8006fde:	e00e      	b.n	8006ffe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 f883 	bl	80070f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	2104      	movs	r1, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 f87c 	bl	80070f4 <TIM_CCxChannelCmd>
      break;
 8006ffc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a2f      	ldr	r2, [pc, #188]	@ (80070e8 <TIM_Base_SetConfig+0xd0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00b      	beq.n	8007048 <TIM_Base_SetConfig+0x30>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007036:	d007      	beq.n	8007048 <TIM_Base_SetConfig+0x30>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a2c      	ldr	r2, [pc, #176]	@ (80070ec <TIM_Base_SetConfig+0xd4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d003      	beq.n	8007048 <TIM_Base_SetConfig+0x30>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a2b      	ldr	r2, [pc, #172]	@ (80070f0 <TIM_Base_SetConfig+0xd8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d108      	bne.n	800705a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a22      	ldr	r2, [pc, #136]	@ (80070e8 <TIM_Base_SetConfig+0xd0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00b      	beq.n	800707a <TIM_Base_SetConfig+0x62>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007068:	d007      	beq.n	800707a <TIM_Base_SetConfig+0x62>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1f      	ldr	r2, [pc, #124]	@ (80070ec <TIM_Base_SetConfig+0xd4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d003      	beq.n	800707a <TIM_Base_SetConfig+0x62>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1e      	ldr	r2, [pc, #120]	@ (80070f0 <TIM_Base_SetConfig+0xd8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d108      	bne.n	800708c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a0d      	ldr	r2, [pc, #52]	@ (80070e8 <TIM_Base_SetConfig+0xd0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d103      	bne.n	80070c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f023 0201 	bic.w	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	611a      	str	r2, [r3, #16]
  }
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40000400 	.word	0x40000400
 80070f0:	40000800 	.word	0x40000800

080070f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	2201      	movs	r2, #1
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	43db      	mvns	r3, r3
 8007116:	401a      	ands	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	431a      	orrs	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007150:	2302      	movs	r3, #2
 8007152:	e046      	b.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a16      	ldr	r2, [pc, #88]	@ (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00e      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a0:	d009      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a10      	ldr	r2, [pc, #64]	@ (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10c      	bne.n	80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	40012c00 	.word	0x40012c00
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800

080071f8 <memset>:
 80071f8:	4603      	mov	r3, r0
 80071fa:	4402      	add	r2, r0
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d100      	bne.n	8007202 <memset+0xa>
 8007200:	4770      	bx	lr
 8007202:	f803 1b01 	strb.w	r1, [r3], #1
 8007206:	e7f9      	b.n	80071fc <memset+0x4>

08007208 <__libc_init_array>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	2600      	movs	r6, #0
 800720c:	4d0c      	ldr	r5, [pc, #48]	@ (8007240 <__libc_init_array+0x38>)
 800720e:	4c0d      	ldr	r4, [pc, #52]	@ (8007244 <__libc_init_array+0x3c>)
 8007210:	1b64      	subs	r4, r4, r5
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	42a6      	cmp	r6, r4
 8007216:	d109      	bne.n	800722c <__libc_init_array+0x24>
 8007218:	f000 f81a 	bl	8007250 <_init>
 800721c:	2600      	movs	r6, #0
 800721e:	4d0a      	ldr	r5, [pc, #40]	@ (8007248 <__libc_init_array+0x40>)
 8007220:	4c0a      	ldr	r4, [pc, #40]	@ (800724c <__libc_init_array+0x44>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	42a6      	cmp	r6, r4
 8007228:	d105      	bne.n	8007236 <__libc_init_array+0x2e>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007230:	4798      	blx	r3
 8007232:	3601      	adds	r6, #1
 8007234:	e7ee      	b.n	8007214 <__libc_init_array+0xc>
 8007236:	f855 3b04 	ldr.w	r3, [r5], #4
 800723a:	4798      	blx	r3
 800723c:	3601      	adds	r6, #1
 800723e:	e7f2      	b.n	8007226 <__libc_init_array+0x1e>
 8007240:	0800a188 	.word	0x0800a188
 8007244:	0800a188 	.word	0x0800a188
 8007248:	0800a188 	.word	0x0800a188
 800724c:	0800a18c 	.word	0x0800a18c

08007250 <_init>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr

0800725c <_fini>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr
